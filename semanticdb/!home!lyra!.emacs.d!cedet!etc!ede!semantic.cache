;; Object ede/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "ede/"
  :tables
  (list
    (semanticdb-table "proj-skel.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("ede/proj" include nil nil [1359 1378])
            ("ede-proj-target-%NAME%" type
               (:superclasses "ede-proj-target-%PARENT%"
                :members 
                  ( ("sourcetype" variable (:default-value "(quote (ede-source-%NAME%))") nil nil))                  
                :type "class")
                nil [1650 2004])
            ("ede-proj-register-target" code nil nil [2122 2180])
            ("ede-source-%NAME%" variable (:default-value (ede-sourcecode "ede-%NAME%-source" :name "%LONGNAME%" :sourcepattern "\\.%EXT%$" :garbagepattern (quote ("*.%EXT%")))) nil [2441 2632])
            ("ede-%NAME%-compiler" variable (:default-value (ede-compiler "ede-%NAME%-compiler" :name "%NAME%" :variables (quote (("%NAME-COMPILER%" . "%compiler-and-flags%"))) :commands (list "$(%NAME-COMPILER%) -o $@ $^") :autoconf (quote ("AC_%COMPILER-MACRO-FOR-AUTONAME-OR-nil%")))) nil [3353 3679])
            ("project-debug-target" function
               (:parent "ede-proj-target-%NAME%"
                :arguments ("obj"))
                nil [8147 8272])
            ("project-run-target" function
               (:parent "ede-proj-target-%NAME%"
                :arguments ("obj"))
                nil [8274 8397])
            ("ede-proj-makefile-sourcevar" function
               (:parent "ede-proj-target-%NAME%"
                :arguments ("this"))
                nil [8643 8833])
            ("ede-proj-makefile-dependencies" function
               (:parent "ede-proj-target-%NAME%"
                :arguments ("this"))
                nil [9957 10141])
            ("ede/proj-%NAME%" package nil nil [13722 13748]))          
      :file "proj-skel.el"
      :pointmax 13783
      :fsize 13782
      :lastmodtime '(22436 31432 242422 178000)
      :unmatched-syntax nil))
  :file "!home!lyra!.emacs.d!cedet!etc!ede!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
