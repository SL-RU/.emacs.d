;; Object dictionaries-common/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "dictionaries-common/"
  :tables
  (list
    (semanticdb-table "debian-ispell.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("debian-dict-common-debug" variable nil nil [398 526])
            ("debian-ispell-only-dictionary-alist" variable nil nil [528 853])
            ("debian-aspell-only-dictionary-alist" variable nil nil [855 1180])
            ("debian-hunspell-only-dictionary-alist" variable nil nil [1182 1515])
            ("debian-ispell-valid-dictionary-list" variable nil nil [1517 1672])
            ("debian-ispell-add-dictionary-entry" function (:arguments ("entry" "name")) nil [1674 2034])
            ("debian-ispell-build-startup-menu" function (:arguments ("mylist")) nil [2225 8517])
            ("debian-ispell-set-startup-menu" function (:arguments ("force")) nil [8519 10051])
            ("add-hook" code nil nil [10122 10181])
            ("eval-after-load" code nil nil [10250 10310])
            ("debian-ispell-dictionary" variable nil nil [10540 10674])
            ("if" code nil nil [10910 11059])
            ("debian-aspell-dictionary" variable nil nil [11083 11217])
            ("debian-hunspell-dictionary" variable nil nil [11219 11357])
            ("debian-aspell-equivs-alist" variable (:default-value (quote ((nil)))) nil [11359 11654])
            ("debian-hunspell-equivs-alist" variable (:default-value (quote ((nil)))) nil [11656 11957])
            ("debian-ispell-try-lang-equiv" function (:arguments ("langstring" "equivs-alist")) nil [12379 12949])
            ("debian-ispell-get-aspell-default" function nil nil [12952 13427])
            ("debian-ispell-get-hunspell-default" function nil nil [13429 13901])
            ("debian-ispell-preprocess-dicts-alist" function (:arguments ("dicts-alist")) nil [14437 14939])
            ("debian-ispell-initialize-dicts-alist" function nil nil [15245 16366])
            ("add-hook" code nil nil [16368 16453])
            ("debian-ispell-set-default-dictionary" function nil nil [16475 17975])
            ("eval-after-load" code nil nil [18068 18134])
            ("when" code nil nil [18372 18618])
            ("ispell-program-name" variable (:default-value (if (executable-find "aspell") "aspell" (if (executable-find "ispell") "ispell" (if (executable-find "hunspell") "hunspell" "ispell")))) nil [18990 19430]))          
      :file "debian-ispell.el"
      :pointmax 19509
      :fsize 19508
      :lastmodtime '(21624 26344 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "ispell.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("unless" code nil nil [9952 10026])
            ("declare-function" code nil nil [10029 10084])
            ("declare-function" code nil nil [10085 10175])
            ("if" code nil nil [10177 11406])
            ("if" code nil nil [11445 12069])
            ("ispell-with-no-warnings" function (:arguments ("body")) nil [12139 12258])
            ("mail-yank-prefix" variable nil nil [12271 12296])
            ("ispell" customgroup (:user-visible-flag t) nil [12298 12389])
            ("if" code nil nil [12391 12533])
            ("defalias" code nil nil [12535 12589])
            ("ispell-highlight-p" variable (:default-value (quote block)) nil [12907 13143])
            ("ispell-lazy-highlight" variable (:default-value (boundp (quote lazy-highlight-cleanup))) nil [13145 13538])
            ("ispell-highlight-face" variable (:default-value (if ispell-lazy-highlight (quote isearch) (quote highlight))) nil [13540 13842])
            ("ispell-check-comments" variable (:default-value t) nil [13844 14205])
            ("put" code nil nil [14221 14316])
            ("ispell-query-replace-choices" variable nil nil [14318 14507])
            ("ispell-skip-tib" variable nil nil [14509 14942])
            ("ispell-tib-ref-beginning" variable (:default-value "[[<]\\.") nil [14944 15041])
            ("ispell-tib-ref-end" variable (:default-value "\\.[]>]") nil [15043 15128])
            ("ispell-keep-choices-win" variable (:default-value t) nil [15130 15314])
            ("ispell-choices-win-default-height" variable (:default-value 2) nil [15316 15494])
            ("ispell-program-name" variable (:default-value (or (executable-find "aspell") (executable-find "ispell") (executable-find "hunspell") "ispell")) nil [15496 15894])
            ("ispell-alternate-dictionary" variable (:default-value (cond ((file-readable-p "/usr/dict/web2") "/usr/dict/web2") ((file-readable-p "/usr/share/dict/web2") "/usr/share/dict/web2") ((file-readable-p "/usr/dict/words") "/usr/dict/words") ((file-readable-p "/usr/lib/dict/words") "/usr/lib/dict/words") ((file-readable-p "/usr/share/dict/words") "/usr/share/dict/words") ((file-readable-p "/usr/share/lib/dict/words") "/usr/share/lib/dict/words") ((file-readable-p "/sys/dict") "/sys/dict"))) nil [15896 16504])
            ("ispell-complete-word-dict" variable nil nil [16506 16716])
            ("ispell-message-dictionary-alist" variable nil nil [16718 17220])
            ("ispell-message-fcc-skip" variable (:default-value 50000) nil [17223 17453])
            ("ispell-grep-command" variable (:default-value (if (memq system-type (quote (windows-nt ms-dos))) "grep" "egrep")) nil [17456 17785])
            ("ispell-grep-options" variable (:default-value (if (memq system-type (quote (windows-nt ms-dos))) "-Ei" "-i")) nil [17787 18078])
            ("ispell-look-command" variable (:default-value (cond ((file-exists-p "/bin/look") "/bin/look") ((file-exists-p "/usr/local/bin/look") "/usr/local/bin/look") ((file-exists-p "/usr/bin/look") "/usr/bin/look") (t "look"))) nil [18080 18406])
            ("ispell-look-p" variable (:default-value (file-exists-p ispell-look-command)) nil [18408 18610])
            ("ispell-have-new-look" variable nil nil [18612 18750])
            ("ispell-look-options" variable (:default-value (if ispell-have-new-look "-dfr" "-df")) nil [18752 18912])
            ("ispell-use-ptys-p" variable nil nil [18914 19071])
            ("ispell-following-word" variable nil nil [19073 19266])
            ("ispell-help-in-bufferp" variable nil nil [19268 19852])
            ("ispell-quietly" variable nil nil [19854 19972])
            ("ispell-format-word-function" variable (:default-value (function upcase)) nil [19974 20195])
            ("defvaralias" code nil nil [20196 20258])
            ("ispell-use-framepop-p" variable nil nil [20260 20629])
            ("ispell-personal-dictionary" variable nil nil [20646 21034])
            ("ispell-silently-savep" variable nil nil [21036 21183])
            ("ispell-local-dictionary-overridden" variable nil nil [21185 21311])
            ("make-variable-buffer-local" code nil nil [21312 21376])
            ("ispell-local-dictionary" variable nil nil [21378 22027])
            ("put" code nil nil [22043 22112])
            ("make-variable-buffer-local" code nil nil [22114 22167])
            ("ispell-dictionary" variable nil nil [22169 22341])
            ("ispell-extra-args" variable nil nil [22343 22664])
            ("ispell-skip-html" variable (:default-value (quote use-mode-name)) nil [22668 23080])
            ("make-variable-buffer-local" code nil nil [23082 23128])
            ("ispell-local-dictionary-alist" variable nil nil [23131 24106])
            ("ispell-dictionary-base-alist" variable (:default-value (quote ((nil "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B") nil iso-8859-1) ("american" "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B") nil iso-8859-1) ("brasileiro" "[A-Z\301\311\315\323\332\300\310\314\322\331\303\325\307\334\302\312\324a-z\341\351\355\363\372\340\350\354\362\371\343\365\347\374\342\352\364]" "[^A-Z\301\311\315\323\332\300\310\314\322\331\303\325\307\334\302\312\324a-z\341\351\355\363\372\340\350\354\362\371\343\365\347\374\342\352\364]" "[']" nil nil nil iso-8859-1) ("british" "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B") nil iso-8859-1) ("castellano" "[A-Z\301\311\315\321\323\332\334a-z\341\351\355\361\363\372\374]" "[^A-Z\301\311\315\321\323\332\334a-z\341\351\355\361\363\372\374]" "[-]" nil ("-B") "~tex" iso-8859-1) ("castellano8" "[A-Z\301\311\315\321\323\332\334a-z\341\351\355\361\363\372\374]" "[^A-Z\301\311\315\321\323\332\334a-z\341\351\355\361\363\372\374]" "[-]" nil ("-B" "-d" "castellano") "~latin1" iso-8859-1) ("czech" "[A-Za-z\301\311\314\315\323\332\331\335\256\251\310\330\317\253\322\341\351\354\355\363\372\371\375\276\271\350\370\357\273\362]" "[^A-Za-z\301\311\314\315\323\332\331\335\256\251\310\330\317\253\322\341\351\354\355\363\372\371\375\276\271\350\370\357\273\362]" "" nil ("-B") nil iso-8859-2) ("dansk" "[A-Z\306\330\305a-z\346\370\345]" "[^A-Z\306\330\305a-z\346\370\345]" "[']" nil ("-C") nil iso-8859-1) ("deutsch" "[a-zA-Z\"]" "[^a-zA-Z\"]" "[']" t ("-C") "~tex" iso-8859-1) ("deutsch8" "[a-zA-Z\304\326\334\344\366\337\374]" "[^a-zA-Z\304\326\334\344\366\337\374]" "[']" t ("-C" "-d" "deutsch") "~latin1" iso-8859-1) ("english" "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B") nil iso-8859-1) ("esperanto" "[A-Za-z\246\254\266\274\306\330\335\336\346\370\375\376]" "[^A-Za-z\246\254\266\274\306\330\335\336\346\370\375\376]" "[-']" t ("-C") "~latin3" iso-8859-3) ("esperanto-tex" "[A-Za-z^\\]" "[^A-Za-z^\\]" "[-'`\"]" t ("-C" "-d" "esperanto") "~tex" iso-8859-3) ("finnish" "[A-Za-z\345\344\366\305\304\326]" "[^A-Za-z\345\344\366\305\304\326]" "[:]" nil ("-C") "~list" iso-8859-1) ("francais7" "[A-Za-z]" "[^A-Za-z]" "[`'^-]" t nil nil iso-8859-1) ("francais" "[A-Za-z\300\302\306\307\310\311\312\313\316\317\324\331\333\334\340\342\347\350\351\352\353\356\357\364\371\373\374]" "[^A-Za-z\300\302\306\307\310\311\312\313\316\317\324\331\333\334\340\342\347\350\351\352\353\356\357\364\371\373\374]" "[-'.@]" t nil "~list" iso-8859-1) ("francais-tex" "[A-Za-z\300\302\306\307\310\311\312\313\316\317\324\331\333\334\340\342\347\350\351\352\353\356\357\364\371\373\374\\]" "[^A-Za-z\300\302\306\307\310\311\312\313\316\317\324\331\333\334\340\342\347\350\351\352\353\356\357\364\371\373\374\\]" "[-'^`\".@]" t nil "~tex" iso-8859-1) ("german" "[a-zA-Z\"]" "[^a-zA-Z\"]" "[']" t ("-C") "~tex" iso-8859-1) ("german8" "[a-zA-Z\304\326\334\344\366\337\374]" "[^a-zA-Z\304\326\334\344\366\337\374]" "[']" t ("-C" "-d" "german") "~latin1" iso-8859-1) ("italiano" "[A-Z\300\301\310\311\314\315\322\323\331\332a-z\340\341\350\351\354\355\363\371\372]" "[^A-Z\300\301\310\311\314\315\322\323\331\332a-z\340\341\350\351\354\355\363\371\372]" "[-.]" nil ("-B" "-d" "italian") "~tex" iso-8859-1) ("nederlands" "[A-Za-z\300\301\302\303\304\305\307\310\311\312\313\314\315\316\317\322\323\324\325\326\331\332\333\334\340\341\342\343\344\345\347\350\351\352\353\354\355\356\357\361\362\363\364\365\366\371\372\373\374]" "[^A-Za-z\300\301\302\303\304\305\307\310\311\312\313\314\315\316\317\322\323\324\325\326\331\332\333\334\340\341\342\343\344\345\347\350\351\352\353\354\355\356\357\361\362\363\364\365\366\371\372\373\374]" "[']" t ("-C") nil iso-8859-1) ("nederlands8" "[A-Za-z\300\301\302\303\304\305\307\310\311\312\313\314\315\316\317\322\323\324\325\326\331\332\333\334\340\341\342\343\344\345\347\350\351\352\353\354\355\356\357\361\362\363\364\365\366\371\372\373\374]" "[^A-Za-z\300\301\302\303\304\305\307\310\311\312\313\314\315\316\317\322\323\324\325\326\331\332\333\334\340\341\342\343\344\345\347\350\351\352\353\354\355\356\357\361\362\363\364\365\366\371\372\373\374]" "[']" t ("-C") nil iso-8859-1) ("norsk" "[A-Za-z\305\306\307\310\311\322\324\330\345\346\347\350\351\362\364\370]" "[^A-Za-z\305\306\307\310\311\322\324\330\345\346\347\350\351\362\364\370]" "[\"]" nil nil "~list" iso-8859-1) ("norsk7-tex" "[A-Za-z{}\\'^`]" "[^A-Za-z{}\\'^`]" "[\"]" nil ("-d" "norsk") "~plaintex" iso-8859-1) ("polish" "[A-Za-z\241\243\246\254\257\261\263\266\274\277\306\312\321\323\346\352\361\363]" "[^A-Za-z\241\243\246\254\257\261\263\266\274\277\306\312\321\323\346\352\361\363]" "[.]" nil nil nil iso-8859-2) ("portugues" "[a-zA-Z\301\302\307\311\323\340\341\342\351\352\355\363\343\347\372]" "[^a-zA-Z\301\302\307\311\323\340\341\342\351\352\355\363\343\347\372]" "[']" t ("-C") "~latin1" iso-8859-1) ("russiannil nil nil koi8-r) ("russianwnil nil nil windows-1251) ("slovak" "[A-Za-z\301\304\311\315\323\332\324\300\305\245\335\256\251\310\317\253\322\341\344\351\355\363\372\364\340\345\265\375\276\271\350\357\273\362]" "[^A-Za-z\301\304\311\315\323\332\324\300\305\245\335\256\251\310\317\253\322\341\344\351\355\363\372\364\340\345\265\375\276\271\350\357\273\362]" "" nil ("-B") nil iso-8859-2) ("slovenian" "[A-Za-z\301\304\311\315\323\332\324\300\305\245\335\256\251\310\317\253\322\341\344\351\355\363\372\364\340\345\265\375\276\271\350\357\273\362]" "[^A-Za-z\301\304\311\315\323\332\324\300\305\245\335\256\251\310\317\253\322\341\344\351\355\363\372\364\340\345\265\375\276\271\350\357\273\362]" "" nil ("-B" "-d" "slovenian") nil iso-8859-2) ("svenska" "[A-Za-z\345\344\366\351\340\374\350\346\370\347\305\304\326\311\300\334\310\306\330\307]" "[^A-Za-z\345\344\366\351\340\374\350\346\370\347\305\304\326\311\300\334\310\306\330\307]" "[']" nil ("-C") "~list" iso-8859-1) ("hebrew" "[\340\341\342\343\344\345\346\347\350\351\353\352\354\356\355\360\357\361\362\364\363\367\366\365\370\371\372]" "[^\340\341\342\343\344\345\346\347\350\351\353\352\354\356\355\360\357\361\362\364\363\367\366\365\370\371\372]" "" nil ("-B") nil cp1255)))) nil [24109 32647])
            ("ispell-dictionary-alist" variable nil nil [32649 35210])
            ("ispell-really-aspell" variable nil nil [35212 35290])
            ("ispell-really-hunspell" variable nil nil [35291 35373])
            ("ispell-encoding8-command" variable nil nil [35374 36033])
            ("ispell-aspell-supports-utf8" variable nil nil [36035 36334])
            ("make-obsolete-variable" code nil nil [36336 36446])
            ("ispell-dicts-name2locale-equivs-alist" variable (:default-value (quote (("american" "en_US") ("brasileiro" "pt_BR") ("british" "en_GB") ("castellano" "es_ES") ("castellano8" "es_ES") ("czech" "cs_CZ") ("dansk" "da_DK") ("deutsch" "de_DE") ("deutsch8" "de_DE") ("english" "en_US") ("esperanto" "eo") ("esperanto-tex" "eo") ("finnish" "fi_FI") ("francais7" "fr_FR") ("francais" "fr_FR") ("francais-tex" "fr_FR") ("german" "de_DE") ("german8" "de_DE") ("italiano" "it_IT") ("nederlands" "nl_NL") ("nederlands8" "nl_NL") ("norsk" "nn_NO") ("norsk7-tex" "nn_NO") ("polish" "pl_PL") ("portugues" "pt_PT") ("russian" "ru_RU") ("russianw" "ru_RU") ("slovak" "sk_SK") ("slovenian" "sl_SI") ("svenska" "sv_SE") ("hebrew" "he_IL")))) nil [36448 37518])
            ("ispell-emacs-alpha-regexp" variable (:default-value (if (string-match "^[[:alpha:]]+$" "abcde") "[[:alpha:]]" nil)) nil [37520 37733])
            ("ispell-get-mime-charset" function nil nil [38104 38400])
            ("ispell-get-aspell-encodings" function nil nil [38456 38717])
            ("debian-dict-common-debug" variable nil nil [38849 38977])
            ("debian-ispell-valid-dictionary-list" variable nil nil [38979 39128])
            ("if" code nil nil [39247 39352])
            ("if" code nil nil [39411 39528])
            ("ispell-required-version" variable
               (:constant-flag t
                :default-value (quote (3 1 12)))
                nil [39775 39894])
            ("ispell-offset" variable (:default-value -1) nil [39895 39991])
            ("ispell-version" variable
               (:constant-flag t
                :default-value "ispell.el 3.6 - 7-Jan-2003")
                nil [39993 40047])
            ("ispell-version" variable
               (:constant-flag t
                :default-value (concat ispell-version " (+ Debian `dictionaries-common' changes)"))
                nil [40233 40326])
            ("ispell-check-version" function
               (:user-visible-flag t
                :arguments ("interactivep"))
                nil [40431 44057])
            ("ispell-call-process" function (:arguments ("args")) nil [44059 44396])
            ("ispell-call-process-region" function (:arguments ("args")) nil [44398 44756])
            ("ispell-create-debug-buffer" function (:arguments ("append")) nil [44758 45289])
            ("ispell-print-if-debug" function (:arguments ("format" "args")) nil [45291 45554])
            ("ispell-menu-map" variable nil nil [45774 45829])
            ("setq" code nil nil [45895 45921])
            ("ispell-menu-xemacs" variable nil nil [45938 46104])
            ("ispell-menu-map-needed" variable (:default-value (and (not ispell-menu-map) (not (featurep (quote xemacs))) (quote reload))) nil [46281 46442])
            ("ispell-library-directory" variable (:default-value (condition-case nil (ispell-check-version) (error nil))) nil [46444 46596])
            ("ispell-process" variable nil nil [46598 46660])
            ("ispell-async-processp" variable (:default-value (and (fboundp (quote delete-process)) (fboundp (quote process-send-string)) (fboundp (quote accept-process-output)))) nil [46662 46993])
            ("ispell-aspell-dictionary-alist" variable nil nil [47039 47159])
            ("ispell-find-aspell-dictionaries" function nil nil [47161 48299])
            ("ispell-aspell-data-dir" variable nil nil [48301 48366])
            ("ispell-aspell-dict-dir" variable nil nil [48368 48439])
            ("ispell-get-aspell-config-value" function (:arguments ("key")) nil [48441 48712])
            ("ispell-aspell-find-dictionary" function (:arguments ("dict-name")) nil [48714 51147])
            ("ispell-aspell-add-aliases" function (:arguments ("alist")) nil [51149 52534])
            ("ispell-hunspell-dict-paths-alist" variable nil nil [52582 52839])
            ("ispell-hunspell-dictionary-alist" variable nil nil [52841 53093])
            ("ispell-hunspell-fill-dictionary-entry" function (:arguments ("dict")) nil [53095 54655])
            ("ispell-parse-hunspell-affix-file" function (:arguments ("dict-key")) nil [54657 56418])
            ("ispell-find-hunspell-dictionaries" function nil nil [56420 60006])
            ("ispell-last-program-name" variable nil nil [60062 60155])
            ("ispell-initialize-spellchecker-hook" variable nil nil [60157 60700])
            ("ispell-set-spellchecker-params" function nil nil [60702 65291])
            ("ispell-valid-dictionary-list" function nil nil [65293 66519])
            ("if" code nil nil [66606 68607])
            ("if" code nil nil [68624 69389])
            ("if" code nil nil [69406 70154])
            ("if" code nil nil [70184 72027])
            ("defalias" code nil nil [72029 72240])
            ("ispell-current-dictionary" variable nil nil [72319 72565])
            ("ispell-current-personal-dictionary" variable nil nil [72567 72747])
            ("ispell-decode-string" function (:arguments ("str")) nil [72749 73307])
            ("ispell-get-decoded-string" function (:arguments ("n")) nil [73380 74148])
            ("ispell-get-casechars" function nil nil [74150 74213])
            ("ispell-get-not-casechars" function nil nil [74214 74281])
            ("ispell-get-otherchars" function nil nil [74282 74346])
            ("ispell-get-many-otherchars-p" function nil nil [74347 74529])
            ("ispell-get-ispell-args" function nil nil [74530 74706])
            ("ispell-get-extended-character-mode" function nil nil [74707 75053])
            ("ispell-get-coding-system" function nil nil [75054 75232])
            ("setq" code nil nil [75335 75379])
            ("ispell-get-coding-system" function nil nil [75380 76457])
            ("ispell-pdict-modified-p" variable nil nil [76460 76565])
            ("ispell-quit" variable nil nil [76772 76796])
            ("ispell-process-directory" variable nil nil [76798 76889])
            ("ispell-filter" variable nil nil [76891 76963])
            ("ispell-filter-continue" variable nil nil [76965 77049])
            ("ispell-output-buffer" variable nil nil [77051 77155])
            ("ispell-session-buffer" variable nil nil [77157 77261])
            ("ispell-cmd-args" variable nil nil [77263 77362])
            ("ispell-query-replace-marker" variable (:default-value (make-marker)) nil [77364 77457])
            ("ispell-recursive-edit-marker" variable (:default-value (make-marker)) nil [77459 77559])
            ("ispell-checking-message" variable nil nil [77561 77704])
            ("ispell-choices-buffer" variable
               (:constant-flag t
                :default-value "*Choices*")
                nil [77706 77750])
            ("ispell-overlay" variable nil nil [77752 77823])
            ("ispell-words-keyword" variable
               (:constant-flag t
                :default-value "LocalWords: ")
                nil [77863 78095])
            ("ispell-dictionary-keyword" variable
               (:constant-flag t
                :default-value "Local IspellDict: ")
                nil [78097 78401])
            ("ispell-pdict-keyword" variable
               (:constant-flag t
                :default-value "Local IspellPersDict: ")
                nil [78403 78640])
            ("ispell-parsing-keyword" variable
               (:constant-flag t
                :default-value "Local IspellParsing: ")
                nil [78642 79077])
            ("ispell-skip-region-alist" variable (:default-value (\` ((ispell-words-keyword forward-line) (ispell-dictionary-keyword forward-line) (ispell-pdict-keyword forward-line) (ispell-parsing-keyword forward-line) ((\, (purecopy "^---*BEGIN PGP [A-Z ]*--*")) \, (purecopy "^---*END PGP [A-Z ]*--*")) ((\, (purecopy "^begin [0-9][0-9][0-9] [^ 	]+$")) \, (purecopy "
end
")) ((\, (purecopy "^%!PS-Adobe-[123].0")) \, (purecopy "
%%EOF
")) ((\, (purecopy "^---* \\(Start of \\)?[Ff]orwarded [Mm]essage")) \, (purecopy "^---* End of [Ff]orwarded [Mm]essage")) ((\, (purecopy "\\(--+\\|_+\\|\\(/\\w\\|\\(\\(\\w\\|[-_]\\)+[.:@]\\)\\)\\(\\w\\|[-_]\\)*\\([.:/@]+\\(\\w\\|[-_~=?&]\\)+\\)+\\)")))))) nil [79094 81046])
            ("put" code nil nil [81047 81102])
            ("ispell-tex-skip-alists" variable (:default-value (purecopy (quote ((("\\\\addcontentsline" ispell-tex-arg-end 2) ("\\\\add\\(tocontents\\|vspace\\)" ispell-tex-arg-end) ("\\\\\\([aA]lph\\|arabic\\)" ispell-tex-arg-end) ("\\\\bibliographystyle" ispell-tex-arg-end) ("\\\\makebox" ispell-tex-arg-end 0) ("\\\\e?psfig" ispell-tex-arg-end) ("\\\\document\\(class\\|style\\)" . "\\\\begin[ 	
]*{[ 	
]*document[ 	
]*}")) (("\\(figure\\|table\\)\\*?" ispell-tex-arg-end 0) ("list" ispell-tex-arg-end 2) ("program" . "\\\\end[ 	
]*{[ 	
]*program[ 	
]*}") ("verbatim\\*?" . "\\\\end[ 	
]*{[ 	
]*verbatim\\*?[ 	
]*}")))))) nil [81120 82467])
            ("put" code nil nil [82468 82520])
            ("ispell-html-skip-alists" variable
               (:constant-flag t
                :default-value (quote (("<[cC][oO][dD][eE]\\>[^>]*>" "</[cC][oO][dD][eE]*>") ("<[sS][cC][rR][iI][pP][tT]\\>[^>]*>" "</[sS][cC][rR][iI][pP][tT]>") ("<[aA][pP][pP][lL][eE][tT]\\>[^>]*>" "</[aA][pP][pP][lL][eE][tT]>") ("<[vV][eE][rR][bB]\\>[^>]*>" "<[vV][eE][rR][bB]\\>[^>]*>") ("<[tT][tT]/" "/") ("<[^ 	
>]" ">") ("&[^ 	
;]" "[; 	
]"))))
                nil [82538 83187])
            ("put" code nil nil [83188 83242])
            ("ispell-local-pdict" variable (:default-value ispell-personal-dictionary) nil [83244 83739])
            ("make-variable-buffer-local" code nil nil [83741 83789])
            ("ispell-buffer-local-name" variable nil nil [83861 84029])
            ("ispell-buffer-session-localwords" variable nil nil [84031 84131])
            ("make-variable-buffer-local" code nil nil [84133 84195])
            ("ispell-parser" variable (:default-value (quote use-mode-name)) nil [84197 84587])
            ("ispell-region-end" variable (:default-value (make-marker)) nil [84589 84676])
            ("ispell-check-only" variable nil nil [84678 84772])
            ("ispell-accept-output" function (:arguments ("timeout-secs" "timeout-msecs")) nil [84983 85757])
            ("ispell-send-replacement" function (:arguments ("misspelled" "replacement")) nil [85759 86062])
            ("ispell-send-string" function (:arguments ("string")) nil [86065 89078])
            ("ispell-word" function
               (:user-visible-flag t
                :arguments ("following" "quietly" "continue" "region"))
                nil [89096 94926])
            ("ispell-get-word" function (:arguments ("following" "extra-otherchars")) nil [94929 97588])
            ("ispell-pdict-save" function
               (:user-visible-flag t
                :arguments ("no-query" "force-save"))
                nil [97833 98567])
            ("ispell-command-loop" function (:arguments ("miss" "guess" "word" "start" "end")) nil [98570 109583])
            ("ispell-show-choices" function (:arguments ("line" "end")) nil [109587 111073])
            ("ispell-help" function nil nil [111091 114475])
            ("lookup-words" function (:arguments ("word" "lookup-dict")) nil [114478 117401])
            ("ispell-filter" function (:arguments ("process" "output")) nil [118071 119273])
            ("ispell-highlight-spelling-error-generic" function (:arguments ("start" "end" "highlight" "refresh")) nil [119404 121125])
            ("ispell-highlight-spelling-error-xemacs" function (:arguments ("start" "end" "highlight")) nil [121128 121479])
            ("ispell-highlight-spelling-error-overlay" function (:arguments ("start" "end" "highlight")) nil [121482 122694])
            ("ispell-highlight-spelling-error" function (:arguments ("start" "end" "highlight" "refresh")) nil [122697 123124])
            ("ispell-adjusted-window-height" function (:arguments ("window")) nil [123126 123796])
            ("ispell-overlay-window" function (:arguments ("height")) nil [123798 125156])
            ("ispell-parse-output" function (:arguments ("output" "accept-list" "shift")) nil [125212 127781])
            ("ispell-process-status" function nil nil [127784 128031])
            ("ispell-start-process" function nil nil [128034 130522])
            ("ispell-init-process" function nil nil [130525 135608])
            ("ispell-kill-ispell" function
               (:user-visible-flag t
                :arguments ("no-error" "clear"))
                nil [135625 136721])
            ("ispell-change-dictionary" function
               (:user-visible-flag t
                :arguments ("dict" "arg"))
                nil [136893 138762])
            ("ispell-internal-change-dictionary" function nil nil [138764 139389])
            ("ispell-start" variable nil nil [139459 139480])
            ("ispell-end" variable nil nil [139481 139500])
            ("ispell-region" function
               (:user-visible-flag t
                :arguments ("reg-start" "reg-end" "recheckp" "shift"))
                nil [139593 146098])
            ("ispell-begin-skip-region-regexp" function nil nil [146101 147319])
            ("ispell-begin-skip-region" function (:arguments ("skip-alist")) nil [147322 147642])
            ("ispell-begin-tex-skip-regexp" function nil nil [147645 148115])
            ("ispell-skip-region-list" function nil nil [148118 149090])
            ("ispell-tex-arg-end" function (:arguments ("arg")) nil [149093 149396])
            ("ispell-ignore-fcc" function (:arguments ("start" "end")) nil [149399 150335])
            ("ispell-skip-region" function (:arguments ("key")) nil [150338 152169])
            ("ispell-get-line" function (:arguments ("start" "end" "in-comment")) nil [152172 152916])
            ("ispell-looking-at" function (:arguments ("string")) nil [152919 153222])
            ("ispell-process-line" function (:arguments ("string" "shift")) nil [153224 161378])
            ("ispell-comments-and-strings" function
               (:user-visible-flag t
                :arguments ("only-current"))
                nil [161396 162480])
            ("ispell-comment-or-string" function (:user-visible-flag t) nil [162497 162642])
            ("ispell-buffer" function (:user-visible-flag t) nil [162659 162805])
            ("ispell-buffer-with-debug" function
               (:user-visible-flag t
                :arguments ("append"))
                nil [162822 163112])
            ("ispell-continue" function (:user-visible-flag t) nil [163129 163686])
            ("ispell-horiz-scroll" function nil nil [163714 164168])
            ("ispell-complete-word" function
               (:user-visible-flag t
                :arguments ("interior-frag"))
                nil [164295 166698])
            ("ispell-complete-word-interior-frag" function (:user-visible-flag t) nil [166716 166866])
            ("ispell" function (:user-visible-flag t) nil [166884 167497])
            ("ispell-minor-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map " " (quote ispell-minor-check)) (define-key map "" (quote ispell-minor-check)) map)) nil [167676 167879])
            ("define-minor-mode" code nil nil [167896 168551])
            ("ispell-minor-check" function (:user-visible-flag t) nil [168553 169123])
            ("ispell-message-text-end" variable (:default-value (mapconcat (function identity) (quote ("^-- $" "^#! /bin/[ck]?sh" "\\(\\(^cd .*
\\)?diff -c .*\\)?
\\*\\*\\* .*
--- .*
\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*" "\\(diff -u .*\\)?
--- .*
\\+\\+\\+ .*
@@ [-+][0-9]+,[0-9]+ [-+][0-9]+,[0-9]+ @@" "^current state:
==============
" "^\\(- \\)?[-=_]+\\s ?\\(cut here\\|Environment Follows\\)")) "\\|")) nil [169299 170388])
            ("put" code nil nil [170389 170443])
            ("ispell-mime-multipartp" function (:arguments ("limit")) nil [170446 171213])
            ("ispell-mime-skip-part" function (:arguments ("boundary")) nil [171216 173661])
            ("ispell-message" function (:user-visible-flag t) nil [173679 179618])
            ("ispell-non-empty-string" function (:arguments ("string")) nil [179621 179795])
            ("ispell-accept-buffer-local-defs" function nil nil [179980 180249])
            ("ispell-buffer-local-parsing" function nil nil [180252 182485])
            ("ispell-buffer-local-dict" function (:arguments ("no-reload")) nil [182528 183876])
            ("ispell-buffer-local-words" function nil nil [183879 185353])
            ("declare-function" code nil nil [185468 185517])
            ("ispell-add-per-file-word-list" function (:arguments ("word")) nil [185519 187138])
            ("add-to-list" code nil nil [187140 187203])
            ("ispell" package nil nil [187205 187222]))          
      :file "ispell.el"
      :pointmax 188589
      :fsize 188588
      :lastmodtime '(21624 26344 0 0)
      :unmatched-syntax '((close-paren 10026 . 10027) (symbol 9877 . 9893) (open-paren 9876 . 9877))))
  :file "!usr!share!emacs!site-lisp!dictionaries-common!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
