;; Object function-args-20160206.517/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "function-args-20160206.517/"
  :tables
  (list
    (semanticdb-table "function-args.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1599 1616])
            ("cc-cmds" include nil nil [1617 1635])
            ("etags" include nil nil [1636 1652])
            ("cl" include nil nil [1674 1687])
            ("semantic/ia" include nil nil [1689 1711])
            ("semantic/db-find" include nil nil [1712 1739])
            ("semantic-directory" include nil nil [1740 1769])
            ("ivy-last" variable nil nil [1770 1787])
            ("declare-function" code nil nil [1788 1825])
            ("declare-function" code nil nil [1826 1871])
            ("declare-function" code nil nil [1872 1906])
            ("declare-function" code nil nil [1907 1966])
            ("declare-function" code nil nil [1967 2017])
            ("function-args" customgroup (:user-visible-flag t) nil [2100 2194])
            ("function-args-faces" customgroup (:user-visible-flag t) nil [2196 2311])
            ("fa-hint-position-below" variable nil nil [2313 2437])
            ("fa-max-one-line-width" variable (:default-value 60) nil [2439 2545])
            ("moo-select-method" variable (:default-value (quote ivy)) nil [2547 2826])
            ("fa-insert-method" variable (:default-value (quote name)) nil [2828 3175])
            ("fa-hint-dark-color" variable
               (:constant-flag t
                :default-value "gray20")
                nil [3177 3215])
            ("fa-face-hint" variable
               (:default-value (\` ((((class color) (background light)) :inherit (quote default) :background "#fff3bc") (((class color) (background dark)) :background (\, fa-hint-dark-color))))
                :type "face")
                nil [3217 3462])
            ("fa-face-hint-bold" variable
               (:default-value (quote ((t (:inherit fa-face-hint :bold t))))
                :type "face")
                nil [3464 3643])
            ("fa-face-type" variable
               (:default-value (\` ((((class color) (background light)) :inherit (quote font-lock-type-face) :background "#fff3bc") (((class color) (background dark)) :inherit (quote font-lock-type-face) :background (\, fa-hint-dark-color))))
                :type "face")
                nil [3645 3942])
            ("fa-face-type-bold" variable
               (:default-value (quote ((t (:inherit (quote fa-face-type) :bold t))))
                :type "face")
                nil [3944 4120])
            ("fa-face-semi" variable
               (:default-value (quote ((((class color) (background light)) :inherit fa-face-hint-bold :foreground "#2a00ff") (((class color) (background dark)) :inherit fa-face-hint-bold :foreground "white")))
                :type "face")
                nil [4122 4420])
            ("fa-face-type-definition" variable
               (:default-value (\` ((((class color) (background light)) :inherit font-lock-type-face :background "#CECEFF") (((class color) (background dark)) :inherit font-lock-type-face :background (\, fa-hint-dark-color))))
                :type "face")
                nil [4422 4725])
            ("fa-face-type-compound" variable
               (:default-value (quote ((t (:inherit font-lock-type-face))))
                :type "face")
                nil [4727 4857])
            ("fa-paren-open" variable
               (:constant-flag t
                :default-value (propertize "(" (quote face) (quote fa-face-semi)))
                nil [4859 4954])
            ("fa-paren-close" variable
               (:constant-flag t
                :default-value (propertize ") : " (quote face) (quote fa-face-semi)))
                nil [4956 5056])
            ("fa-comma" variable
               (:constant-flag t
                :default-value (propertize "," (quote face) (quote fa-face-semi)))
                nil [5058 5144])
            ("moo-do-includes" variable (:default-value t) nil [5146 5273])
            ("function-args-mode-map" variable (:default-value (make-sparse-keymap)) nil [5356 5408])
            ("define-minor-mode" code nil nil [5425 5666])
            ("fa-idx" variable nil nil [5668 5727])
            ("fa-lst" variable nil nil [5729 5789])
            ("fa-arg" variable nil nil [5791 5839])
            ("fa-idx-cycle-down" function (:user-visible-flag t) nil [5841 6033])
            ("fa-idx-cycle-up" function (:user-visible-flag t) nil [6035 6224])
            ("let" code nil nil [6226 6581])
            ("fa-overlay" variable nil nil [6583 6633])
            ("fa-jump-maybe" function (:user-visible-flag t) nil [6635 6873])
            ("turn-on-function-args-mode" function nil nil [6875 6937])
            ("fa-config-default" function nil nil [7035 7206])
            ("fa-hint-pos" variable nil nil [7289 7374])
            ("fa-beg-pos" variable nil nil [7376 7456])
            ("fa-end-pos" variable nil nil [7458 7538])
            ("fa-superclasses" variable (:default-value (make-hash-table :test (quote equal))) nil [7540 7625])
            ("fa-delay" variable (:default-value 2) nil [7627 7706])
            ("fa-timer" variable nil nil [7708 7798])
            ("fa-last-pos" variable (:default-value 1) nil [7800 7862])
            ("fa-show-wrapper" function nil nil [7864 8080])
            ("fa-auto" function (:user-visible-flag t) nil [8082 8318])
            ("fa-show" function (:user-visible-flag t) nil [8401 8716])
            ("fa-abort" function (:user-visible-flag t) nil [8718 9105])
            ("fa-jump" function (:user-visible-flag t) nil [9107 9683])
            ("moo-complete" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [9685 11291])
            ("fa-and" function (:arguments ("predicates")) nil [11374 11566])
            ("fa-char-upcasep" function (:arguments ("c")) nil [11568 11648])
            ("moo-virtualp" function (:arguments ("tag")) nil [11650 11993])
            ("moo-typedefp" function (:arguments ("tag")) nil [11995 12126])
            ("moo-namespacep" function (:arguments ("tag")) nil [12128 12313])
            ("moo-functionp" function (:arguments ("tag")) nil [12315 12423])
            ("moo-variablep" function (:arguments ("tag")) nil [12425 12533])
            ("moo-typep" function (:arguments ("tag")) nil [12535 12631])
            ("moo-includep" function (:arguments ("tag")) nil [12633 12739])
            ("moo-usingp" function (:arguments ("tag")) nil [12741 12840])
            ("moo-constructorp" function (:arguments ("tag")) nil [12842 12967])
            ("moo-prototype-flag-p" function (:arguments ("tag")) nil [12969 13101])
            ("moo-enump" function (:arguments ("tag")) nil [13103 13247])
            ("fa-test-with" function (:arguments ("pred" "x1" "x2")) nil [13330 13458])
            ("moo-variable=" function (:arguments ("v1" "v2")) nil [13460 13880])
            ("moo-function=" function (:arguments ("f1" "f2")) nil [13882 14481])
            ("moo-tag=" function (:arguments ("x1" "x2")) nil [14483 14722])
            ("moo-tag-pos=" function (:arguments ("tag1" "tag2")) nil [14724 15123])
            ("moo-tget-filename" function (:arguments ("tag")) nil [15206 15426])
            ("moo-tget-beginning-position" function (:arguments ("tag")) nil [15428 15648])
            ("moo-tget-constructors" function (:arguments ("tag")) nil [15650 16496])
            ("moo-tget-enum-members" function (:arguments ("tag")) nil [16498 16636])
            ("moo-tget-scope" function (:arguments ("tag")) nil [16638 16772])
            ("moo-tput-filename" function (:arguments ("tag" "filename")) nil [16855 16995])
            ("moo-tput-filename-to-types" function (:arguments ("types-list" "filename")) nil [16997 17346])
            ("fa-do-comments" variable nil nil [17348 17447])
            ("fa-looking-back" function (:arguments ("x")) nil [17449 17584])
            ("fa--in-comment-p" function nil nil [17586 17740])
            ("fa--bounds-comment" function nil nil [17742 18044])
            ("fa-get-comment" function (:arguments ("x")) nil [18046 18690])
            ("fa-fancy-string" function (:arguments ("wspace")) nil [18773 20702])
            ("fa-fancy-argument" function (:arguments ("cel" "bold")) nil [20704 21219])
            ("fa-tfunction->fal" function (:arguments ("tag" "output-string")) nil [21221 24366])
            ("fa-throw-unless-eq" function (:arguments ("x" "v")) nil [24368 24511])
            ("fa-variable->cons" function (:arguments ("tag")) nil [24513 25840])
            ("fa-type->str" function (:arguments ("tag")) nil [25842 26303])
            ("fa-ttemplate-specifier->str" function (:arguments ("tag")) nil [26305 26537])
            ("moo-tag->str" function (:arguments ("tag")) nil [26539 28656])
            ("moo-propose-virtual" function (:user-visible-flag t) nil [28739 28883])
            ("moo-propose-override" function (:user-visible-flag t) nil [28885 29006])
            ("moo-propose-variables" function (:user-visible-flag t) nil [29008 29130])
            ("moo-format-tag-line" function (:arguments ("str" "file")) nil [29132 29624])
            ("moo-jump-local-cache" variable (:default-value (make-hash-table :test (quote equal))) nil [29626 29686])
            ("moo-jump-local" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [29688 31425])
            ("moo-reset-superclasses-cache" function (:user-visible-flag t) nil [31427 31567])
            ("fa-do-position" function nil nil [31569 32053])
            ("fa-start-tracking" function nil nil [32055 32350])
            ("fa-update-arg" function (:arguments ("arg")) nil [32352 32996])
            ("fa-do-show" function nil nil [32998 33886])
            ("ac-prefix-overlay" variable nil nil [33888 33914])
            ("fa-after-change" function (:arguments ("beg" "end" "len")) nil [33916 34471])
            ("fa-backward-char-skip<>" function (:arguments ("arg")) nil [34473 35255])
            ("moo-erase-string" function (:arguments ("str")) nil [35257 35522])
            ("moo-handle-completion" function (:arguments ("prefix" "candidates" "params")) nil [35524 36224])
            ("moo-tag->cons" function (:arguments ("tag")) nil [36226 36444])
            ("moo-action-insert" function (:arguments ("candidate" "formatter" "prefix")) nil [36446 37381])
            ("ivy-height" variable nil nil [37383 37402])
            ("moo-select-candidate" function (:arguments ("candidates" "action" "preselect")) nil [37404 38688])
            ("when" code nil nil [38690 38828])
            ("moo-action-jump" function (:arguments ("tag")) nil [38830 39606])
            ("moo-propose" function (:arguments ("pred")) nil [39608 40076])
            ("defalias" code nil nil [40159 40195])
            ("moo-tag-at-point" function (:arguments ("str" "predicate")) nil [40197 40818])
            ("moo-type-tag-at-point" function (:arguments ("str")) nil [40820 40995])
            ("moo-tag-at-point-generic" function (:arguments ("str" "predicate")) nil [40997 42059])
            ("moo-complete-candidates-2" function (:arguments ("prefix" "var-name")) nil [42061 45375])
            ("moo-complete-candidates-1" function (:arguments ("prefix")) nil [45377 45924])
            ("moo-complete-type-member" function (:arguments ("var-tag")) nil [45985 46524])
            ("moo-ctxt-current-symbol" function nil nil [46526 46694])
            ("fa-calculate" function nil nil [46697 52784])
            ("fa-process-tag-according-to-class" function (:arguments ("tag")) nil [52786 53058])
            ("fa-process" function (:arguments ("str" "ttype")) nil [53060 53772])
            ("moo-filter-tag-by-name" function (:arguments ("sname" "members")) nil [53774 53890])
            ("moo-filter-tag-by-class" function (:arguments ("class" "members")) nil [53892 54019])
            ("moo-ctxt-type" function nil nil [54021 55105])
            ("moo-stype->tag" function (:arguments ("str")) nil [55107 55650])
            ("moo-get-member-functions" function (:arguments ("ttype")) nil [55652 55933])
            ("moo-dereference-typedef" function (:arguments ("tag")) nil [55935 56542])
            ("moo-navigate-members" function (:arguments ("tag")) nil [56544 56804])
            ("moo-ttype->tmembers" function (:arguments ("ttype")) nil [56806 58261])
            ("moo-sname->tag" function (:arguments ("str-name")) nil [58263 58626])
            ("moo-tvar->ttype" function (:arguments ("var-tag")) nil [58628 58892])
            ("moo-get-tag-by-name" function (:arguments ("sname" "tlist")) nil [58894 59195])
            ("moo-desperately-find-sname" function (:arguments ("stag")) nil [59197 59957])
            ("moo-namespace-reduce" function (:arguments ("func" "tags")) nil [59959 61118])
            ("moo-find-sname-in-tags" function (:arguments ("stag" "tags")) nil [61120 61302])
            ("moo-flatten-namepaces" function (:arguments ("tags")) nil [61304 61516])
            ("moo-c++-class-name" function nil nil [61518 61620])
            ("moo-c++-class-template" function nil nil [61622 61739])
            ("moo-c++-braces-table" variable (:default-value (let ((table (make-char-table (quote syntax-table) nil))) (modify-syntax-entry 123 "(}" table) (modify-syntax-entry 125 "){" table) table)) nil [61741 61914])
            ("moo-c++-match-constructor-impl" function nil nil [61916 62291])
            ("moo-c++-class-name-and-template" function nil nil [62293 64016])
            ("moo-list-at-point" function nil nil [64018 64229])
            ("moo-c++-var-name-regex" variable
               (:constant-flag t
                :default-value "[a-zA-Z_][a-zA-Z0-9_]*")
                nil [64231 64289])
            ("moo-variable-definition-p" function nil nil [64291 64785])
            ("moo-unprefix-qualifier" function (:arguments ("str")) nil [64787 65128])
            ("moo-unprefix-template" function (:arguments ("str")) nil [65130 65579])
            ("moo-get-filename" function nil nil [65581 65921])
            ("aya-current" variable nil nil [65923 65943])
            ("moo-doxygen" function (:user-visible-flag t) nil [65945 66699])
            ("function-args" package nil nil [66701 66725]))          
      :file "function-args.el"
      :pointmax 66818
      :fsize 69141
      :lastmodtime '(22386 42293 932442 25000)
      :unmatched-syntax '((close-paren 1687 . 1688) (symbol 1654 . 1671) (open-paren 1653 . 1654)))
    (semanticdb-table "semantic-directory.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [790 809])
            ("semantic/db" include nil nil [810 832])
            ("sd-db" variable (:default-value (make-hash-table :test (quote equal))) nil [834 926])
            ("cl-defstruct" code nil nil [928 989])
            ("sd-file-fresh-p" function (:arguments ("actual-time" "stored-time")) nil [991 1244])
            ("sd-force-reparse" variable nil nil [1246 1343])
            ("sd-fetch-this-file-tags" function (:arguments ("file")) nil [1345 1563])
            ("sd-fetch-tags" function (:arguments ("file-list")) nil [1565 4288])
            ("semantic-directory" package nil nil [4290 4319]))          
      :file "semantic-directory.el"
      :pointmax 4357
      :fsize 4356
      :lastmodtime '(22386 42293 840442 22000)
      :unmatched-syntax nil))
  :file "!home!lyra!.emacs.d!elpa!function-args-20160206.517!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
