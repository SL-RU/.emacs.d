;; Object helm-20160616.217/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "helm-20160616.217/"
  :tables
  (list
    (semanticdb-table "helm-elisp.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [817 834])
            ("helm" include nil nil [835 850])
            ("helm-help" include nil nil [851 871])
            ("helm-types" include nil nil [872 893])
            ("helm-utils" include nil nil [894 915])
            ("helm-info" include nil nil [916 936])
            ("helm-eval" include nil nil [937 957])
            ("helm-files" include nil nil [958 979])
            ("advice" include nil nil [980 997])
            ("declare-function" code nil nil [999 1052])
            ("declare-function" code nil nil [1053 1106])
            ("declare-function" code nil nil [1107 1156])
            ("helm-elisp" customgroup (:user-visible-flag t) nil [1185 1280])
            ("helm-turn-on-show-completion" variable (:default-value t) nil [1282 1433])
            ("helm-show-completion-use-special-display" variable (:default-value t) nil [1435 1681])
            ("helm-show-completion-min-window-height" variable (:default-value 7) nil [1683 1887])
            ("helm-lisp-quoted-function-list" variable (:default-value (quote (funcall apply mapc cl-mapc mapcar cl-mapcar callf callf2 cl-callf cl-callf2 fset fboundp fmakunbound symbol-function))) nil [1889 2226])
            ("helm-lisp-unquoted-function-list" variable (:default-value (quote (function defadvice))) nil [2228 2463])
            ("helm-apropos-fuzzy-match" variable nil nil [2465 2602])
            ("helm-lisp-fuzzy-completion" variable nil nil [2604 2935])
            ("helm-apropos-function-list" variable (:default-value (quote (helm-def-source--emacs-commands helm-def-source--emacs-functions helm-def-source--eieio-classes helm-def-source--eieio-generic helm-def-source--emacs-variables helm-def-source--emacs-faces helm-def-source--helm-attributes))) nil [2937 3569])
            ("helm-elisp-faces" customgroup (:user-visible-flag t) nil [3589 3724])
            ("helm-lisp-show-completion" variable
               (:default-value (quote ((t (:background "DarkSlateGray"))))
                :type "face")
                nil [3726 3893])
            ("helm-lisp-completion-info" variable
               (:default-value (quote ((t (:foreground "red"))))
                :type "face")
                nil [3895 4046])
            ("helm-elisp-help-function" variable (:default-value (quote helm-elisp-show-help)) nil [4048 4391])
            ("helm-show-completion-overlay" variable nil nil [4487 4528])
            ("helm-show-completion" function nil nil [4578 4785])
            ("helm-show-completion-init-overlay" function (:arguments ("beg" "end")) nil [4787 5050])
            ("helm-show-completion-display-function" function (:arguments ("buffer" "_args")) nil [5052 6079])
            ("with-helm-show-completion" function (:arguments ("beg" "end" "body")) nil [6081 7429])
            ("helm-lisp-completion--predicate-at-point" function (:arguments ("beg")) nil [7467 9171])
            ("helm-thing-before-point" function (:arguments ("limits" "regexp")) nil [9173 9842])
            ("helm-bounds-of-thing-before-point" function (:arguments ("regexp")) nil [9844 10045])
            ("helm-insert-completion-at-point" function (:arguments ("beg" "end" "str")) nil [10047 10626])
            ("helm-lisp-completion--cache" variable nil nil [10628 10668])
            ("helm-lgst-len" variable nil nil [10669 10695])
            ("helm-lisp-completion-at-point" function (:user-visible-flag t) nil [10711 13041])
            ("helm-lisp-completion-persistent-action" function (:arguments ("candidate" "name")) nil [13043 13337])
            ("helm-lisp-completion-persistent-help" function nil nil [13339 13636])
            ("helm-elisp--show-help-1" function (:arguments ("candidate" "name")) nil [13638 14187])
            ("helm-elisp-show-help" function (:arguments ("candidate" "name")) nil [14189 14479])
            ("helm-elisp-show-doc-modeline" function (:arguments ("candidate" "name")) nil [14481 14843])
            ("helm-lisp-completion-transformer" function (:arguments ("candidates" "_source")) nil [14845 15489])
            ("helm-get-first-line-documentation" function (:arguments ("sym" "name")) nil [15491 16443])
            ("helm-complete-file-name-at-point" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [16517 17675])
            ("helm-lisp-indent" function nil nil [17692 18076])
            ("helm-lisp-completion-or-file-name-at-point" function (:user-visible-flag t) nil [18093 18616])
            ("helm-apropos-init" function (:arguments ("test" "default")) nil [18638 19077])
            ("helm-apropos-init-faces" function (:arguments ("default")) nil [19079 19728])
            ("helm-apropos-default-sort-fn" function (:arguments ("candidates" "_source")) nil [19730 19884])
            ("helm-def-source--emacs-variables" function (:arguments ("default")) nil [19886 21441])
            ("helm-def-source--emacs-faces" function (:arguments ("default")) nil [21443 22468])
            ("helm-def-source--helm-attributes" function (:arguments ("_default")) nil [22470 23289])
            ("helm-def-source--emacs-commands" function (:arguments ("default")) nil [23291 24039])
            ("helm-def-source--emacs-functions" function (:arguments ("default")) nil [24041 25061])
            ("helm-def-source--eieio-classes" function (:arguments ("default")) nil [25063 25890])
            ("helm-def-source--eieio-generic" function (:arguments ("default")) nil [25892 26740])
            ("helm-info-lookup-symbol-1" function (:arguments ("c")) nil [26742 27157])
            ("helm-info-lookup-symbol" function (:arguments ("candidate")) nil [27159 27268])
            ("helm-elisp--persistent-help" function (:arguments ("candidate" "fun" "name")) nil [27270 28078])
            ("helm-apropos" function
               (:user-visible-flag t
                :arguments ("default"))
                nil [28095 28630])
            ("helm-source-advice" variable (:default-value (quote ((name . "Function Advice") (candidates . helm-advice-candidates) (action ("Toggle Enable/Disable" . helm-advice-toggle)) (persistent-action . helm-advice-persistent-action) (nomark) (multiline) (persistent-help . "Describe function / C-u C-j: Toggle advice")))) nil [28652 28967])
            ("helm-advice-candidates" function nil nil [28969 29679])
            ("helm-advice-persistent-action" function (:arguments ("func-class-advice")) nil [29681 29857])
            ("helm-advice-toggle" function (:arguments ("func-class-advice")) nil [29859 30297])
            ("helm-advice-update-current-display-string" function nil nil [30299 30621])
            ("helm-manage-advice" function (:user-visible-flag t) nil [30638 30802])
            ("helm-locate-library-scan-list" function nil nil [30837 31160])
            ("helm-locate-library" function (:user-visible-flag t) nil [31177 32007])
            ("helm-set-variable" function (:arguments ("var")) nil [32009 32440])
            ("helm-absolute-time-timers-class" type
               (:interfaces ("helm-type-timers")
                :superclasses "helm-source-sync"
                :members 
                  ( ("candidates" variable (:default-value "timer-list") nil nil)
                    ("allow-dups" variable (:default-value "t") nil nil)
                    ("candidate-transformer" variable (:default-value "(lambda (candidates) (cl-loop for timer in candidates collect (cons (helm-elisp--format-timer timer) timer)))") nil nil))                  
                :type "class")
                nil [32468 32788])
            ("helm-source-absolute-time-timers" variable (:default-value (helm-make-source "Absolute Time Timers" (quote helm-absolute-time-timers-class))) nil [32790 32908])
            ("helm-idle-time-timers-class" type
               (:interfaces ("helm-type-timers")
                :superclasses "helm-source-sync"
                :members 
                  ( ("candidates" variable (:default-value "timer-idle-list") nil nil)
                    ("allow-dups" variable (:default-value "t") nil nil)
                    ("candidate-transformer" variable (:default-value "(lambda (candidates) (cl-loop for timer in candidates collect (cons (helm-elisp--format-timer timer) timer)))") nil nil))                  
                :type "class")
                nil [32910 33231])
            ("helm-source-idle-time-timers" variable (:default-value (helm-make-source "Idle Time Timers" (quote helm-idle-time-timers-class))) nil [33233 33339])
            ("helm-elisp--format-timer" function (:arguments ("timer")) nil [33341 33884])
            ("helm-timers" function (:user-visible-flag t) nil [33901 34110])
            ("helm-btf--usable-p" function nil nil [34148 34361])
            ("if" code nil nil [34363 35778])
            ("helm-source-complex-command-history" variable (:default-value (helm-build-sync-source "Complex Command History" :candidates (lambda nil (cl-loop for i in command-history unless (equal i (quote (helm-complex-command-history))) collect (prin1-to-string i))) :action (helm-make-actions "Eval" (lambda (candidate) (and (boundp (quote helm-sexp--last-sexp)) (setq helm-sexp--last-sexp candidate)) (let ((command (read candidate))) (unless (equal command (car command-history)) (setq command-history (cons command command-history)))) (run-with-timer 0.1 nil (function helm-sexp-eval) candidate)) "Edit and eval" (lambda (candidate) (edit-and-eval-command "Eval: " (read candidate)))) :persistent-action (function helm-sexp-eval) :multiline t)) nil [35780 36859])
            ("helm-complex-command-history" function (:user-visible-flag t) nil [36876 37080])
            ("helm-elisp" package nil nil [37082 37103]))          
      :file "helm-elisp.el"
      :pointmax 37258
      :fsize 37257
      :lastmodtime '(22375 617 519310 596000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-help.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("helm" include nil nil [805 820])
            ("helm-org-headings--nofilename" variable nil nil [822 860])
            ("declare-function" code nil nil [861 928])
            ("helm-help" customgroup (:user-visible-flag t) nil [932 1001])
            ("helm-helper" variable
               (:default-value (quote ((t :inherit helm-header)))
                :type "face")
                nil [1003 1121])
            ("helm-documentation-file" variable (:default-value "~/.emacs.d/helm-doc.org") nil [1123 1276])
            ("helm-help--string-list" variable (:default-value (quote (helm-help-message helm-buffer-help-message helm-ff-help-message helm-read-file-name-help-message helm-generic-file-help-message helm-grep-help-message helm-pdfgrep-help-message helm-etags-help-message helm-ucs-help-message helm-bookmark-help-message helm-esh-help-message helm-buffers-ido-virtual-help-message helm-moccur-help-message helm-top-help-message helm-apt-help-message helm-el-package-help-message helm-M-x-help-message helm-imenu-help-message helm-colors-help-message helm-semantic-help-message helm-kmacro-help-message))) nil [1279 2504])
            ("helm-documentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [2523 3491])
            ("helm-buffer-help-message" variable (:default-value "* Helm Buffer

** Tips

*** Completion

**** Major-mode

You can enter a partial name of major-mode (e.g. lisp, sh) to narrow down buffers.
To specify the major-mode, prefix it with \"*\" e.g. \"*lisp\".
If you want to match all buffers but the ones with a specific major-mode (negation),
prefix the major-mode with \"!\" e.g. \"*!lisp\".
If you want to specify more than one major-mode, separate them with \",\",
e.g. \"*!lisp,!sh,!fun\" will list all buffers but the ones in lisp-mode, sh-mode and
fundamental-mode.

Enter then a space and a pattern to narrow down to buffers matching this pattern.

**** Search inside buffers

If you enter a space and a pattern prefixed by \"@\" helm will search for text matching
this pattern INSIDE the buffer (i.e not in the name of buffer).
NOTE that if you enter your pattern prefixed with \"@\" but escaped, helm will search a buffer
matching \"@pattern\" but will not search inside.

**** Search by directory name

If you prefix the beginning of pattern with \"/\" the match will occur on directory name
of buffer, it is interesting to narrow down to one directory for example, subsequent string
entered after a space will match on buffer-name only.
Note that negation is not supported for matching on buffer-file-name.
You can specify more than one directory starting from helm v1.6.8
 
**** Fuzzy matching

Note that if `helm-buffers-fuzzy-matching' is non--nil you will have
fuzzy matching on buffer names (not on directory name matching and major-mode though).
A pattern starting with \"^\" will disable fuzzy matching and will match by exact regexp.

**** Examples

if I enter in pattern prompt:

    \"*lisp ^helm @moc\"

helm will narrow down the list by selecting only buffers that are in lisp mode, start by helm
and match \"moc\" in their contents.

if I enter in pattern prompt:

    \"*lisp ^helm moc\"

Notice there is no \"@\" this time
helm will look for lisp mode buffers starting by \"helm\" and have \"moc\" in their name.

if I enter in pattern prompt:

    \"*!lisp !helm\"

helm will narrow down to buffers that are not in \"lisp\" mode and that do not match \"helm\"

if I enter in pattern prompt:

    /helm/ w3

helm will narrow down to buffers that are in any \"helm\" subdirectory and matching w3.

*** Creating buffers

When creating a new buffer use \\[universal-argument] to choose a mode for your buffer in a list.
This list is customizable, see `helm-buffers-favorite-modes'.

*** Killing buffers

You have a command to kill buffer(s) and quit emacs and a command to kill buffers one by one
(no marked) without quitting helm.

You can run this persistent kill buffer command either with the regular
`helm-execute-persistent-action' called with a prefix arg (C-u C-j) or with its specific command
`helm-buffer-run-kill-persistent' see binding below.

*** Meaning of colors and prefixes for buffers

Remote buffers are prefixed with '@'.
Red        => Buffer have its file modified on disk by an external process.
Indianred2 => Buffer exists but its file have been deleted.
Orange     => Buffer is modified and its file not saved to disk.
Italic     => A non--file buffer.

** Commands
\\<helm-buffer-map>
\\[helm-buffer-run-zgrep]		Grep Buffer(s) works as zgrep too (C-u grep all buffers but non--file buffers).
\\[helm-buffers-run-multi-occur]		Multi Occur buffer or marked buffers. (C-u toggle force searching current-buffer).
\\[helm-buffer-switch-other-window]		Switch other window.
\\[helm-buffer-switch-other-frame]		Switch other frame.
\\[helm-buffers-run-browse-project]		Browse Project from buffer.
\\[helm-buffer-run-query-replace-regexp]		Query replace regexp in marked buffers.
\\[helm-buffer-run-query-replace]		Query replace in marked buffers.
\\[helm-buffer-run-ediff]		Ediff current buffer with candidate.  If two marked buffers ediff those buffers.
\\[helm-buffer-run-ediff-merge]		Ediff merge current buffer with candidate.  If two marked buffers ediff merge those buffers.
\\[helm-buffer-diff-persistent]		Toggle Diff buffer with saved file without quitting.
\\[helm-buffer-revert-persistent]		Revert buffer without quitting.
\\[helm-buffer-save-persistent]		Save buffer without quitting.
\\[helm-buffer-run-kill-buffers]		Delete marked buffers and quit.
\\[helm-buffer-run-kill-persistent]		Delete buffer without quitting helm.
\\[helm-toggle-all-marks]		Toggle all marks.
\\[helm-mark-all]		Mark all.
\\[helm-toggle-buffers-details]		Toggle details.
\\[helm-buffers-toggle-show-hidden-buffers]		Show hidden buffers.
\\[helm-buffers-mark-similar-buffers]		Mark all buffers with same type (color) than current.") nil [3554 8235])
            ("helm-ff-help-message" variable (:default-value "* Helm Find Files

** Tips

*** Navigation summary

For a better experience you can enable auto completion by setting
`helm-ff-auto-update-initial-value' to non-nil in your init file.
It is not enabled by default to not confuse new users.

**** Use `C-j' (persistent action) on a directory to go down one level

On a symlinked directory a prefix arg will allow expanding to its true name.

**** Use `C-l' on a directory to go up one level

**** Use `C-r' to walk back the resulting tree of all the `C-l' you did

Note: The tree is reinitialized each time you enter a new tree with `C-j'
or by entering some pattern in prompt.

*** Find file at point

Helm is using `ffap' partially or completely to find file at point
depending on value of `helm-ff-guess-ffap-filenames'.
You can use full `ffap' by setting this to non-nil (annoying).
Default value is nil which make `ffap' working partially.

**** Find file at number line

With something like this at point:

    ~/elisp/helm/helm.el:1234

Helm will find this file at line number 1234.

**** Find url at point

When an url is found at point, helm expand to that url only.
Pressing RET jump to that url using `browse-url-browser-function'.

**** Find mail at point

When a mail address is found at point helm expand to this email address
prefixed by \"mailto:\". Pressing RET open a message buffer with this mail
address.

*** Quick pattern expansion

**** Enter `~/' at end of pattern to quickly reach home directory

**** Enter `/' at end of pattern to quickly reach root of your file system

**** Enter `./' at end of pattern to quickly reach `default-directory' (initial start of session)

If you are already in `default-directory' this will move cursor on top.

**** Enter `../' at end of pattern will reach upper directory, moving cursor on top

NOTE: This is different from using `C-l' in that `C-l' doesn't move cursor on top but stays on previous
subdir name.

**** Enter `..name/' at end of pattern start a recursive search of directories matching name under
your current directory, see below the \"Recursive completion on subdirectories\" section for more infos.

**** Enter any environment var (e.g. `$HOME') at end of pattern, it will be expanded

**** You can yank any valid filename after pattern, it will be expanded

**** Special case with url's at point

This have no effect at end of an url, you have first to kill pattern (`C-k')
before entering one of these quick expansions patterns.

*** Helm find files is fuzzy matching (start on third char entered)

e.g. \"fob\" or \"fbr\" will complete \"foobar\"
but \"fb\" will wait for a third char for completing.

*** Use `C-u C-j' to watch an image or `C-<down>'

*** `C-j' on a filename will expand in helm-buffer to this filename

Second hit on `C-j' will display buffer filename.
Third hit on `C-j' will kill buffer filename.
NOTE: `C-u C-j' will display buffer directly.

*** To browse images directories turn on `helm-follow-mode' and navigate with arrow keys

You can also use `helm-follow-action-forward' and `helm-follow-action-backward'
(`C-<down' and `C-<left>').

*** You can turn off/on (toggle) autoupdate completion at any moment with `C-DEL'

It is useful when auto completion is enabled and when trying to create a new file
or directory you want to prevent helm trying to complete what you are writing.
NOTE: On a terminal C-<backspace> may not work, use in this case C-c <backspace>.

*** You can create a new directory and a new file at the same time

Just write the path in prompt and press `<RET>'.
e.g. You can create \"~/new/newnew/newnewnew/my_newfile.txt\".

*** To create a new directory, add a \"/\" at end of new name and press <RET>

*** To create a new file just write the filename not ending with \"/\"

*** Recursive search from helm find files

**** You can use helm browse project (see binding below)

- With no prefix arg
  If your current directory is under version control
  with one of git or hg and you have installed helm-ls-git and/or helm-ls-hg
  https://github.com/emacs-helm/helm-ls-git.git
  https://github.com/emacs-helm/helm-ls-hg
  you will see all your files under version control, otherwise
  you will be back to helm-find-files.
- With one prefix arg
  You will see all the files under this directory
  and other subdirectories (recursion) and this list of files will be cached.
- With two prefix args
  same but the cache will be refreshed.

**** You can start a recursive search with Locate or Find (See commands below)

With Locate you can use a local db with a prefix arg. If the localdb doesn't already
exists, you will be prompted for its creation, if it exists and you want to refresh it,
give two prefix args.

Note that when using locate the helm-buffer is empty until you type something,
but helm use by default the basename of pattern entered in your helm-find-files session,
hitting M-n should just kick in the locate search with this pattern.
If you want to automatically do this add the `helm-source-locate'
to `helm-sources-using-default-as-input'.

**** Recursive completion on subdirectories

Starting from the current directory you are browsing, it is possible
to have completion of all directories under here.
So if you are at \"/home/you/foo/\" and you want to go to \"/home/you/foo/bar/baz/somewhere/else\"
just type \"/home/you/foo/..else\" and hit `C-j' or enter the final \"/\", helm will show you all
possibles directories under \"foo\" matching \"else\".
(Note that entering two spaces before \"else\" instead of two dots works also).

NOTE: Completion on subdirectories use locate as backend, you can configure
the command with `helm-locate-recursive-dirs-command'.
Because this completion use an index, you may not have all the recent additions
of directories until you update your index (with `updatedb' for locate).

*** Insert filename at point or complete filename at point

On insertion (no completion, i.e nothing at point):

- `C-c i'         => insert absolute file name.
- `C-u C-c i'     => insert abbreviate file name.
- `C-u C-u C-c i' => insert relative file name.

On completion:

- target starts by ~/           => insert abbreviate file name.
- target starts by / or [a-z]:/ => insert full path.
- otherwise                     => insert relative file name.

*** Using wildcard to select multiple files

Use of wilcard is supported to give a set of files to an action:

e.g. You can copy all the files with \".el\" extension by using \"*.el\"
and then run your copy action.

You can do the same but with \"**.el\" (note the two stars),
this will select recursively all \".el\" files under current directory.

Note that when copying recursively files, you may have files with same name
dispatched in the different subdirectories, so when copying them in the same directory
they would be overwrited. To avoid this helm have a special action called \"backup files\"
that have the same behavior as the command line \"cp --backup=numbered\", it allows you
copying for example many *.jpg files with the same name from different
subdirectories in one directory.
Files with same name are renamed like this: \"foo.txt.~1~\".
NOTE: This command is available only when `dired-async-mode' is used.

NOTE: When using an action that involve an external backend (e.g. grep), using \"**\"
is not advised (even if it works fine) because it will be slower to select all your files,
you have better time letting the backend doing it, it will be faster.
However, if you know you have not many files it is reasonable to use this,
also using not recursive wilcard (e.g. \"*.el\") is perfectly fine for this.

This feature (\"**\") is activated by default with the option `helm-file-globstar'.
It is different than the bash shopt globstar feature in that to list files with a named extension
recursively you just have to specify e.g \"**.el\" whereas in bash you have to specify \"**/*.el\"
which is not convenient as \"**.el\".
The directory selection with \"**/\" like bash shopt globstar option is not supported yet.

*** Query replace regexp on filenames

You can rename your files by replacing only part of filenames matching
a regexp.

e.g Rename recursively all files with \".JPG\" extension to \".jpg\":
Use the helm-file-globstar feature described in previous section by
entering at end of helm-find-files pattern \"**.JPG\", then hit `M-%`,
at first prompt enter \"JPG\", at second \"jpg\" and hit `RET`.

Shortcut for basename without extension, only extension or all are available:

- Basename without extension => \"%.\"
- Only extension             => \".%\"
- All                        => \"%\"

So in the example above you could do instead:
At first prompt enter \".%\", at second \"jpg\" and hit `RET`.
Note that when using this instead of using \"JPG\" at first prompt, all extensions
will be renamed to \"jpg\" even if the extension of one of the files is e.g \"png\".

If you want to rename a serie of files from number 001 to 00x use \\# inside the replacement
string when you will be prompted for it.

e.g To rename the files \"foo.jpg\" \"bar.jpg\" and \"baz.jpg\"
    to \"foo-001.jpg\" \"foo-002.jpg\" \"foo-003.jpg\"

Use as replace regexp \"%.\" and as replacement string \"foo-\\#\".
Where \"%.\" is same as regexp \".*\\.jpg\".

Note: You can do this with the serial renames actions you will find in the action menu
      for more sophisticated renaming, but using query replace regexp on filenames
      is a fast way for most common serial replacements.

Note also that unlike the serial rename actions the renamed files stay in their initial directory
and are not renamed to current directory, IOW use this (\\#) to rename files inside current directory.

In the second prompt (replace regexp with) shortcut for `upcase', `downcase' and `capitalize'
are available, respectively `%u', `%d' and `%c'.

*** Copying renaming asynchronously

If you use async library (if you have installed helm from MELPA you do) you can enable
async for copying/renaming etc... your files by enabling `dired-async-mode'.

Note that even when async is enabled, running a copy/rename action with a prefix arg
will execute action synchronously, it will follow also the first file of the marked files
in its destination directory.

*** Bookmark your `helm-find-files' session

You can bookmark your `helm-find-files' session with `C-x r m'.
You can retrieve later these bookmarks easily by using M-x helm-filtered-bookmarks
or from the current `helm-find-files' session just hitting `C-x r b'.

*** Run Gid from `helm-find-files'

You can navigate to a project containing an ID file created with the `mkid'
command from id-utils, and run the `gid' command which will use the symbol at point
in `helm-current-buffer' as default.

** Commands
\\<helm-find-files-map>
\\[helm-ff-run-locate]		Run Locate (C-u to specify locate db, M-n insert basename of candidate)
\\[helm-ff-run-browse-project]		Browse project (`C-u' recurse, `C-u C-u' recurse and refresh db)
\\[helm-ff-run-find-sh-command]		Run Find shell command from this directory.
\\[helm-ff-run-grep]		Run Grep (C-u Recursive).
\\[helm-ff-run-pdfgrep]		Run Pdfgrep on marked files.
\\[helm-ff-run-zgrep]		Run zgrep (C-u Recursive).
\\[helm-ff-run-grep-ag]		Run AG grep on current directory.
\\[helm-ff-run-git-grep]		Run git-grep on current directory.
\\[helm-ff-run-gid]		Run gid (id-utils).
\\[helm-ff-run-etags]		Run Etags (C-u use thing-at-point `C-u C-u' reload cache)
\\[helm-ff-run-rename-file]		Rename File (C-u Follow).
\\[helm-ff-run-query-replace-on-marked]		Query replace on marked files.
\\[helm-ff-run-copy-file]		Copy File (C-u Follow).
\\[helm-ff-run-byte-compile-file]		Byte Compile File (C-u Load).
\\[helm-ff-run-load-file]		Load File.
\\[helm-ff-run-symlink-file]		Symlink File.
\\[helm-ff-run-hardlink-file]		Hardlink file.
\\[helm-ff-run-delete-file]		Delete File.
\\[helm-ff-run-kill-buffer-persistent]		Kill buffer candidate without quitting.
\\[helm-ff-persistent-delete]		Delete file without quitting.
\\[helm-ff-run-switch-to-eshell]		Switch to Eshell.
\\[helm-ff-run-eshell-command-on-file]		Eshell command on file (C-u Apply on marked files, otherwise treat them sequentially).
\\[helm-ff-run-ediff-file]		Ediff file.
\\[helm-ff-run-ediff-merge-file]		Ediff merge file.
\\[helm-ff-run-complete-fn-at-point]		Complete file name at point.
\\[helm-ff-run-switch-other-window]		Switch other window.
\\[helm-ff-run-switch-other-frame]		Switch other frame.
\\[helm-ff-run-open-file-externally]		Open file with external program (C-u to choose).
\\[helm-ff-run-open-file-with-default-tool]		Open file externally with default tool.
\\[helm-ff-rotate-left-persistent]		Rotate Image Left.
\\[helm-ff-rotate-right-persistent]		Rotate Image Right.
\\[helm-find-files-up-one-level]		Go down precedent directory.
\\[helm-ff-run-switch-to-history]		Switch to last visited directories history.
\\[helm-ff-file-name-history]		Switch to file name history.
\\[helm-ff-properties-persistent]		Show file properties in a tooltip.
\\[helm-mark-all]		Mark all visibles candidates.
\\[helm-ff-run-toggle-auto-update]		Toggle auto expansion of directories.
\\[helm-unmark-all]		Unmark all candidates, visibles and invisibles.
\\[helm-ff-run-gnus-attach-files]		Gnus attach files to message buffer.
\\[helm-ff-run-print-file]		Print file, (C-u to refresh printers list).
\\[helm-enlarge-window]		Enlarge helm window.
\\[helm-narrow-window]		Narrow helm window.
\\[helm-ff-run-toggle-basename]		Toggle basename/fullpath.
\\[helm-ff-run-find-file-as-root]		Find file as root.
\\[helm-ff-run-find-alternate-file]		Find alternate file.
\\[helm-ff-run-insert-org-link]		Insert org link.") nil [8283 22046])
            ("helm-read-file-name-help-message" variable (:default-value "* Helm read file name

** Tips

If you are here, you are probably using a vanilla command like `find-file'
helmized by `helm-mode', this is cool, but it is even better for your file
navigation to use `helm-find-files' which is fully featured.

*** Navigation

**** Enter `~/' at end of pattern to quickly reach home directory

**** Enter `/' at end of pattern to quickly reach root of your file system

**** Enter `./' at end of pattern to quickly reach `default-directory' (initial start of session)

If you are in `default-directory' move cursor on top.

**** Enter `../' at end of pattern will reach upper directory, moving cursor on top

NOTE: This different to using `C-l' in that `C-l' don't move cursor on top but stay on previous
subdir name.

**** You can complete with partial basename (start on third char entered)

E.g. \"fob\" or \"fbr\" will complete \"foobar\"
but \"fb\" will wait for a third char for completing.

*** Persistent actions

By default `helm-read-file-name' use the persistent actions of `helm-find-files'

**** Use `C-u C-j' to watch an image

**** `C-j' on a filename will expand in helm-buffer to this filename

Second hit on `C-j' will display buffer filename.
Third hit on `C-j' will kill buffer filename.
NOTE: `C-u C-j' will display buffer directly.

**** To browse images directories turn on `helm-follow-mode' and navigate with arrow keys

*** Delete characters backward

When you want to delete backward characters, e.g. to create a new file or directory,
autoupdate may keep updating to an existent directory preventing you from doing so.
In this case, type C-<backspace> and then <backspace>.
This should not be needed when copying/renaming files because autoupdate is disabled
by default in that case.
NOTE: On a terminal C-<backspace> may not work, use in this case C-c <backspace>.

*** Create new directory and files

**** Create a new directory and a new file at the same time

You can create a new directory and a new file at the same time, 
just write the path in prompt and press <RET>.
E.g. You can create \"~/new/newnew/newnewnew/my_newfile.txt\".

**** To create a new directory, add a \"/\" at end of new name and press <RET>

**** To create a new file just write the filename not ending with \"/\"

_NOTE_: File and directory creation work only in some commands (e.g `find-file')
and will not work in other commands where it is not intended to return a file or a directory
(e.g `list-directory').

** Commands
\\<helm-read-file-map>
\\[helm-find-files-up-one-level]		Go down precedent directory.
\\[helm-ff-run-toggle-auto-update]		Toggle auto expansion of directories.
\\[helm-ff-run-toggle-basename]		Toggle basename.
\\[helm-ff-file-name-history]		File name history.
C/\\[helm-cr-empty-string]		Maybe return empty string (unless `must-match').
\\[helm-next-source]		Goto next source.
\\[helm-previous-source]		Goto previous source.") nil [22089 25039])
            ("helm-generic-file-help-message" variable (:default-value "* Helm Generic files

** Tips

*** Locate

You can add after writing search pattern any of the locate command line options.
e.g. -b, -e, -n <number>...etc.
See Man locate for more infos.

Some other sources (at the moment recentf and file in current directory sources)
support the -b flag for compatibility with locate when they are used with it.

*** Browse project

When your directory is not under version control,
don't forget to refresh your cache when files have been added/removed in your directory.

*** Find command

Recursively search files using \"find\" shell command.

Candidates are all filenames that match all given globbing patterns.
This respects the options `helm-case-fold-search' and
`helm-findutils-search-full-path'.

You can pass arbitrary options directly to find after a \"*\" separator.
For example, this would find all files matching \"book\" that are larger
than 1 megabyte:

    book * -size +1M

** Commands
\\<helm-generic-files-map>
\\[helm-ff-run-toggle-basename]		Toggle basename.
\\[helm-ff-run-grep]		Run grep (C-u recurse).
\\[helm-ff-run-zgrep]		Run zgrep.
\\[helm-ff-run-gid]		Run gid (id-utils).
\\[helm-ff-run-pdfgrep]		Run Pdfgrep on marked files.
\\[helm-ff-run-copy-file]		Copy file(s)
\\[helm-ff-run-rename-file]		Rename file(s).
\\[helm-ff-run-symlink-file]		Symlink file(s).
\\[helm-ff-run-hardlink-file]		Hardlink file(s).
\\[helm-ff-run-delete-file]		Delete file(s).
\\[helm-ff-run-byte-compile-file]		Byte compile file(s) (C-u load) (elisp).
\\[helm-ff-run-load-file]		Load file(s) (elisp).
\\[helm-ff-run-ediff-file]		Ediff file.
\\[helm-ff-run-ediff-merge-file]		Ediff merge file.
\\[helm-ff-run-switch-other-window]		Switch other window.
\\[helm-ff-properties-persistent]		Show file properties.
\\[helm-ff-run-etags]		Run etags (C-u use tap, C-u C-u reload DB).
\\[helm-yank-text-at-point]		Yank text at point.
\\[helm-ff-run-open-file-externally]		Open file with external program (C-u to choose).
\\[helm-ff-run-open-file-with-default-tool]		Open file externally with default tool.
\\[helm-ff-run-insert-org-link]		Insert org link.") nil [25087 27259])
            ("helm-grep-help-message" variable (:default-value "* Helm Grep

** Tips

*** You can start grep with a prefix arg to recurse in subdirectories
However now that helm support git-grep and AG, you have better time
using one of those for your recursives search.

*** You can use wild card when selecting files (e.g. *.el)

*** You can grep in many differents directories by marking files or wild cards

*** You can save your results in a `helm-grep-mode' buffer, see commands below

Once in this buffer you can use emacs-wgrep (external package not bundled with helm)
to edit your changes.

*** Helm grep is supporting multi matching starting from version 1.9.4.
Just add a space between each pattern like in most helm commands.

*** Important

Grepping on remote file will work only with grep, not ack-grep, but it is
anyway bad supported as tramp doesn't support multiple process running in a
short delay (less than 5s actually) among other things,
so I strongly advice hitting `C-!' (i.e suspend process)
before entering anything in pattern, and hit again `C-!' when
your regexp is ready to send to remote process, even if helm is handling
this by delaying each process at 5s. 
Or even better don't use tramp at all and mount your remote file system on SSHFS.

* Helm Gid

** Tips

Helm gid read the database created with the `mkid' command from id-utils.
The name of the database file can be customized with `helm-gid-db-file-name', it
is usually \"ID\".
Helm Gid use the symbol at point as default-input.
You have access to this command also from `helm-find-files' which allow you to
navigate to another directory to consult its database.

NOTE: Helm gid support multi matches but only the last pattern entered will be
highlighted due to the lack of ~--color~ support in GID itself.

* Helm AG

** Tips

Helm AG is different from grep or ack-grep in that it works on a directory and not
a list of files.
You can ignore files and directories by using a \".agignore\" file, local to directory
or global when placed in home directory (See AG man page for more infos).
This file supports same entries as what you will find in `helm-grep-ignored-files' and
`helm-grep-ignored-directories'.
As always you can access helm AG from `helm-find-files'.

Starting at version 0.30 AG allow providing one or more TYPE argument on its command line.
Helm provide completion on these TYPES arguments when available with your AG version,
Use a prefix argument when starting helm ag session to get this completion.
NOTE: You can mark several types to match in your ag query, however on the first versions of
AG providing this, only one type was allowed, so in this case the last marked will take effect.

* Helm git-grep

Helm git-grep is searching from current directory
(i.e default-directory or the directory currently browsed by helm-find-files).
If this current directory is a subdirectory of project and you want to match
also upper directories (i.e the whole project) use a prefix arg.

** Commands
\\<helm-grep-map>
\\[helm-goto-next-file]		Next File.
\\[helm-goto-precedent-file]		Precedent File.
\\[helm-yank-text-at-point]		Yank Text at point in minibuffer.
\\[helm-grep-run-other-window-action]		Jump other window.
\\[helm-grep-run-other-frame-action]		Jump other frame.
\\[helm-grep-run-default-action]		Run default action (Same as RET).
\\[helm-grep-run-save-buffer]		Save to a `helm-grep-mode' enabled buffer.") nil [27281 30686])
            ("helm-pdfgrep-help-message" variable (:default-value "* Helm PdfGrep Map

** Commands
\\<helm-pdfgrep-map>
\\[helm-goto-next-file]		Next File.
\\[helm-goto-precedent-file]		Precedent File.
\\[helm-yank-text-at-point]		Yank Text at point in minibuffer.") nil [30712 30954])
            ("helm-etags-help-message" variable (:default-value "* Helm Etags Map

** Commands
\\<helm-etags-map>
\\[helm-goto-next-file]		Next File.
\\[helm-goto-precedent-file]		Precedent File.
\\[helm-yank-text-at-point]		Yank Text at point in minibuffer.") nil [30977 31213])
            ("helm-ucs-help-message" variable (:default-value "* Helm Ucs

** Tips

Use commands below to insert unicode characters
in current-buffer without quitting helm.

** Commands
\\<helm-ucs-map>
\\[helm-ucs-persistent-insert]		Insert char.
\\[helm-ucs-persistent-forward]		Forward char.
\\[helm-ucs-persistent-backward]		Backward char.
\\[helm-ucs-persistent-delete]		Delete char backward.") nil [31234 31611])
            ("helm-bookmark-help-message" variable (:default-value "* Helm bookmark name

** Commands
\\<helm-bookmark-map>
\\[helm-bookmark-run-jump-other-window]		Jump other window.
\\[helm-bookmark-run-delete]		Delete bookmark.
\\[helm-bookmark-run-edit]		Edit bookmark.
\\[helm-bookmark-toggle-filename]		Toggle bookmark location visibility.") nil [31637 31962])
            ("helm-esh-help-message" variable (:default-value "* Helm eshell on file

** Tips

*** Passing extra args after filename

Normally your command or alias will be called with file as argument. E.g.,

    <command> 'candidate_file'

But you can also pass an argument or more after 'candidate_file' like this:

    <command> %s [extra_args]

'candidate_file' will be added at '%s' and your command will look at this:

    <command> 'candidate_file' [extra_args]

*** Specify many files as args (marked files)

E.g. <command> file1 file2 ...

Call `helm-find-files-eshell-command-on-file' with one prefix-arg
Otherwise you can pass one prefix-arg from the command selection buffer.
NOTE: This is not working on remote files.

With two prefix-arg before starting or from the command selection buffer
the output is printed to your `current-buffer'.

Note that with no prefix-arg or a prefix-arg value of '(16) (C-u C-u)
the command is called once for each file like this:

    <command> file1 <command> file2 etc...

** Commands
\\<helm-esh-on-file-map>") nil [32002 33032])
            ("helm-buffers-ido-virtual-help-message" variable (:default-value "* Helm ido virtual buffers

** Commands
\\<helm-buffers-ido-virtual-map>
\\[helm-ff-run-switch-other-window]		Switch other window.
\\[helm-ff-run-switch-other-frame]		Switch other frame.
\\[helm-ff-run-grep]		Grep file.
\\[helm-ff-run-zgrep]		Zgrep file.
\\[helm-ff-run-delete-file]		Delete file.
\\[helm-ff-run-open-file-externally]		Open file externally.") nil [33068 33487])
            ("helm-moccur-help-message" variable (:default-value "* Helm Moccur

** Tips

*** Matching

Multiple regexp matching is allowed, just enter a space to separate your regexps.

Matching empty lines is supported with the regexp \"^$\", you will get the results
with only the buffer-name and the line number, you can of course save and edit these
results (i.e add text to the empty line) .

*** Automatically matching symbol at point

You can match automatically the symbol at point, but keeping
the minibuffer empty ready to write into.
This is disabled by default, to enable this you have to add `helm-source-occur'
and `helm-source-moccur' to `helm-sources-using-default-as-input'.

*** Jump to the corresponding line in the searched buffer

You can do this with `C-j' (persistent-action), to do it repetitively
you can use `C-<up>' and `C-<down>' or enable `helm-follow-mode' with `C-c C-f'.

*** Saving results

Same as with helm-grep, you can save the results with `C-x C-s'.
Of course if you don't save your results, you can get back your session
with `helm-resume'.

*** Refreshing the resumed session.

When the buffer(s) where you ran helm-(m)occur have been modified, you will be
warned of this with the buffer flashing to red, you can refresh the buffer by running
`C-c C-u'.
This can be done automatically by customizing `helm-moccur-auto-update-on-resume'.

*** Refreshing a saved buffer

Type `g' to update your buffer.

*** Edit a saved buffer

First, install wgrep https://github.com/mhayashi1120/Emacs-wgrep
and then:

1) C-c C-p to edit the buffer(s).
2) C-x C-s to save your changes.

Tip: Use the excellent iedit https://github.com/tsdh/iedit
to modify occurences in your buffer.

** Commands
\\<helm-moccur-map>
\\[helm-goto-next-file]		Next Buffer.
\\[helm-goto-precedent-file]		Precedent Buffer.
\\[helm-yank-text-at-point]		Yank Text at point in minibuffer.
\\[helm-moccur-run-goto-line-ow]		Goto line in other window.
\\[helm-moccur-run-goto-line-of]		Goto line in new frame.") nil [33511 35502])
            ("helm-top-help-message" variable (:default-value "* Helm Top

** Tips

** Commands
\\<helm-top-map>
\\[helm-top-run-sort-by-com]		Sort by commands.
\\[helm-top-run-sort-by-cpu]		Sort by cpu usage.
\\[helm-top-run-sort-by-user]		Sort alphabetically by user.
\\[helm-top-run-sort-by-mem]		Sort by memory.") nil [35523 35818])
            ("helm-apt-help-message" variable (:default-value "* Helm Apt

** Tips

** Commands
\\<helm-apt-map>
\\[helm-apt-show-all]		Show all packages.
\\[helm-apt-show-only-installed]		Show installed packages only.
\\[helm-apt-show-only-not-installed]		Show not installed packages only.
\\[helm-apt-show-only-deinstalled]		Show deinstalled (not purged yet) packages only.>") nil [35839 36195])
            ("helm-el-package-help-message" variable (:default-value "* Helm elisp package

** Tips

*** Compile all your packages asynchronously

When using async (if you have installed from MELPA you do), only helm, helm-core,
and magit are compiled asynchronously, if you want all your packages compiled async,
add to your init file:
    
     (setq async-bytecomp-allowed-packages '(all))
    
*** Upgrade elisp packages

On initial start (when emacs is fetching packages on remote), if helm find
package to upgrade it will start in the upgradables packages view showing the packages
availables to upgrade.
On further starts, you will have to refresh the list with `C-c C-u', if helm find upgrades
you will have a message telling you some packages are available for upgrade, you can switch to
upgrade view (see below) to see what packages are available for upgrade or just hit `C-c U'.
to upgrade all.

To see upgradables packages hit <M-U>.

Then you can install all upgradables packages with the upgrade all action (`C-c C-u'),
or upgrade only the specific packages by marking them (the new ones) and running
the upgrade action (visible only when there is upgradables packages).
Of course you can upgrade a single package by just running the upgrade action
without marking it (`C-c u' or RET) .

*WARNING* You are strongly advised to RESTART emacs after UPGRADING packages.

*** Meaning of flags prefixing packages (Emacs-25)

- The flag \"S\" that prefix package names mean that this package is one of `package-selected-packages'.
This feature is only available with emacs-25.

- The flag \"U\" that prefix package names mean that this package is no more needed.
This feature is only available with emacs-25.

** Commands
\\<helm-el-package-map>
\\[helm-el-package-show-all]		Show all packages.
\\[helm-el-package-show-installed]		Show installed packages only.
\\[helm-el-package-show-uninstalled]		Show not installed packages only.
\\[helm-el-package-show-upgrade]		Show upgradable packages only.
\\[helm-el-run-package-install]		Install package(s).
\\[helm-el-run-package-reinstall]		Reinstall package(s).
\\[helm-el-run-package-uninstall]		Uninstall package(s).
\\[helm-el-run-package-upgrade]		Upgrade package(s).
\\[helm-el-run-package-upgrade-all]		Upgrade all packages upgradables.
\\[helm-el-run-visit-homepage]		Visit package homepage.") nil [36226 38570])
            ("helm-M-x-help-message" variable (:default-value "* Helm M-x

** Tips

*** You can get help on any command with persistent action (C-j)

*** Prefix Args

All the prefix args passed BEFORE running `helm-M-x' are ignored,
you should get an error message if you do so.
When you want to pass prefix args, pass them AFTER starting `helm-M-x',
you will see a prefix arg counter appearing in mode-line notifying you
the number of prefix args entered.") nil [38591 39019])
            ("helm-imenu-help-message" variable (:default-value "* Helm imenu

** Tips

** Commands
\\<helm-imenu-map>
\\[helm-imenu-next-section]		Go to next section.
\\[helm-imenu-previous-section]		Go to previous section.") nil [39042 39242])
            ("helm-colors-help-message" variable (:default-value "* Helm colors

** Commands
\\<helm-color-map>
\\[helm-color-run-insert-name]		Insert the entry'name.
\\[helm-color-run-kill-name]		Kill the entry's name.
\\[helm-color-run-insert-rgb]		Insert entry in RGB format.
\\[helm-color-run-kill-rgb]		Kill entry in RGB format.") nil [39266 39579])
            ("helm-semantic-help-message" variable (:default-value "* Helm semantic

** Tips

** Commands
\\<helm-semantic-map>") nil [39605 39704])
            ("helm-kmacro-help-message" variable (:default-value "* Helm kmacro

** Tips

- Start recording some keys with `f3'
- Record new kmacro with `f4'
- Start `helm-execute-kmacro' to list all your macros.

Use persistent action to run your kmacro as many time as needed,
you can change of kmacro with `helm-next-line' `helm-previous-line'.

NOTE: You can't record keys running helm commands except `helm-M-x' unless
you don't choose from there a command using helm completion.

** Commands
\\<helm-kmacro-map>") nil [39728 40217])
            ("helm-comp-read-mode-line" variable (:default-value "\\<helm-comp-read-map>C/\\[helm-cr-empty-string]:Empty \\<helm-map>\\[helm-help]:Help \\[helm-select-action]:Act \\[helm-maybe-exit-minibuffer]/f1/f2/f-n:NthAct \\[helm-toggle-suspend-update]:Tog.suspend") nil [40264 40519])
            ("helm-read-file-name-mode-line-string" variable (:default-value "\\<helm-read-file-map>\\[helm-help]:Help C/\\[helm-cr-empty-string]:Empty \\<helm-map>\\[helm-select-action]:Act \\[helm-maybe-exit-minibuffer]/f1/f2/f-n:NthAct \\[helm-toggle-suspend-update]:Tog.suspend") nil [40536 40866])
            ("helm-top-mode-line" variable (:default-value "\\<helm-top-map>\\[helm-help]:Help \\<helm-map>\\[helm-select-action]:Act \\[helm-maybe-exit-minibuffer]/f1/f2/f-n:NthAct \\[helm-toggle-suspend-update]:Tog.suspend") nil [40883 41091])
            ("helm-describe-helm-attribute" function
               (:user-visible-flag t
                :arguments ("helm-attribute"))
                nil [41144 41586])
            ("helm-document-attribute" code nil nil [41588 41759])
            ("helm-document-attribute" code nil nil [41761 41995])
            ("helm-document-attribute" code nil nil [41997 43640])
            ("helm-document-attribute" code nil nil [43642 43863])
            ("helm-document-attribute" code nil nil [43865 44370])
            ("helm-document-attribute" code nil nil [44372 44761])
            ("helm-document-attribute" code nil nil [44763 45026])
            ("helm-document-attribute" code nil nil [45028 45485])
            ("helm-document-attribute" code nil nil [45487 46617])
            ("helm-document-attribute" code nil nil [46619 47280])
            ("helm-document-attribute" code nil nil [47282 48489])
            ("helm-document-attribute" code nil nil [48491 48980])
            ("helm-document-attribute" code nil nil [48982 49283])
            ("helm-document-attribute" code nil nil [49285 49556])
            ("helm-document-attribute" code nil nil [49558 49848])
            ("helm-document-attribute" code nil nil [49850 50204])
            ("helm-document-attribute" code nil nil [50206 50820])
            ("helm-document-attribute" code nil nil [50822 51189])
            ("helm-document-attribute" code nil nil [51191 51542])
            ("helm-document-attribute" code nil nil [51544 52132])
            ("helm-document-attribute" code nil nil [52134 52890])
            ("helm-document-attribute" code nil nil [52892 53127])
            ("helm-document-attribute" code nil nil [53129 53256])
            ("helm-document-attribute" code nil nil [53258 53357])
            ("helm-document-attribute" code nil nil [53359 53557])
            ("helm-document-attribute" code nil nil [53559 53654])
            ("helm-document-attribute" code nil nil [53656 53851])
            ("helm-document-attribute" code nil nil [53853 54019])
            ("helm-document-attribute" code nil nil [54021 54154])
            ("helm-document-attribute" code nil nil [54156 54477])
            ("helm-document-attribute" code nil nil [54479 54839])
            ("helm-document-attribute" code nil nil [54841 54985])
            ("helm-document-attribute" code nil nil [54987 55915])
            ("helm-document-attribute" code nil nil [55917 56405])
            ("helm-document-attribute" code nil nil [56407 56502])
            ("helm-document-attribute" code nil nil [56504 56599])
            ("helm-document-attribute" code nil nil [56601 56791])
            ("helm-document-attribute" code nil nil [56793 57045])
            ("helm-document-attribute" code nil nil [57047 57310])
            ("helm-document-attribute" code nil nil [57312 57411])
            ("helm-document-attribute" code nil nil [57413 58064])
            ("helm-document-attribute" code nil nil [58066 58179])
            ("helm-help" package nil nil [58181 58201]))          
      :file "helm-help.el"
      :pointmax 58355
      :fsize 58354
      :lastmodtime '(22375 616 307310 582000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-types.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [919 936])
            ("eieio" include nil nil [937 953])
            ("helm-type-file" type
               (:superclasses "helm-source"
                :type "class")
                nil [967 1047])
            ("helm-source-get-action-from-type" function
               (:parent "helm-type-file"
                :arguments ("object"))
                nil [1049 1149])
            ("helm-actions-from-type-file" function nil nil [1151 1318])
            ("helm-type-file-actions" variable (:default-value (helm-make-actions "Find file" (quote helm-find-many-files) "Find file as root" (quote helm-find-file-as-root) "Find file other window" (quote helm-find-files-other-window) "Find file other frame" (quote find-file-other-frame) "Open dired in file's directory" (quote helm-open-dired) "Grep File(s) `C-u recurse'" (quote helm-find-files-grep) "Zgrep File(s) `C-u Recurse'" (quote helm-ff-zgrep) "Pdfgrep File(s)" (quote helm-ff-pdfgrep) "Insert as org link" (quote helm-files-insert-as-org-link) "Checksum File" (quote helm-ff-checksum) "Ediff File" (quote helm-find-files-ediff-files) "Ediff Merge File" (quote helm-find-files-ediff-merge-files) "Etags `M-., C-u reload tag file'" (quote helm-ff-etags-select) "View file" (quote view-file) "Insert file" (quote insert-file) "Add marked files to file-cache" (quote helm-ff-cache-add-file) "Delete file(s)" (quote helm-delete-marked-files) "Copy file(s) `M-C, C-u to follow'" (quote helm-find-files-copy) "Rename file(s) `M-R, C-u to follow'" (quote helm-find-files-rename) "Symlink files(s) `M-S, C-u to follow'" (quote helm-find-files-symlink) "Relsymlink file(s) `C-u to follow'" (quote helm-find-files-relsymlink) "Hardlink file(s) `M-H, C-u to follow'" (quote helm-find-files-hardlink) "Open file externally (C-u to choose)" (quote helm-open-file-externally) "Open file with default tool" (quote helm-open-file-with-default-tool) "Find file in hex dump" (quote hexl-find-file))) nil [1320 3169])
            ("helm--setup-source" function
               (:parent "helm-type-file"
                :arguments ("_source"))
                nil [3171 3237])
            ("helm--setup-source" function
               (:parent "helm-type-file"
                :arguments ("source"))
                nil [3239 3963])
            ("helm-type-bookmark" type
               (:superclasses "helm-source"
                :type "class")
                nil [3980 4064])
            ("helm-type-bookmark-actions" variable (:default-value (helm-make-actions "Jump to bookmark" (quote helm-bookmark-jump) "Jump to BM other window" (quote helm-bookmark-jump-other-window) "Bookmark edit annotation" (quote bookmark-edit-annotation) "Bookmark show annotation" (quote bookmark-show-annotation) "Delete bookmark(s)" (quote helm-delete-marked-bookmarks) "Edit Bookmark" (quote helm-bookmark-edit-bookmark) "Rename bookmark" (quote helm-bookmark-rename) "Relocate bookmark" (quote bookmark-relocate))) nil [4066 4667])
            ("helm-source-get-action-from-type" function
               (:parent "helm-type-bookmark"
                :arguments ("object"))
                nil [4669 4773])
            ("helm--setup-source" function
               (:parent "helm-type-bookmark"
                :arguments ("_source"))
                nil [4775 4845])
            ("helm--setup-source" function
               (:parent "helm-type-bookmark"
                :arguments ("source"))
                nil [4847 5228])
            ("helm-type-buffer" type
               (:superclasses "helm-source"
                :type "class")
                nil [5243 5322])
            ("helm-type-buffer-actions" variable (:default-value (helm-make-actions "Switch to buffer(s)" (quote helm-switch-to-buffers) (lambda nil (and (locate-library "popwin") "Switch to buffer in popup window")) (quote popwin:popup-buffer) "Switch to buffer(s) other window `C-c o'" (quote helm-switch-to-buffers-other-window) "Switch to buffer other frame `C-c C-o'" (quote switch-to-buffer-other-frame) (lambda nil (and (locate-library "elscreen") "Display buffer in Elscreen")) (quote helm-find-buffer-on-elscreen) "Browse project from buffer" (quote helm-buffers-browse-project) "Query replace regexp `C-M-%'" (quote helm-buffer-query-replace-regexp) "Query replace `M-%'" (quote helm-buffer-query-replace) "View buffer" (quote view-buffer) "Display buffer" (quote display-buffer) "Grep buffers `M-g s' (C-u grep all buffers)" (quote helm-zgrep-buffers) "Multi occur buffer(s) `C-s'" (quote helm-multi-occur-as-action) "Revert buffer(s) `M-U'" (quote helm-revert-marked-buffers) "Insert buffer" (quote insert-buffer) "Kill buffer(s) `M-D'" (quote helm-kill-marked-buffers) "Diff with file `C-='" (quote diff-buffer-with-file) "Ediff Marked buffers `C-c ='" (quote helm-ediff-marked-buffers) "Ediff Merge marked buffers `M-='" (lambda (candidate) (helm-ediff-marked-buffers candidate t)))) nil [5324 6710])
            ("helm-source-get-action-from-type" function
               (:parent "helm-type-buffer"
                :arguments ("object"))
                nil [6712 6814])
            ("helm--setup-source" function
               (:parent "helm-type-buffer"
                :arguments ("_source"))
                nil [6816 6884])
            ("helm--setup-source" function
               (:parent "helm-type-buffer"
                :arguments ("source"))
                nil [6886 7331])
            ("helm-type-function" type
               (:superclasses "helm-source"
                :type "class")
                nil [7347 7435])
            ("helm-type-function-actions" variable (:default-value (helm-make-actions "Describe command" (quote describe-function) "Add command to kill ring" (quote helm-kill-new) "Go to command's definition" (quote find-function) "Debug on entry" (quote debug-on-entry) "Cancel debug on entry" (quote cancel-debug-on-entry) "Trace function" (quote trace-function) "Trace function (background)" (quote trace-function-background) "Untrace function" (quote untrace-function))) nil [7437 7970])
            ("helm-source-get-action-from-type" function
               (:parent "helm-type-function"
                :arguments ("object"))
                nil [7972 8076])
            ("helm-actions-from-type-function" function nil nil [8078 8253])
            ("helm--setup-source" function
               (:parent "helm-type-function"
                :arguments ("_source"))
                nil [8255 8325])
            ("helm--setup-source" function
               (:parent "helm-type-function"
                :arguments ("source"))
                nil [8327 8707])
            ("helm-type-command" type
               (:superclasses "helm-source"
                :type "class")
                nil [8723 8809])
            ("helm-actions-from-type-command" function nil nil [8811 8984])
            ("helm-type-command-actions" variable (:default-value (append (helm-make-actions "Call interactively" (quote helm-call-interactively)) (helm-actions-from-type-function))) nil [8986 9271])
            ("helm--setup-source" function
               (:parent "helm-type-command"
                :arguments ("_source"))
                nil [9273 9342])
            ("helm--setup-source" function
               (:parent "helm-type-command"
                :arguments ("source"))
                nil [9344 9595])
            ("helm-type-timers" type
               (:superclasses "helm-source"
                :type "class")
                nil [9607 9691])
            ("helm-type-timers-actions" variable (:default-value (quote (("Cancel Timer" lambda (_timer) (let ((mkd (helm-marked-candidates))) (cl-loop for timer in mkd do (cancel-timer timer)))) ("Describe Function" lambda (tm) (describe-function (timer--function tm))) ("Find Function" lambda (tm) (helm-aif (timer--function tm) (if (byte-code-function-p it) (message "Can't find anonymous function `%s'" it) (find-function it))))))) nil [9693 10461])
            ("helm--setup-source" function
               (:parent "helm-type-timers"
                :arguments ("_source"))
                nil [10463 10531])
            ("helm--setup-source" function
               (:parent "helm-type-timers"
                :arguments ("source"))
                nil [10533 10849])
            ("helm-build-type-file" function nil nil [10865 10931])
            ("helm-build-type-function" function nil nil [10933 11007])
            ("helm-build-type-command" function nil nil [11009 11081])
            ("helm-types" package nil nil [11083 11104]))          
      :file "helm-types.el"
      :pointmax 11259
      :fsize 11258
      :lastmodtime '(22375 617 675310 598000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-utils.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [813 830])
            ("helm" include nil nil [831 846])
            ("helm-help" include nil nil [847 867])
            ("compile" include nil nil [868 886])
            ("dired" include nil nil [912 928])
            ("declare-function" code nil nil [930 1010])
            ("declare-function" code nil nil [1011 1051])
            ("winner-boring-buffers" variable nil nil [1052 1082])
            ("helm-utils" customgroup (:user-visible-flag t) nil [1086 1159])
            ("helm-su-or-sudo" variable (:default-value "sudo") nil [1161 1273])
            ("helm-default-kbsize" variable (:default-value 1024.0) nil [1275 1466])
            ("define-obsolete-variable-alias" code nil nil [1468 1606])
            ("helm-highlight-matches-around-point-max-lines" variable (:default-value 15) nil [1608 1776])
            ("helm-buffers-to-resize-on-pa" variable nil nil [1778 1967])
            ("helm-resize-on-pa-text-height" variable (:default-value 12) nil [1969 2119])
            ("helm-sources-using-help-echo-popup" variable (:default-value (quote ("Moccur" "Imenu in all buffers" "Ack-Grep" "AG" "Gid" "Git-Grep"))) nil [2121 2404])
            ("helm-html-decode-entities-function" variable (:default-value (function helm-html-decode-entities-string)) nil [2406 2859])
            ("helm-goto-line-before-hook" variable (:default-value (quote (helm-save-current-pos-to-mark-ring))) nil [2863 3450])
            ("helm-save-pos-before-jump-register" variable (:default-value 95) nil [3452 3576])
            ("helm-html-entities-alist" variable
               (:constant-flag t
                :default-value (quote (("&quot;" . 34) ("&gt;" . 62) ("&lt;" . 60) ("&amp;" . 38) ("&euro;" . 8364) ("&Yuml;" . 89) ("&iexcl;" . 161) ("&cent;" . 162) ("&pound;" . 163) ("&curren;" . 164) ("&yen" . 165) ("&brvbar;" . 166) ("&sect;" . 167) ("&uml;" . 32) ("&copy;" . 169) ("&ordf;" . 97) ("&laquo;" . 171) ("&not;" . 172) ("&masr;" . 174) ("&deg;" . 176) ("&plusmn;" . 177) ("&sup2;" . 50) ("&sup3;" . 51) ("&acute;" . 39) ("&micro;" . 956) ("&para;" . 182) ("&middot;" . 183) ("&cedil;" . 32) ("&sup1;" . 49) ("&ordm;" . 111) ("&raquo;" . 187) ("&frac14;" . 49) ("&frac12;" . 49) ("&frac34;" . 51) ("&iquest;" . 191) ("&Agrave;" . 192) ("&Aacute;" . 193) ("&Acirc;" . 194) ("&Atilde;" . 195) ("&Auml;" . 196) ("&Aring;" . 197) ("&Aelig" . 198) ("&Ccedil;" . 199) ("&Egrave;" . 200) ("&Eacute;" . 201) ("&Ecirc;" . 202) ("&Euml;" . 203) ("&Igrave;" . 204) ("&Iacute;" . 205) ("&Icirc;" . 206) ("&Iuml;" . 207) ("&eth;" . 208) ("&Ntilde;" . 209) ("&Ograve;" . 210) ("&Oacute;" . 211) ("&Ocirc;" . 212) ("&Otilde;" . 213) ("&Ouml;" . 214) ("&times;" . 215) ("&Oslash;" . 216) ("&Ugrave;" . 217) ("&Uacute;" . 218) ("&Ucirc;" . 219) ("&Uuml;" . 220) ("&Yacute;" . 221) ("&thorn;" . 222) ("&szlig;" . 223) ("&agrave;" . 224) ("&aacute;" . 225) ("&acirc;" . 226) ("&atilde;" . 227) ("&auml;" . 228) ("&aring;" . 229) ("&aelig;" . 230) ("&ccedil;" . 231) ("&egrave;" . 232) ("&eacute;" . 233) ("&ecirc;" . 234) ("&euml;" . 235) ("&igrave;" . 236) ("&iacute;" . 237) ("&icirc;" . 238) ("&iuml;" . 239) ("&eth;" . 240) ("&ntilde;" . 241) ("&ograve;" . 242) ("&oacute;" . 243) ("&ocirc;" . 244) ("&otilde;" . 245) ("&ouml;" . 246) ("&divide;" . 247) ("&oslash;" . 248) ("&ugrave;" . 249) ("&uacute;" . 250) ("&ucirc;" . 251) ("&uuml;" . 252) ("&yacute;" . 253) ("&thorn;" . 254) ("&yuml;" . 255) ("&reg;" . 174) ("&shy;" . 173))))
                nil [3578 6598])
            ("helm-selection-line" variable
               (:default-value (quote ((t (:inherit highlight :distant-foreground "black"))))
                :type "face")
                nil [6615 6795])
            ("helm-match-item" variable
               (:default-value (quote ((t (:inherit isearch))))
                :type "face")
                nil [6797 6933])
            ("cua-delete-region" function (:arguments ("around" "helm-avoid-cua" "activate")) nil [6955 7044])
            ("copy-region-as-kill" function (:arguments ("around" "helm-avoid-cua" "activate")) nil [7046 7170])
            ("helm-switch-to-buffers" function (:arguments ("buffer-or-name" "other-window")) nil [7200 8158])
            ("helm-switch-to-buffers-other-window" function (:arguments ("buffer-or-name")) nil [8160 8379])
            ("cl-defun" code nil nil [8381 8737])
            ("helm-goto-char" function (:arguments ("loc")) nil [8739 9036])
            ("helm-goto-line" function (:arguments ("lineno" "noanim")) nil [9038 9380])
            ("helm-save-pos-to-register-before-jump" function nil nil [9382 9685])
            ("helm-save-current-pos-to-mark-ring" function nil nil [9687 9973])
            ("helm-show-all-in-this-source-only" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [9975 10462])
            ("put" code nil nil [10463 10516])
            ("helm-display-all-sources" function (:user-visible-flag t) nil [10518 10695])
            ("put" code nil nil [10696 10740])
            ("helm-displaying-source-names" function nil nil [10742 11144])
            ("helm-handle-winner-boring-buffers" function nil nil [11146 11462])
            ("add-hook" code nil nil [11463 11528])
            ("helm-quit-and-find-file" function (:user-visible-flag t) nil [11530 14335])
            ("put" code nil nil [14336 14379])
            ("helm-generic-sort-fn" function (:arguments ("s1" "s2")) nil [14381 15976])
            ("helm-ff-get-host-from-tramp-invalid-fname" function (:arguments ("fname")) nil [15978 16351])
            ("cl-defun" code nil nil [16353 17048])
            ("cl-defun" code nil nil [17050 21601])
            ("helm-split-mode-file-attributes" function (:arguments ("str" "string")) nil [21603 22309])
            ("with-helm-display-marked-candidates" function (:arguments ("buffer-or-name" "candidates" "body")) nil [22311 23288])
            ("helm-match-line-overlay" variable nil nil [23338 23374])
            ("helm--match-item-overlays" variable nil nil [23375 23413])
            ("helm-highlight-current-line" function (:arguments ("start" "end" "buf" "face" "pulse")) nil [23415 25770])
            ("helm-match-line-cleanup" function nil nil [25772 26011])
            ("helm-match-line-update" function nil nil [26013 26158])
            ("helm-persistent-autoresize-hook" function nil nil [26160 26434])
            ("add-hook" code nil nil [26436 26514])
            ("add-hook" code nil nil [26515 26569])
            ("add-hook" code nil nil [26570 26639])
            ("helm--show-help-echo-timer" variable nil nil [26704 26743])
            ("helm-cancel-help-echo-timer" function nil nil [26745 26907])
            ("helm-show-help-echo" function nil nil [26909 27665])
            ("define-minor-mode" code nil nil [27682 28283])
            ("helm-open-file-with-default-tool" function (:arguments ("file")) nil [28285 28885])
            ("helm-open-dired" function (:arguments ("file")) nil [28887 29125])
            ("helm-require-or-error" function (:arguments ("feature" "function")) nil [29127 29260])
            ("helm-find-file-as-root" function (:arguments ("candidate")) nil [29262 29915])
            ("helm-find-many-files" function (:arguments ("_ignore")) nil [29917 30047])
            ("helm-read-repeat-string" function (:arguments ("prompt" "count")) nil [30049 30473])
            ("helm-html-bookmarks-to-alist" function (:arguments ("file" "url-regexp" "bmk-regexp")) nil [30475 31195])
            ("helm-html-entity-to-string" function (:arguments ("entity")) nil [31197 31533])
            ("helm-html-decode-entities-string" function (:arguments ("str")) nil [31535 31888])
            ("helm-utils" package nil nil [31890 31911]))          
      :file "helm-utils.el"
      :pointmax 32066
      :fsize 32151
      :lastmodtime '(22375 616 447310 584000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-info.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [810 827])
            ("helm" include nil nil [828 843])
            ("helm-lib" include nil nil [844 863])
            ("helm-plugin" include nil nil [864 886])
            ("info" include nil nil [887 902])
            ("declare-function" code nil nil [904 963])
            ("declare-function" code nil nil [964 1021])
            ("declare-function" code nil nil [1022 1109])
            ("Info-history" variable nil nil [1110 1131])
            ("Info-directory-list" variable nil nil [1132 1160])
            ("helm-info" customgroup (:user-visible-flag t) nil [1178 1271])
            ("helm-info-default-sources" variable (:default-value (quote (helm-source-info-elisp helm-source-info-cl helm-source-info-eieio helm-source-info-pages))) nil [1273 1570])
            ("cl-defun" code nil nil [1634 3107])
            ("helm-info-goto" function (:arguments ("node-line")) nil [3109 3213])
            ("helm-info-display-to-real" function (:arguments ("line")) nil [3215 3577])
            ("helm-info-source" type
               (:superclasses "helm-source-in-buffer"
                :members 
                  ( ("info-file" variable (:default-value "nil") nil nil)
                    ("init" variable (:default-value "(function helm-info-init)") nil nil)
                    ("display-to-real" variable (:default-value "(function helm-info-display-to-real)") nil nil)
                    ("get-line" variable (:default-value "(function buffer-substring)") nil nil)
                    ("action" variable (:default-value "(quote ((\"Goto node\" . helm-info-goto)))") nil nil))                  
                :type "class")
                nil [3579 3919])
            ("helm-build-info-source" function (:arguments ("fname" "args")) nil [3921 4074])
            ("helm-build-info-index-command" function (:arguments ("name" "doc" "source" "buffer")) nil [4076 4501])
            ("helm-define-info-index-sources" function (:arguments ("var-value" "commands")) nil [4503 5166])
            ("helm-info-index-set" function (:arguments ("var" "value")) nil [5168 5268])
            ("helm-info-searched" variable (:default-value (make-ring 32)) nil [5425 5511])
            ("helm-get-info-files" function nil nil [5513 6160])
            ("helm-default-info-index-list" variable (:default-value (helm-get-info-files)) nil [6162 6357])
            ("helm-info-search-index" function (:arguments ("candidate")) nil [6359 6699])
            ("helm-def-source--info-files" function nil nil [6701 7093])
            ("helm-info" function (:user-visible-flag t) nil [7110 7509])
            ("helm-info--pages-cache" variable nil nil [7710 7789])
            ("helm-source-info-pages" variable (:default-value (helm-build-sync-source "Info Pages" :init (function helm-info-pages-init) :candidates (lambda nil helm-info--pages-cache) :action (quote (("Show with Info" lambda (node-str) (info (replace-regexp-in-string "^[^:]+: " "" node-str))))) :requires-pattern 2)) nil [7791 8189])
            ("helm-info-pages-init" function nil nil [8191 8690])
            ("helm-info-at-point" function (:user-visible-flag t) nil [8707 8922])
            ("helm-info" package nil nil [8925 8945]))          
      :file "helm-info.el"
      :pointmax 9099
      :fsize 9098
      :lastmodtime '(22375 616 851310 588000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-eval.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [809 826])
            ("helm" include nil nil [827 842])
            ("helm-help" include nil nil [843 863])
            ("eldoc" include nil nil [864 880])
            ("edebug" include nil nil [881 898])
            ("helm-eval" customgroup (:user-visible-flag t) nil [902 995])
            ("helm-eldoc-in-minibuffer-show-fn" variable (:default-value (quote helm-show-info-in-mode-line)) nil [997 1191])
            ("helm-show-info-in-mode-line-delay" variable (:default-value 12) nil [1193 1352])
            ("if" code nil nil [1413 2341])
            ("helm-eldoc-active-minibuffers-list" variable nil nil [2383 2430])
            ("helm-eval-expression-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "<C-return>") (quote helm-eval-new-line-and-indent)) (define-key map (kbd "<M-tab>") (quote lisp-indent-line)) (define-key map (kbd "<C-tab>") (quote helm-lisp-completion-at-point)) (define-key map (kbd "C-p") (quote previous-line)) (define-key map (kbd "C-n") (quote next-line)) (define-key map (kbd "<up>") (quote previous-line)) (define-key map (kbd "<down>") (quote next-line)) (define-key map (kbd "<right>") (quote forward-char)) (define-key map (kbd "<left>") (quote backward-char)) map)) nil [2432 3070])
            ("helm-build-evaluation-result-source" function nil nil [3072 4505])
            ("helm-eval-new-line-and-indent" function nil nil [4507 4594])
            ("helm-eldoc-store-minibuffer" function nil nil [4596 4816])
            ("helm-eldoc-show-in-eval" function nil nil [4818 5705])
            ("helm-show-info-in-mode-line" function (:arguments ("str")) nil [5707 6014])
            ("helm-source-calculation-result" variable (:default-value (helm-build-dummy-source "Calculation Result" :filtered-candidate-transformer (lambda (_candidates _source) (list (condition-case nil (calc-eval helm-pattern) (error "error")))) :nohighlight t :action (quote (("Copy result to kill-ring" lambda (candidate) (kill-new candidate) (message "Result \"%s\" copied to kill-ring" candidate)) ("Copy operation to kill-ring" lambda (_candidate) (kill-new helm-input) (message "Calculation copied to kill-ring")))))) nil [6045 6974])
            ("helm-eval-expression" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [6991 7362])
            ("eldoc-idle-delay" variable nil nil [7364 7389])
            ("helm-eval-expression-with-eldoc" function (:user-visible-flag t) nil [7405 7962])
            ("helm-calcul-expression" function (:user-visible-flag t) nil [7979 8171])
            ("helm-eval" package nil nil [8173 8193]))          
      :file "helm-eval.el"
      :pointmax 8347
      :fsize 8346
      :lastmodtime '(22375 617 319310 594000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-files.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [815 832])
            ("helm" include nil nil [833 848])
            ("helm-types" include nil nil [849 870])
            ("helm-utils" include nil nil [871 892])
            ("helm-external" include nil nil [893 917])
            ("helm-grep" include nil nil [918 938])
            ("helm-help" include nil nil [939 959])
            ("helm-locate" include nil nil [960 982])
            ("helm-bookmark" include nil nil [983 1007])
            ("helm-tags" include nil nil [1008 1028])
            ("helm-buffers" include nil nil [1029 1052])
            ("thingatpt" include nil nil [1053 1073])
            ("ffap" include nil nil [1074 1089])
            ("dired-aux" include nil nil [1090 1110])
            ("dired-x" include nil nil [1111 1129])
            ("tramp" include nil nil [1130 1146])
            ("image-dired" include nil nil [1147 1169])
            ("declare-function" code nil nil [1171 1232])
            ("declare-function" code nil nil [1233 1336])
            ("declare-function" code nil nil [1337 1411])
            ("declare-function" code nil nil [1412 1504])
            ("declare-function" code nil nil [1505 1581])
            ("declare-function" code nil nil [1582 1636])
            ("declare-function" code nil nil [1637 1726])
            ("declare-function" code nil nil [1727 1774])
            ("declare-function" code nil nil [1775 1815])
            ("declare-function" code nil nil [1816 1861])
            ("declare-function" code nil nil [1862 1903])
            ("declare-function" code nil nil [1904 1957])
            ("declare-function" code nil nil [1958 2009])
            ("declare-function" code nil nil [2010 2075])
            ("declare-function" code nil nil [2076 2122])
            ("declare-function" code nil nil [2123 2174])
            ("recentf-list" variable nil nil [2176 2197])
            ("helm-mm-matching-method" variable nil nil [2198 2230])
            ("dired-async-mode" variable nil nil [2231 2256])
            ("helm-files" customgroup (:user-visible-flag t) nil [2260 2347])
            ("helm-boring-file-regexp-list" variable (:default-value (mapcar (lambda (f) (concat (rx-to-string (replace-regexp-in-string "/$" "" f) t) "$")) completion-ignored-extensions)) nil [2349 2673])
            ("helm-for-files-preferred-list" variable (:default-value (quote (helm-source-buffers-list helm-source-recentf helm-source-bookmarks helm-source-file-cache helm-source-files-in-current-dir helm-source-locate))) nil [2675 2980])
            ("helm-tramp-verbose" variable nil nil [2982 3213])
            ("helm-ff-auto-update-initial-value" variable nil nil [3215 3617])
            ("helm-ff-lynx-style-map" variable (:default-value t) nil [3619 3858])
            ("helm-ff-history-max-length" variable (:default-value 100) nil [3860 3999])
            ("helm-ff-fuzzy-matching" variable (:default-value t) nil [4001 4201])
            ("helm-ff-tramp-not-fancy" variable (:default-value t) nil [4203 4400])
            ("helm-ff-exif-data-program" variable (:default-value "exiftran") nil [4402 4543])
            ("helm-ff-exif-data-program-args" variable (:default-value "-d") nil [4545 4681])
            ("helm-ff-newfile-prompt-p" variable (:default-value t) nil [4683 4842])
            ("helm-ff-avfs-directory" variable (:default-value "~/.avfs") nil [4844 5143])
            ("helm-ff-file-compressed-list" variable (:default-value (quote ("gz" "bz2" "zip" "7z"))) nil [5145 5314])
            ("helm-ff-printer-list" variable nil nil [5316 5717])
            ("helm-ff-transformer-show-only-basename" variable (:default-value t) nil [5719 5985])
            ("helm-ff-signal-error-on-dot-files" variable (:default-value t) nil [5987 6247])
            ("helm-ff-search-library-in-sexp" variable nil nil [6249 6399])
            ("helm-tooltip-hide-delay" variable (:default-value 25) nil [6401 6534])
            ("helm-ff-file-name-history-use-recentf" variable nil nil [6536 6703])
            ("helm-ff-skip-boring-files" variable nil nil [6705 6969])
            ("helm-ff-candidate-number-limit" variable (:default-value 5000) nil [6971 7147])
            ("helm-findutils-skip-boring-files" variable (:default-value t) nil [7149 7304])
            ("helm-findutils-search-full-path" variable nil nil [7306 7520])
            ("helm-files-save-history-extra-sources" variable (:default-value (quote ("Find" "Locate" "Recentf" "Files from Current Directory" "File Cache"))) nil [7522 7767])
            ("helm-find-files-before-init-hook" variable nil nil [7769 7914])
            ("helm-find-files-after-init-hook" variable nil nil [7916 8059])
            ("helm-multi-files-toggle-locate-binding" variable (:default-value "C-c p") nil [8061 8231])
            ("helm-find-files-bookmark-prefix" variable (:default-value "Helm-find-files: ") nil [8233 8389])
            ("helm-ff-guess-ffap-filenames" variable nil nil [8391 8625])
            ("helm-ff-guess-ffap-urls" variable (:default-value t) nil [8627 8861])
            ("helm-ff-no-preselect" variable nil nil [8863 9010])
            ("helm-substitute-in-filename-stay-on-remote" variable nil nil [9012 9187])
            ("helm-files-faces" customgroup (:user-visible-flag t) nil [9207 9342])
            ("helm-ff-prefix" variable
               (:default-value (quote ((t (:background "yellow" :foreground "black"))))
                :type "face")
                nil [9344 9517])
            ("helm-ff-executable" variable
               (:default-value (quote ((t (:foreground "green"))))
                :type "face")
                nil [9519 9664])
            ("helm-ff-directory" variable
               (:default-value (quote ((t (:foreground "DarkRed" :background "LightGray"))))
                :type "face")
                nil [9666 9831])
            ("helm-ff-dotted-directory" variable
               (:default-value (quote ((t (:foreground "black" :background "DimGray"))))
                :type "face")
                nil [9833 10008])
            ("helm-ff-dotted-symlink-directory" variable
               (:default-value (quote ((t (:foreground "DarkOrange" :background "DimGray"))))
                :type "face")
                nil [10010 10208])
            ("helm-ff-symlink" variable
               (:default-value (quote ((t (:foreground "DarkOrange"))))
                :type "face")
                nil [10210 10349])
            ("helm-ff-invalid-symlink" variable
               (:default-value (quote ((t (:foreground "black" :background "red"))))
                :type "face")
                nil [10351 10519])
            ("helm-ff-file" variable
               (:default-value (quote ((t (:inherit font-lock-builtin-face))))
                :type "face")
                nil [10521 10666])
            ("helm-ff-dirs" variable
               (:default-value (quote ((t (:inherit font-lock-function-name-face))))
                :type "face")
                nil [10668 10848])
            ("helm-history-deleted" variable
               (:default-value (quote ((t (:inherit helm-ff-invalid-symlink))))
                :type "face")
                nil [10850 11009])
            ("helm-history-remote" variable
               (:default-value (quote ((t (:foreground "Indianred1"))))
                :type "face")
                nil [11011 11160])
            ("helm-find-files-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "C-]") (quote helm-ff-run-toggle-basename)) (define-key map (kbd "C-x C-f") (quote helm-ff-run-locate)) (define-key map (kbd "C-x C-d") (quote helm-ff-run-browse-project)) (define-key map (kbd "C-x r m") (quote helm-ff-bookmark-set)) (define-key map (kbd "C-x r b") (quote helm-find-files-toggle-to-bookmark)) (define-key map (kbd "C-s") (quote helm-ff-run-grep)) (define-key map (kbd "M-g s") (quote helm-ff-run-grep)) (define-key map (kbd "M-g p") (quote helm-ff-run-pdfgrep)) (define-key map (kbd "M-g z") (quote helm-ff-run-zgrep)) (define-key map (kbd "M-g a") (quote helm-ff-run-grep-ag)) (define-key map (kbd "M-g g") (quote helm-ff-run-git-grep)) (define-key map (kbd "M-g i") (quote helm-ff-run-gid)) (define-key map (kbd "M-.") (quote helm-ff-run-etags)) (define-key map (kbd "M-R") (quote helm-ff-run-rename-file)) (define-key map (kbd "M-C") (quote helm-ff-run-copy-file)) (define-key map (kbd "M-B") (quote helm-ff-run-byte-compile-file)) (define-key map (kbd "M-L") (quote helm-ff-run-load-file)) (define-key map (kbd "M-S") (quote helm-ff-run-symlink-file)) (define-key map (kbd "M-H") (quote helm-ff-run-hardlink-file)) (define-key map (kbd "M-D") (quote helm-ff-run-delete-file)) (define-key map (kbd "M-K") (quote helm-ff-run-kill-buffer-persistent)) (define-key map (kbd "C-c d") (quote helm-ff-persistent-delete)) (define-key map (kbd "M-e") (quote helm-ff-run-switch-to-eshell)) (define-key map (kbd "C-c i") (quote helm-ff-run-complete-fn-at-point)) (define-key map (kbd "C-c o") (quote helm-ff-run-switch-other-window)) (define-key map (kbd "C-c C-o") (quote helm-ff-run-switch-other-frame)) (define-key map (kbd "C-c C-x") (quote helm-ff-run-open-file-externally)) (define-key map (kbd "C-c X") (quote helm-ff-run-open-file-with-default-tool)) (define-key map (kbd "M-!") (quote helm-ff-run-eshell-command-on-file)) (define-key map (kbd "M-%") (quote helm-ff-run-query-replace-on-marked)) (define-key map (kbd "C-c =") (quote helm-ff-run-ediff-file)) (define-key map (kbd "M-=") (quote helm-ff-run-ediff-merge-file)) (define-key map (kbd "M-p") (quote helm-ff-run-switch-to-history)) (define-key map (kbd "C-c h") (quote helm-ff-file-name-history)) (define-key map (kbd "M-i") (quote helm-ff-properties-persistent)) (define-key map (kbd "C-}") (quote helm-narrow-window)) (define-key map (kbd "C-{") (quote helm-enlarge-window)) (define-key map (kbd "C-<backspace>") (quote helm-ff-run-toggle-auto-update)) (define-key map (kbd "C-c <DEL>") (quote helm-ff-run-toggle-auto-update)) (define-key map (kbd "C-c C-a") (quote helm-ff-run-gnus-attach-files)) (define-key map (kbd "C-c p") (quote helm-ff-run-print-file)) (define-key map (kbd "C-c /") (quote helm-ff-run-find-sh-command)) (define-key map (kbd "M-l") (quote helm-ff-rotate-left-persistent)) (define-key map (kbd "M-r") (quote helm-ff-rotate-right-persistent)) (define-key map (kbd "C-l") (quote helm-find-files-up-one-level)) (define-key map (kbd "C-r") (quote helm-find-files-down-last-level)) (define-key map (kbd "C-c r") (quote helm-ff-run-find-file-as-root)) (define-key map (kbd "C-x C-v") (quote helm-ff-run-find-alternate-file)) (define-key map (kbd "C-c @") (quote helm-ff-run-insert-org-link)) (helm-define-key-with-subkeys map (kbd "DEL") 127 (quote helm-ff-delete-char-backward) nil nil (quote helm-ff-delete-char-backward--exit-fn)) (when helm-ff-lynx-style-map (define-key map (kbd "<left>") (quote helm-find-files-up-one-level)) (define-key map (kbd "<right>") (quote helm-execute-persistent-action))) (delq nil map))) nil [11223 15260])
            ("helm-read-file-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "<C-return>") (quote helm-cr-empty-string)) (define-key map (kbd "<M-RET>") (quote helm-cr-empty-string)) (define-key map (kbd "C-]") (quote helm-ff-run-toggle-basename)) (define-key map (kbd "C-.") (quote helm-find-files-up-one-level)) (define-key map (kbd "C-l") (quote helm-find-files-up-one-level)) (define-key map (kbd "C-r") (quote helm-find-files-down-last-level)) (define-key map (kbd "C-c h") (quote helm-ff-file-name-history)) (define-key map (kbd "C-<backspace>") (quote helm-ff-run-toggle-auto-update)) (define-key map (kbd "C-c <DEL>") (quote helm-ff-run-toggle-auto-update)) (helm-define-key-with-subkeys map (kbd "DEL") 127 (quote helm-ff-delete-char-backward) nil nil (quote helm-ff-delete-char-backward--exit-fn)) (when helm-ff-lynx-style-map (define-key map (kbd "<left>") (quote helm-find-files-up-one-level)) (define-key map (kbd "<right>") (quote helm-execute-persistent-action)) (define-key map (kbd "<M-left>") (quote helm-previous-source)) (define-key map (kbd "<M-right>") (quote helm-next-source))) (delq nil map))) nil [15262 16538])
            ("helm-find-files-doc-header" variable
               (:user-visible-flag t
                :default-value " (\\<helm-find-files-map>\\[helm-find-files-up-one-level]: Go up one level)")
                nil [16555 16750])
            ("helm-ff-auto-update-flag" variable nil nil [16751 16928])
            ("helm-ff-last-expanded" variable nil nil [16929 17006])
            ("helm-ff-default-directory" variable nil nil [17007 17045])
            ("helm-ff-history" variable nil nil [17046 17074])
            ("helm-ff-cand-to-mark" variable nil nil [17075 17108])
            ("helm-ff-url-regexp" variable (:default-value "\\`\\(news\\(post\\)?:\\|nntp:\\|mailto:\\|file:\\|\\(ftp\\|https?\\|telnet\\|gopher\\|www\\|wais\\):/?/?\\).*") nil [17109 17313])
            ("helm-tramp-file-name-regexp" variable (:default-value "\\`/\\([^[/:]+\\|[^/]+]\\):") nil [17314 17380])
            ("helm-marked-buffer-name" variable (:default-value "*helm marked*") nil [17381 17429])
            ("helm-ff--auto-update-state" variable nil nil [17430 17469])
            ("helm-ff--deleting-char-backward" variable nil nil [17470 17514])
            ("helm-multi-files--toggle-locate" variable nil nil [17515 17559])
            ("helm-ff--move-to-first-real-candidate" variable (:default-value t) nil [17560 17608])
            ("helm-find-files--toggle-bookmark" variable nil nil [17609 17654])
            ("helm-find-files-actions" variable (:default-value (helm-make-actions "Find File" (quote helm-find-file-or-marked) "Find file in Dired" (quote helm-point-file-in-dired) (lambda nil (and (locate-library "elscreen") "Find file in Elscreen")) (quote helm-elscreen-find-file) "View file" (quote view-file) "Checksum File" (quote helm-ff-checksum) "Query replace fnames on marked" (quote helm-ff-query-replace-on-marked) "Query replace contents on marked" (quote helm-ff-query-replace) "Query replace regexp contents on marked" (quote helm-ff-query-replace-regexp) "Serial rename files" (quote helm-ff-serial-rename) "Serial rename by symlinking files" (quote helm-ff-serial-rename-by-symlink) "Serial rename by copying files" (quote helm-ff-serial-rename-by-copying) "Open file with default tool" (quote helm-open-file-with-default-tool) "Find file in hex dump" (quote hexl-find-file) "Browse project" (quote helm-ff-browse-project) "Complete at point `C-c i'" (quote helm-insert-file-name-completion-at-point) "Insert as org link `C-c @'" (quote helm-files-insert-as-org-link) "Find shell command `C-c /'" (quote helm-ff-find-sh-command) "Add marked files to file-cache" (quote helm-ff-cache-add-file) "Open file externally `C-c C-x, C-u to choose'" (quote helm-open-file-externally) "Grep File(s) `C-s, C-u Recurse'" (quote helm-find-files-grep) "Grep current directory with AG" (quote helm-find-files-ag) "Git grep" (quote helm-ff-git-grep) "Zgrep File(s) `M-g z, C-u Recurse'" (quote helm-ff-zgrep) "Gid" (quote helm-ff-gid) "Switch to Eshell `M-e'" (quote helm-ff-switch-to-eshell) "Etags `M-., C-u reload tag file'" (quote helm-ff-etags-select) "Eshell command on file(s) `M-!, C-u take all marked as arguments.'" (quote helm-find-files-eshell-command-on-file) "Find file as root `C-c r'" (quote helm-find-file-as-root) "Find alternate file" (quote find-alternate-file) "Ediff File `C-c ='" (quote helm-find-files-ediff-files) "Ediff Merge File `M-='" (quote helm-find-files-ediff-merge-files) "Delete File(s) `M-D'" (quote helm-delete-marked-files) "Copy file(s) `M-C, C-u to follow'" (quote helm-find-files-copy) "Rename file(s) `M-R, C-u to follow'" (quote helm-find-files-rename) "Backup files" (quote helm-find-files-backup) "Symlink files(s) `M-S, C-u to follow'" (quote helm-find-files-symlink) "Relsymlink file(s) `C-u to follow'" (quote helm-find-files-relsymlink) "Hardlink file(s) `M-H, C-u to follow'" (quote helm-find-files-hardlink) "Find file other window `C-c o'" (quote helm-find-files-other-window) "Switch to history `M-p'" (quote helm-find-files-switch-to-hist) "Find file other frame `C-c C-o'" (quote find-file-other-frame) "Print File `C-c p, C-u to refresh'" (quote helm-ff-print) "Locate `C-x C-f, C-u to specify locate db'" (quote helm-ff-locate))) nil [17684 20390])
            ("helm-source-find-files" variable nil nil [20392 20504])
            ("helm-source-ffiles" type
               (:superclasses "helm-source-sync"
                :members 
                  ( ("header-name" variable (:default-value "(lambda (name) (concat name (substitute-command-keys helm-find-files-doc-header)))") nil nil)
                    ("init" variable (:default-value "(lambda nil (setq helm-ff-auto-update-flag helm-ff-auto-update-initial-value) (setq helm-ff--auto-update-state helm-ff-auto-update-flag) (helm-set-local-variable (quote bookmark-make-record-function) (function helm-ff-make-bookmark-record)))") nil nil)
                    ("candidates" variable (:default-value "(quote helm-find-files-get-candidates)") nil nil)
                    ("filtered-candidate-transformer" variable (:default-value "(quote helm-ff-sort-candidates)") nil nil)
                    ("filter-one-by-one" variable (:default-value "(quote helm-ff-filter-candidate-one-by-one)") nil nil)
                    ("persistent-action" variable (:default-value "(quote helm-find-files-persistent-action)") nil nil)
                    ("persistent-help" variable (:default-value "Hit1 Expand Candidate, Hit2 or (C-u) Find file") nil nil)
                    ("help-message" variable (:default-value "(quote helm-ff-help-message)") nil nil)
                    ("mode-line" variable (:default-value "(list \"File(s)\" helm-mode-line-string)") nil nil)
                    ("volatile" variable (:default-value "t") nil nil)
                    ("cleanup" variable (:default-value "(quote helm-find-files-cleanup)") nil nil)
                    ("migemo" variable (:default-value "t") nil nil)
                    ("nohighlight" variable (:default-value "t") nil nil)
                    ("keymap" variable (:default-value "helm-find-files-map") nil nil)
                    ("candidate-number-limit" variable (:default-value "(quote helm-ff-candidate-number-limit)") nil nil)
                    ("action-transformer" variable (:default-value "(quote helm-find-files-action-transformer)") nil nil)
                    ("action" variable (:default-value "(quote helm-find-files-actions)") nil nil)
                    ("before-init-hook" variable (:default-value "(quote helm-find-files-before-init-hook)") nil nil)
                    ("after-init-hook" variable (:default-value "(quote helm-find-files-after-init-hook)") nil nil))                  
                :type "class")
                nil [20506 22048])
            ("helm-ff-make-bookmark-record" function nil nil [22075 22324])
            ("helm-ff-bookmark-jump" function (:arguments ("bookmark")) nil [22326 22691])
            ("helm-ff-bookmark-set" function (:user-visible-flag t) nil [22693 23022])
            ("put" code nil nil [23023 23063])
            ("helm-dwim-target-directory" function nil nil [23065 23826])
            ("helm-ff--count-and-collect-dups" function (:arguments ("files")) nil [23828 24565])
            ("helm-find-files-do-action" function (:arguments ("action")) nil [24567 25982])
            ("helm-find-files-copy" function (:arguments ("_candidate")) nil [25984 26100])
            ("helm-find-files-backup" function (:arguments ("_candidate")) nil [26102 26430])
            ("helm-find-files-rename" function (:arguments ("_candidate")) nil [26432 26554])
            ("helm-find-files-symlink" function (:arguments ("_candidate")) nil [26556 26681])
            ("helm-find-files-relsymlink" function (:arguments ("_candidate")) nil [26683 26817])
            ("helm-find-files-hardlink" function (:arguments ("_candidate")) nil [26819 26947])
            ("helm-find-files-other-window" function (:arguments ("_candidate")) nil [26949 27438])
            ("helm-find-files-byte-compile" function (:arguments ("_candidate")) nil [27440 27725])
            ("helm-find-files-load-files" function (:arguments ("_candidate")) nil [27727 27941])
            ("helm-find-files-ediff-files-1" function (:arguments ("candidate" "merge")) nil [27943 28892])
            ("helm-find-files-ediff-files" function (:arguments ("candidate")) nil [28894 28985])
            ("helm-find-files-ediff-merge-files" function (:arguments ("candidate")) nil [28987 29091])
            ("helm-find-files-grep" function (:arguments ("_candidate")) nil [29093 29294])
            ("helm-ff-git-grep" function (:arguments ("_candidate")) nil [29296 29463])
            ("helm-find-files-ag" function (:arguments ("_candidate")) nil [29465 29587])
            ("helm-ff-zgrep" function (:arguments ("_candidate")) nil [29589 29767])
            ("helm-ff-pdfgrep" function (:arguments ("_candidate")) nil [29769 30232])
            ("helm-ff-etags-select" function (:arguments ("candidate")) nil [30234 30722])
            ("helm-find-files-switch-to-hist" function (:arguments ("_candidate")) nil [30724 30836])
            ("eshell-command-aliases-list" variable nil nil [30838 30878])
            ("helm-eshell-command-on-file-input-history" variable nil nil [30879 30933])
            ("helm-find-files-eshell-command-on-file-1" function (:arguments ("map")) nil [30934 35962])
            ("helm-find-files-eshell-command-on-file" function (:arguments ("_candidate")) nil [35964 36214])
            ("helm-ff-switch-to-eshell" function (:arguments ("_candidate")) nil [36216 36633])
            ("helm-ff-serial-rename-action" function (:arguments ("method")) nil [36635 38464])
            ("helm-ff-member-directory-p" function (:arguments ("file" "directory")) nil [38466 38732])
            ("cl-defun" code nil nil [38734 41257])
            ("helm-ff-serial-rename" function (:arguments ("_candidate")) nil [41259 41528])
            ("helm-ff-serial-rename-by-symlink" function (:arguments ("_candidate")) nil [41530 41811])
            ("helm-ff-serial-rename-by-copying" function (:arguments ("_candidate")) nil [41813 42088])
            ("helm-ff-query-replace-fnames-history-from" variable nil nil [42090 42144])
            ("helm-ff-query-replace-fnames-history-to" variable nil nil [42145 42197])
            ("helm-ff-query-replace-on-filenames" function (:arguments ("candidates")) nil [42198 45713])
            ("helm-ff-query-replace-on-marked" function (:arguments ("_candidate")) nil [45730 45891])
            ("helm-ff-run-query-replace-on-marked" function nil nil [45935 46087])
            ("put" code nil nil [46088 46143])
            ("helm-ff-query-replace" function (:arguments ("_candidate")) nil [46145 46376])
            ("helm-ff-query-replace-regexp" function (:arguments ("_candidate")) nil [46378 46620])
            ("helm-ff-run-query-replace" function nil nil [46622 46754])
            ("put" code nil nil [46755 46800])
            ("helm-ff-run-query-replace-regexp" function nil nil [46802 46948])
            ("put" code nil nil [46949 47001])
            ("helm-ff-toggle-auto-update" function (:arguments ("_candidate")) nil [47003 47272])
            ("helm-ff-run-toggle-auto-update" function nil nil [47274 47493])
            ("put" code nil nil [47494 47544])
            ("helm-ff-delete-char-backward" function (:user-visible-flag t) nil [47546 47878])
            ("put" code nil nil [47879 47927])
            ("helm-ff-delete-char-backward--exit-fn" function nil nil [47929 48083])
            ("helm-ff-run-switch-to-history" function (:user-visible-flag t) nil [48085 48339])
            ("put" code nil nil [48340 48389])
            ("helm-ff-run-grep" function (:user-visible-flag t) nil [48391 48564])
            ("put" code nil nil [48565 48601])
            ("helm-ff-run-git-grep" function (:user-visible-flag t) nil [48603 48780])
            ("put" code nil nil [48781 48821])
            ("helm-ff-run-grep-ag" function nil nil [48823 48946])
            ("put" code nil nil [48947 48986])
            ("helm-ff-run-pdfgrep" function (:user-visible-flag t) nil [48988 49162])
            ("put" code nil nil [49163 49202])
            ("helm-ff-run-zgrep" function (:user-visible-flag t) nil [49204 49371])
            ("put" code nil nil [49372 49409])
            ("helm-ff-run-copy-file" function (:user-visible-flag t) nil [49411 49594])
            ("put" code nil nil [49595 49636])
            ("helm-ff-run-rename-file" function (:user-visible-flag t) nil [49638 49827])
            ("put" code nil nil [49828 49871])
            ("helm-ff-run-byte-compile-file" function (:user-visible-flag t) nil [49873 50080])
            ("put" code nil nil [50081 50130])
            ("helm-ff-run-load-file" function (:user-visible-flag t) nil [50132 50321])
            ("put" code nil nil [50322 50363])
            ("helm-ff-run-eshell-command-on-file" function (:user-visible-flag t) nil [50365 50597])
            ("put" code nil nil [50598 50652])
            ("helm-ff-run-ediff-file" function (:user-visible-flag t) nil [50654 50846])
            ("put" code nil nil [50847 50889])
            ("helm-ff-run-ediff-merge-file" function (:user-visible-flag t) nil [50891 51106])
            ("put" code nil nil [51107 51155])
            ("helm-ff-run-symlink-file" function (:user-visible-flag t) nil [51157 51349])
            ("put" code nil nil [51350 51394])
            ("helm-ff-run-hardlink-file" function (:user-visible-flag t) nil [51396 51591])
            ("put" code nil nil [51592 51637])
            ("helm-ff-run-delete-file" function (:user-visible-flag t) nil [51639 51830])
            ("put" code nil nil [51831 51874])
            ("helm-ff-run-complete-fn-at-point" function (:user-visible-flag t) nil [51876 52105])
            ("put" code nil nil [52106 52158])
            ("helm-ff-run-switch-to-eshell" function (:user-visible-flag t) nil [52160 52361])
            ("put" code nil nil [52362 52410])
            ("helm-ff-run-switch-other-window" function (:user-visible-flag t) nil [52412 52626])
            ("put" code nil nil [52627 52678])
            ("helm-ff-run-switch-other-frame" function (:user-visible-flag t) nil [52680 52885])
            ("put" code nil nil [52886 52936])
            ("helm-ff-run-open-file-externally" function (:user-visible-flag t) nil [52938 53156])
            ("put" code nil nil [53157 53209])
            ("helm-ff-run-open-file-with-default-tool" function (:user-visible-flag t) nil [53211 53443])
            ("put" code nil nil [53444 53503])
            ("helm-ff-locate" function (:arguments ("candidate")) nil [53505 54137])
            ("helm-ff-run-locate" function (:user-visible-flag t) nil [54139 54310])
            ("put" code nil nil [54311 54349])
            ("helm-files-insert-as-org-link" function (:arguments ("candidate")) nil [54351 54469])
            ("helm-ff-run-insert-org-link" function nil nil [54471 54613])
            ("put" code nil nil [54614 54661])
            ("helm-ff-run-find-file-as-root" function nil nil [54663 54800])
            ("put" code nil nil [54801 54850])
            ("helm-ff-run-find-alternate-file" function nil nil [54852 54988])
            ("put" code nil nil [54989 55040])
            ("helm-ff-run-gnus-attach-files" function (:user-visible-flag t) nil [55042 55254])
            ("put" code nil nil [55255 55304])
            ("helm-ff-run-etags" function (:user-visible-flag t) nil [55306 55489])
            ("put" code nil nil [55490 55527])
            ("lpr-printer-switch" variable nil nil [55529 55556])
            ("helm-ff-print" function (:arguments ("_candidate")) nil [55557 57590])
            ("helm-ff-run-print-file" function (:user-visible-flag t) nil [57592 57770])
            ("put" code nil nil [57771 57813])
            ("helm-ff-checksum" function (:arguments ("file")) nil [57815 58248])
            ("helm-ff-toggle-basename" function (:arguments ("_candidate")) nil [58250 58630])
            ("helm-ff-run-toggle-basename" function nil nil [58632 58779])
            ("put" code nil nil [58780 58827])
            ("helm-reduce-file-name" function (:arguments ("fname" "level")) nil [58829 59136])
            ("helm-iter-reduce-fname" function (:arguments ("fname")) nil [59138 59581])
            ("helm-find-files--level-tree" variable nil nil [59583 59623])
            ("helm-find-files--level-tree-iterator" variable nil nil [59624 59673])
            ("helm-find-files-up-one-level" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [59674 61094])
            ("put" code nil nil [61095 61143])
            ("helm-find-files-down-last-level" function (:user-visible-flag t) nil [61145 61764])
            ("put" code nil nil [61765 61816])
            ("helm-find-files--reset-level-tree" function nil nil [61818 61952])
            ("add-hook" code nil nil [61954 62018])
            ("add-hook" code nil nil [62019 62087])
            ("add-hook" code nil nil [62088 62168])
            ("helm-ff-retrieve-last-expanded" function nil nil [62170 62832])
            ("helm-ff-move-to-first-real-candidate" function nil nil [62834 63518])
            ("helm-ff-update-when-only-one-matched" function nil nil [63591 68269])
            ("helm-ff-auto-expand-to-home-or-root" function nil nil [68271 70615])
            ("helm-substitute-in-filename" function (:arguments ("fname")) nil [70617 71943])
            ("helm-point-file-in-dired" function (:arguments ("file")) nil [71945 72267])
            ("helm-create-tramp-name" function (:arguments ("fname")) nil [72269 72507])
            ("cl-defun" code nil nil [72509 73306])
            ("helm-ff-before-action-hook-fn" function nil nil [73308 73735])
            ("add-hook" code nil nil [73736 73802])
            ("cl-defun" code nil nil [73804 74020])
            ("helm-ff-set-pattern" function (:arguments ("pattern")) nil [74022 76516])
            ("helm-find-files-get-candidates" function (:arguments ("require-match")) nil [76518 81699])
            ("helm-ff-directory-files" function (:arguments ("directory" "full")) nil [81701 83021])
            ("helm-ff-handle-backslash" function (:arguments ("fname")) nil [83023 83283])
            ("helm-ff-fuzzy-matching-p" function nil nil [83285 83413])
            ("helm-ff--transform-pattern-for-completion" function (:arguments ("pattern")) nil [83415 85857])
            ("helm-dir-is-dot" function (:arguments ("dir")) nil [85859 85942])
            ("helm-ff-save-history" function nil nil [85944 86420])
            ("add-hook" code nil nil [86421 86472])
            ("helm-files-save-file-name-history" function (:arguments ("force")) nil [86474 87349])
            ("add-hook" code nil nil [87350 87422])
            ("helm-ff-valid-symlink-p" function (:arguments ("file")) nil [87424 87695])
            ("helm-get-default-mode-for-file" function (:arguments ("filename")) nil [87697 87961])
            ("helm-ff-properties" function (:arguments ("candidate")) nil [87963 90101])
            ("helm-ff-properties-persistent" function (:user-visible-flag t) nil [90103 90354])
            ("put" code nil nil [90355 90404])
            ("helm-ff-persistent-delete" function (:user-visible-flag t) nil [90406 90649])
            ("put" code nil nil [90650 90695])
            ("helm-ff-dot-file-p" function (:arguments ("file")) nil [90697 90808])
            ("helm-ff-quick-delete" function (:arguments ("_candidate")) nil [90810 91998])
            ("helm-ff-kill-buffer-fname" function (:arguments ("candidate")) nil [92000 92412])
            ("helm-ff-kill-or-find-buffer-fname" function (:arguments ("candidate")) nil [92414 93376])
            ("helm-ff-run-kill-buffer-persistent" function (:user-visible-flag t) nil [93378 93640])
            ("put" code nil nil [93641 93695])
            ("helm-ff-prefix-filename" function (:arguments ("fname" "file-or-symlinkp" "new-file")) nil [93697 94582])
            ("helm-ff-score-candidate-for-pattern" function (:arguments ("str" "pattern")) nil [94584 94736])
            ("helm-ff-sort-candidates" function (:arguments ("candidates" "_source")) nil [94738 96405])
            ("helm-ff-filter-candidate-one-by-one" function (:arguments ("file")) nil [96407 99845])
            ("helm-find-files-action-transformer" function (:arguments ("actions" "candidate")) nil [99847 101678])
            ("helm-ff-goto-linum" function (:arguments ("candidate")) nil [101680 102271])
            ("helm-ff-gnus-attach-files" function (:arguments ("_candidate")) nil [102273 102503])
            ("image-dired-display-image-buffer" variable nil nil [102505 102546])
            ("helm-ff-rotate-current-image-1" function (:arguments ("file" "num-arg")) nil [102547 103409])
            ("helm-ff-rotate-image-left" function (:arguments ("candidate")) nil [103411 103580])
            ("helm-ff-rotate-image-right" function (:arguments ("candidate")) nil [103582 103749])
            ("helm-ff-rotate-left-persistent" function (:user-visible-flag t) nil [103751 103988])
            ("put" code nil nil [103989 104039])
            ("helm-ff-rotate-right-persistent" function (:user-visible-flag t) nil [104041 104281])
            ("put" code nil nil [104282 104333])
            ("helm-ff-exif-data" function (:arguments ("candidate")) nil [104335 104868])
            ("helm-find-files-persistent-action" function (:arguments ("candidate")) nil [104870 109657])
            ("helm-find-files-recursive-dirs" function (:arguments ("directory" "input")) nil [109694 111180])
            ("helm-ff-recursive-dirs" function (:arguments ("_candidate")) nil [111182 111460])
            ("helm-ff-file-compressed-p" function (:arguments ("candidate")) nil [111462 111640])
            ("helm-insert-file-name-completion-at-point" function (:arguments ("candidate")) nil [111642 113389])
            ("cl-defun" code nil nil [113391 114139])
            ("helm-find-files-1" function (:arguments ("fname" "preselect")) nil [114141 116014])
            ("helm-find-files-cleanup" function nil nil [116016 116269])
            ("helm-find-files-toggle-to-bookmark" function (:user-visible-flag t) nil [116271 116896])
            ("put" code nil nil [116897 116951])
            ("helm-find-files-initial-input" function (:arguments ("input")) nil [116953 117495])
            ("helm-find-files-input" function (:arguments ("file-at-pt" "thing-at-pt")) nil [117497 118911])
            ("helm-ff-find-url-at-point" function nil nil [118913 119593])
            ("helm-find-library-at-point" function nil nil [119595 120663])
            ("helm-ff--valid-default-directory" function nil nil [120742 120990])
            ("cl-defun" code nil nil [120992 124621])
            ("helm-get-dest-fnames-from-list" function (:arguments ("flist" "dest-cand" "rename-dir-flag")) nil [124623 125438])
            ("helm-ff-maybe-mark-candidates" function nil nil [125440 126187])
            ("helm-file-buffers" function (:arguments ("filename")) nil [126220 126520])
            ("helm-delete-file" function (:arguments ("file" "error-if-dot-file-p" "synchro")) nil [126522 127829])
            ("helm-delete-marked-files" function (:arguments ("_ignore")) nil [127831 128380])
            ("helm-find-file-or-marked" function (:arguments ("candidate")) nil [128382 130822])
            ("helm-shadow-boring-files" function (:arguments ("files")) nil [130824 131033])
            ("helm-skip-boring-files" function (:arguments ("files")) nil [131035 131192])
            ("helm-skip-current-file" function (:arguments ("files")) nil [131194 131322])
            ("helm-w32-pathname-transformer" function (:arguments ("args")) nil [131324 131708])
            ("helm-transform-file-load-el" function (:arguments ("actions" "candidate")) nil [131710 132006])
            ("helm-transform-file-browse-url" function (:arguments ("actions" "candidate")) nil [132008 132451])
            ("helm-multi-files-toggle-to-locate" function nil nil [132453 133136])
            ("put" code nil nil [133137 133190])
            ("helm-files-in-all-dired-candidates" function nil nil [133250 133566])
            ("helm-files-dired-source" type
               (:interfaces ("helm-type-file")
                :superclasses "helm-source-sync"
                :members 
                  ( ("candidates" variable (:default-value "(function helm-files-in-all-dired-candidates)") nil nil))                  
                :type "class")
                nil [133642 133774])
            ("helm-source-files-in-all-dired" variable (:default-value (helm-make-source "Files in all dired buffer." (quote helm-files-dired-source))) nil [133776 133890])
            ("file-cache-alist" variable nil nil [133915 133940])
            ("helm-file-cache" type
               (:interfaces ("helm-type-file")
                :superclasses "helm-source-in-buffer"
                :members 
                  ( ("init" variable (:default-value "(lambda nil (require (quote filecache)))") nil nil))                  
                :type "class")
                nil [133942 134061])
            ("helm-file-cache-get-candidates" function nil nil [134063 134297])
            ("helm-source-file-cache" variable nil nil [134299 134334])
            ("helm-file-cache-fuzzy-match" variable nil nil [134336 134751])
            ("cl-defun" code nil nil [134753 135128])
            ("helm-ff-cache-add-file" function (:arguments ("_candidate")) nil [135130 135290])
            ("helm-ff-file-cache-remove-file-1" function (:arguments ("file")) nil [135292 135684])
            ("helm-ff-file-cache-remove-file" function (:arguments ("_file")) nil [135686 135871])
            ("helm-transform-file-cache" function (:arguments ("actions" "_candidate")) nil [135873 136185])
            ("helm-source-file-name-history" variable (:default-value (helm-build-sync-source "File Name History" :candidates (quote file-name-history) :persistent-action (function ignore) :filtered-candidate-transformer (function helm-file-name-history-transformer) :action (quote helm-type-file-actions))) nil [136217 136478])
            ("helm-source--ff-file-name-history" variable nil nil [136480 136663])
            ("helm-file-name-history-transformer" function (:arguments ("candidates" "_source")) nil [136665 137032])
            ("helm-ff-file-name-history" function (:user-visible-flag t) nil [137034 138576])
            ("put" code nil nil [138577 138622])
            ("helm-recentf--basename-flag" variable nil nil [138648 138688])
            ("helm-recentf-pattern-transformer" function (:arguments ("pattern")) nil [138690 139202])
            ("helm-turn-on-recentf" variable (:default-value t) nil [139204 139331])
            ("helm-recentf-source" type
               (:interfaces ("helm-type-file")
                :superclasses "helm-source-sync"
                :members 
                  ( ("init" variable (:default-value "(lambda nil (require (quote recentf)) (when helm-turn-on-recentf (recentf-mode 1)))") nil nil)
                    ("candidates" variable (:default-value "(lambda nil recentf-list)") nil nil)
                    ("pattern-transformer" variable (:default-value "(quote helm-recentf-pattern-transformer)") nil nil)
                    ("match-part" variable (:default-value "(lambda (candidate) (if (or helm-ff-transformer-show-only-basename helm-recentf--basename-flag) (helm-basename candidate) candidate))") nil nil)
                    ("migemo" variable (:default-value "t") nil nil)
                    ("persistent-action" variable (:default-value "(quote helm-ff-kill-or-find-buffer-fname)") nil nil))                  
                :type "class")
                nil [139333 140001])
            ("helm--setup-source" function
               (:parent "helm-recentf-source"
                :arguments ("source"))
                nil [140003 140410])
            ("helm-source-recentf" variable nil nil [140412 140562])
            ("helm-recentf-fuzzy-match" variable nil nil [140564 140913])
            ("helm--browse-project-cache" variable (:default-value (make-hash-table :test (quote equal))) nil [141091 141157])
            ("helm-buffers-in-project-p" variable nil nil [141158 141192])
            ("helm-browse-project-get-buffers" function (:arguments ("root-directory")) nil [141194 141728])
            ("helm-browse-project-build-buffers-source" function (:arguments ("directory")) nil [141730 142075])
            ("helm-browse-project-find-files" function (:arguments ("directory" "refresh")) nil [142077 143741])
            ("helm-browse-project" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [143758 145603])
            ("helm-browse-project-get--root-dir" function (:arguments ("directory")) nil [145605 146022])
            ("helm-ff-browse-project" function (:arguments ("_candidate")) nil [146024 146245])
            ("helm-ff-run-browse-project" function nil nil [146247 146381])
            ("put" code nil nil [146382 146428])
            ("helm-ff-gid" function (:arguments ("_candidate")) nil [146430 146537])
            ("helm-ff-run-gid" function nil nil [146539 146651])
            ("put" code nil nil [146652 146687])
            ("session-file-alist" variable nil nil [146844 146871])
            ("helm-source-session" variable (:default-value (helm-build-sync-source "Session" :candidates (lambda nil (cl-delete-if-not (lambda (f) (or (string-match helm-tramp-file-name-regexp f) (file-exists-p f))) (mapcar (quote car) session-file-alist))) :keymap helm-generic-files-map :help-message helm-generic-file-help-message :action (quote helm-type-file-actions))) nil [146872 147390])
            ("helm-highlight-files" function (:arguments ("files")) nil [147425 148828])
            ("helm-files-in-current-dir-source" type
               (:interfaces ("helm-type-file")
                :superclasses "helm-source-sync"
                :members 
                  ( ("candidates" variable (:default-value "(lambda nil (with-helm-current-buffer (let ((dir (helm-current-directory))) (when (file-accessible-directory-p dir) (directory-files dir t)))))") nil nil)
                    ("pattern-transformer" variable (:default-value "(quote helm-recentf-pattern-transformer)") nil nil)
                    ("match-part" variable (:default-value "(lambda (candidate) (if (or helm-ff-transformer-show-only-basename helm-recentf--basename-flag) (helm-basename candidate) candidate))") nil nil)
                    ("fuzzy-match" variable (:default-value "t") nil nil)
                    ("migemo" variable (:default-value "t") nil nil))                  
                :type "class")
                nil [148830 149572])
            ("helm-source-files-in-current-dir" variable (:default-value (helm-make-source "Files from Current Directory" helm-files-in-current-dir-source)) nil [149574 149706])
            ("helm-source-tracker-cand-incomplete" variable nil nil [149774 149854])
            ("helm-source-tracker-transformer" function (:arguments ("candidates" "_source")) nil [149855 151164])
            ("helm-source-tracker-search" variable (:default-value (helm-build-async-source "Tracker Search" :candidates-process (lambda nil (start-process "tracker-search-process" nil "tracker-search" "--disable-color" "--limit=512" helm-pattern)) :filtered-candidate-transformer (function helm-source-tracker-transformer) :keymap helm-generic-files-map :action (quote helm-type-file-actions) :action-transformer (quote (helm-transform-file-load-el helm-transform-file-browse-url)) :requires-pattern 3)) nil [151166 151932])
            ("helm-mac-spotlight-source" type
               (:interfaces ("helm-type-file")
                :superclasses "helm-source-async"
                :members 
                  ( ("candidates-process" variable (:default-value "(lambda nil (start-process \"mdfind-process\" nil \"mdfind\" helm-pattern))") nil nil)
                    ("requires-pattern" variable (:default-value "3") nil nil))                  
                :type "class")
                nil [151972 152257])
            ("helm-source-mac-spotlight" variable (:default-value (helm-make-source "mdfind" helm-mac-spotlight-source)) nil [152259 152426])
            ("helm-source-findutils" variable (:default-value (helm-build-async-source "Find" :header-name (lambda (name) (concat name " in [" (helm-default-directory) "]")) :candidates-process (quote helm-find-shell-command-fn) :filtered-candidate-transformer (quote helm-findutils-transformer) :action-transformer (quote helm-transform-file-load-el) :persistent-action (quote helm-ff-kill-or-find-buffer-fname) :action (quote helm-type-file-actions) :keymap helm-generic-files-map :candidate-number-limit 9999 :requires-pattern 3)) nil [152450 152973])
            ("helm-findutils-transformer" function (:arguments ("candidates" "_source")) nil [152975 153978])
            ("helm-find--build-cmd-line" function nil nil [153980 155539])
            ("helm-find-shell-command-fn" function nil nil [155541 156901])
            ("helm-find-1" function (:arguments ("dir")) nil [156903 157171])
            ("helm-ff-find-sh-command" function (:arguments ("_candidate")) nil [157205 157335])
            ("helm-ff-run-find-sh-command" function (:user-visible-flag t) nil [157337 157540])
            ("put" code nil nil [157541 157588])
            ("helm-find" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [157640 158553])
            ("org-directory" variable nil nil [158555 158577])
            ("helm-find-files" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [158593 160358])
            ("helm-for-files" function (:user-visible-flag t) nil [160375 160782])
            ("helm-multi-files" function (:user-visible-flag t) nil [160799 161853])
            ("helm-recentf" function (:user-visible-flag t) nil [161870 162068])
            ("helm-files" package nil nil [162070 162091]))          
      :file "helm-files.el"
      :pointmax 162246
      :fsize 162245
      :lastmodtime '(22375 617 151310 592000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-plugin.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [797 814])
            ("helm" include nil nil [815 830])
            ("helm-utils" include nil nil [831 852])
            ("helm-make-info-source" function (:arguments ("source" "file")) nil [888 1195])
            ("helm-compile-source--info-index" function (:arguments ("source")) nil [1197 1367])
            ("add-to-list" code nil nil [1369 1446])
            ("helm-document-attribute" code nil nil [1448 1626])
            ("helm-compile-source--candidates-file" function (:arguments ("source")) nil [1693 2121])
            ("add-to-list" code nil nil [2122 2204])
            ("helm-p-candidates-file-init" function nil nil [2206 2590])
            ("helm-document-attribute" code nil nil [2592 3020])
            ("helm-compile-source--persistent-help" function (:arguments ("source")) nil [3119 3289])
            ("add-to-list" code nil nil [3290 3372])
            ("helm-persistent-help-string" function nil nil [3374 4065])
            ("helm-document-attribute" code nil nil [4103 4280])
            ("helm-plugin" package nil nil [4283 4305]))          
      :file "helm-plugin.el"
      :pointmax 4458
      :fsize 4457
      :lastmodtime '(22375 616 883310 589000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-grep.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [804 821])
            ("helm" include nil nil [822 837])
            ("helm-help" include nil nil [838 858])
            ("helm-regexp" include nil nil [859 881])
            ("wgrep-helm" include nil nil [922 949])
            ("declare-function" code nil nil [951 1001])
            ("declare-function" code nil nil [1002 1067])
            ("declare-function" code nil nil [1068 1103])
            ("declare-function" code nil nil [1104 1159])
            ("declare-function" code nil nil [1160 1219])
            ("declare-function" code nil nil [1220 1272])
            ("helm--ansi-color-regexp" variable nil nil [1273 1305])
            ("helm-grep" customgroup (:user-visible-flag t) nil [1309 1402])
            ("helm-grep-default-command" variable (:default-value "grep --color=always -a -d skip %e -n%cH -e %p %f") nil [1404 4049])
            ("helm-grep-default-recurse-command" variable (:default-value "grep --color=always -a -d recurse %e -n%cH -e %p %f") nil [4051 4328])
            ("helm-default-zgrep-command" variable (:default-value "zgrep --color=always -a -n%cH -e %p %f") nil [4330 4693])
            ("helm-pdfgrep-default-command" variable (:default-value "pdfgrep --color always -niH %s %s") nil [4695 4982])
            ("helm-grep-use-ioccur-style-keys" variable (:default-value t) nil [4984 5109])
            ("helm-pdfgrep-default-read-command" variable nil nil [5111 5455])
            ("helm-grep-max-length-history" variable (:default-value 100) nil [5457 5597])
            ("helm-zgrep-file-extension-regexp" variable (:default-value ".*\\(\\.gz\\|\\.bz\\|\\.xz\\|\\.lzma\\)$") nil [5599 5774])
            ("helm-grep-preferred-ext" variable nil nil [5776 5906])
            ("helm-grep-save-buffer-name-no-confirm" variable nil nil [5908 6050])
            ("helm-grep-ignored-files" variable (:default-value (cons ".#*" (delq nil (mapcar (lambda (s) (unless (string-match-p "/\\'" s) (concat "*" s))) completion-ignored-extensions)))) nil [6052 6418])
            ("helm-grep-ignored-directories" variable (:default-value helm-walk-ignore-directories) nil [6420 6616])
            ("helm-grep-truncate-lines" variable (:default-value t) nil [6618 6756])
            ("helm-grep-file-path-style" variable (:default-value (quote basename)) nil [6758 7226])
            ("helm-grep-actions" variable (:default-value (helm-make-actions "Find File" (quote helm-grep-action) "Find file other frame" (quote helm-grep-other-frame) (lambda nil (and (locate-library "elscreen") "Find file in Elscreen")) (quote helm-grep-jump-elscreen) "Save results in grep buffer" (quote helm-grep-save-results) "Find file other window" (quote helm-grep-other-window))) nil [7228 7693])
            ("helm-grep-faces" customgroup (:user-visible-flag t) nil [7713 7845])
            ("helm-grep-match" variable
               (:default-value (quote ((((background light)) :foreground "#b00000") (((background dark)) :foreground "gold1")))
                :type "face")
                nil [7847 8036])
            ("helm-grep-file" variable
               (:default-value (quote ((t (:foreground "BlueViolet" :underline t))))
                :type "face")
                nil [8038 8200])
            ("helm-grep-lineno" variable
               (:default-value (quote ((t (:foreground "Darkorange1"))))
                :type "face")
                nil [8202 8339])
            ("helm-grep-finish" variable
               (:default-value (quote ((t (:foreground "Green"))))
                :type "face")
                nil [8341 8474])
            ("helm-grep-cmd-line" variable
               (:default-value (quote ((t (:inherit diff-added))))
                :type "face")
                nil [8476 8625])
            ("helm-grep-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "M-<down>") (quote helm-goto-next-file)) (define-key map (kbd "M-<up>") (quote helm-goto-precedent-file)) (define-key map (kbd "C-c o") (quote helm-grep-run-other-window-action)) (define-key map (kbd "C-c C-o") (quote helm-grep-run-other-frame-action)) (define-key map (kbd "C-w") (quote helm-yank-text-at-point)) (define-key map (kbd "C-x C-s") (quote helm-grep-run-save-buffer)) (when helm-grep-use-ioccur-style-keys (define-key map (kbd "<right>") (quote helm-execute-persistent-action)) (define-key map (kbd "<left>") (quote helm-grep-run-default-action))) (delq nil map))) nil [8647 9375])
            ("helm-pdfgrep-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "M-<down>") (quote helm-goto-next-file)) (define-key map (kbd "M-<up>") (quote helm-goto-precedent-file)) (define-key map (kbd "C-w") (quote helm-yank-text-at-point)) map)) nil [9377 9698])
            ("helm-grep-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd "RET") (quote helm-grep-mode-jump)) (define-key map (kbd "C-o") (quote helm-grep-mode-jump-other-window)) (define-key map (kbd "<C-down>") (quote helm-grep-mode-jump-other-window-forward)) (define-key map (kbd "<C-up>") (quote helm-grep-mode-jump-other-window-backward)) (define-key map (kbd "<M-down>") (quote helm-gm-next-file)) (define-key map (kbd "<M-up>") (quote helm-gm-precedent-file)) (define-key map (kbd "M-n") (quote helm-grep-mode-jump-other-window-forward)) (define-key map (kbd "M-p") (quote helm-grep-mode-jump-other-window-backward)) (define-key map (kbd "M-N") (quote helm-gm-next-file)) (define-key map (kbd "M-P") (quote helm-gm-precedent-file)) map)) nil [9700 10463])
            ("helm-rzgrep-cache" variable (:default-value (make-hash-table :test (quote equal))) nil [10492 10549])
            ("helm-grep-default-function" variable (:default-value (quote helm-grep-init)) nil [10550 10601])
            ("helm-zgrep-recurse-flag" variable nil nil [10602 10638])
            ("helm-grep-history" variable nil nil [10639 10669])
            ("helm-grep-last-targets" variable nil nil [10670 10705])
            ("helm-grep-include-files" variable nil nil [10706 10742])
            ("helm-grep-in-recurse" variable nil nil [10743 10776])
            ("helm-grep-use-zgrep" variable nil nil [10777 10809])
            ("helm-grep-default-directory-fn" variable nil nil [10810 10994])
            ("helm-pdfgrep-targets" variable nil nil [10995 11028])
            ("helm-grep-last-cmd-line" variable nil nil [11029 11065])
            ("helm-grep-split-line-regexp" variable (:default-value "^\\([[:lower:][:upper:]]?:?.*?\\):\\([0-9]+\\):\\(.*\\)") nil [11066 11160])
            ("helm-grep-prepare-candidates" function (:arguments ("candidates" "in-directory")) nil [11179 14303])
            ("helm-grep-command" function (:arguments ("recursive" "grep")) nil [14305 14658])
            ("cl-defun" code nil nil [14660 15286])
            ("helm-grep--prepare-cmd-line" function (:arguments ("only-files" "include" "zgrep")) nil [15288 18509])
            ("helm-grep-init" function (:arguments ("cmd-line")) nil [18511 22502])
            ("helm-grep-collect-candidates" function nil nil [22504 22834])
            ("helm-grep-action" function (:arguments ("candidate" "where" "mark")) nil [22856 25090])
            ("helm-grep-persistent-action" function (:arguments ("candidate")) nil [25092 25370])
            ("helm-grep-other-window" function (:arguments ("candidate")) nil [25372 25510])
            ("helm-grep-other-frame" function (:arguments ("candidate")) nil [25512 25647])
            ("helm-grep-jump-elscreen" function (:arguments ("candidate")) nil [25649 25780])
            ("helm-goto-next-or-prec-file" function (:arguments ("n")) nil [25782 27563])
            ("helm-goto-precedent-file" function (:user-visible-flag t) nil [27580 27768])
            ("put" code nil nil [27769 27813])
            ("helm-goto-next-file" function (:user-visible-flag t) nil [27830 27986])
            ("helm-grep-run-default-action" function (:user-visible-flag t) nil [27988 28169])
            ("put" code nil nil [28170 28218])
            ("helm-grep-run-other-window-action" function (:user-visible-flag t) nil [28220 28422])
            ("put" code nil nil [28423 28476])
            ("helm-grep-run-other-frame-action" function (:user-visible-flag t) nil [28478 28677])
            ("put" code nil nil [28678 28730])
            ("helm-grep-run-save-buffer" function (:user-visible-flag t) nil [28732 28921])
            ("put" code nil nil [28922 28967])
            ("helm-grep-save-results" function (:arguments ("candidate")) nil [28996 29075])
            ("helm-grep-save-results-1" function nil nil [29077 30731])
            ("define-derived-mode" code nil nil [30733 31118])
            ("put" code nil nil [31119 31153])
            ("helm-grep-mode--revert-buffer-function" function (:arguments ("_ignore-auto" "_noconfirm")) nil [31155 31796])
            ("helm-grep-mode--sentinel" function (:arguments ("process" "event")) nil [31798 32692])
            ("helm-gm-next-file" function nil nil [32694 32772])
            ("helm-gm-precedent-file" function nil nil [32774 32858])
            ("helm-grep-mode-jump" function nil nil [32860 32979])
            ("helm-grep-mode-jump-other-window-1" function (:arguments ("arg")) nil [32981 33299])
            ("helm-grep-mode-jump-other-window-forward" function nil nil [33301 33409])
            ("helm-grep-mode-jump-other-window-backward" function nil nil [33411 33521])
            ("helm-grep-mode-jump-other-window" function nil nil [33523 33747])
            ("helm-grep-hack-types" function nil nil [33776 34727])
            ("helm-grep-ack-types-transformer" function (:arguments ("candidates" "_source")) nil [34729 34928])
            ("helm-grep-ack-types-cache" variable nil nil [34930 34968])
            ("helm-grep-read-ack-type" function nil nil [34969 35591])
            ("helm-grep-guess-extensions" function (:arguments ("files")) nil [35621 36576])
            ("helm-grep-get-file-extensions" function (:arguments ("files")) nil [36578 37534])
            ("helm-grep-class" type
               (:superclasses "helm-source-async"
                :members 
                  ( ("candidates-process" variable (:default-value "(quote helm-grep-collect-candidates)") nil nil)
                    ("filter-one-by-one" variable (:default-value "(quote helm-grep-filter-one-by-one)") nil nil)
                    ("keymap" variable (:default-value "helm-grep-map") nil nil)
                    ("nohighlight" variable (:default-value "t") nil nil)
                    ("nomark" variable (:default-value "t") nil nil)
                    ("candidate-number-limit" variable (:default-value "9999") nil nil)
                    ("help-message" variable (:default-value "(quote helm-grep-help-message)") nil nil)
                    ("history" variable (:default-value "(quote helm-grep-history)") nil nil)
                    ("action" variable (:default-value "(quote helm-grep-actions)") nil nil)
                    ("persistent-action" variable (:default-value "(quote helm-grep-persistent-action)") nil nil)
                    ("persistent-help" variable (:default-value "Jump to line (`C-u' Record in mark ring)") nil nil)
                    ("requires-pattern" variable (:default-value "2") nil nil))                  
                :type "class")
                nil [37562 38172])
            ("helm-source-grep" variable nil nil [38174 38203])
            ("helm-do-grep-1" function (:arguments ("targets" "recurse" "grep" "exts" "default-input" "input")) nil [38205 42296])
            ("helm-ff-zgrep-1" function (:arguments ("flist" "recursive")) nil [42316 43097])
            ("helm-grep-split-line" function (:arguments ("line")) nil [43124 43600])
            ("helm-grep--filter-candidate-1" function (:arguments ("candidate" "dir")) nil [43602 44919])
            ("helm-grep-filter-one-by-one" function (:arguments ("candidate")) nil [44921 45549])
            ("helm-grep-highlight-match" function (:arguments ("str" "multi-match")) nil [45551 46877])
            ("helm-grep-buffers-1" function (:arguments ("candidate" "zgrep")) nil [46913 48515])
            ("helm-grep-buffers" function (:arguments ("candidate")) nil [48517 48616])
            ("helm-zgrep-buffers" function (:arguments ("candidate")) nil [48618 48726])
            ("helm-pdfgrep-default-function" variable (:default-value (quote helm-pdfgrep-init)) nil [48862 48919])
            ("helm-pdfgrep-init" function (:arguments ("only-files")) nil [48920 50843])
            ("helm-do-pdfgrep-1" function (:arguments ("only")) nil [50845 52371])
            ("helm-pdfgrep-action" function (:arguments ("candidate")) nil [52373 52448])
            ("helm-pdfgrep-action-1" function (:arguments ("_split" "pageno" "fname")) nil [52450 52698])
            ("helm-grep-ag-command" variable (:default-value "ag --line-numbers -S --hidden --color --nogroup %s %s %s") nil [52827 53358])
            ("helm-grep--ag-command" function nil nil [53360 53436])
            ("helm-grep-ag-get-types" function nil nil [53438 53849])
            ("helm-grep-ag-prepare-cmd-line" function (:arguments ("pattern" "directory" "type")) nil [53851 54770])
            ("helm-grep-ag-init" function (:arguments ("directory" "type")) nil [54772 57268])
            ("helm-grep-ag-class" type
               (:superclasses "helm-source-async"
                :members 
                  ( ("nohighlight" variable (:default-value "t") nil nil)
                    ("keymap" variable (:default-value "helm-grep-map") nil nil)
                    ("help-message" variable (:default-value "(quote helm-grep-help-message)") nil nil)
                    ("filter-one-by-one" variable (:default-value "(quote helm-grep-filter-one-by-one)") nil nil)
                    ("persistent-action" variable (:default-value "(quote helm-grep-persistent-action)") nil nil)
                    ("candidate-number-limit" variable (:default-value "99999") nil nil)
                    ("requires-pattern" variable (:default-value "2") nil nil)
                    ("nomark" variable (:default-value "t") nil nil)
                    ("action" variable (:default-value "(quote helm-grep-actions)") nil nil))                  
                :type "class")
                nil [57270 57704])
            ("helm-source-grep-ag" variable nil nil [57706 57738])
            ("helm-grep-ag-1" function (:arguments ("directory" "type")) nil [57740 58388])
            ("helm-grep-ag" function (:arguments ("directory" "with-types")) nil [58390 58923])
            ("helm-grep-git-grep-command" variable (:default-value "git --no-pager grep -n%cH --color=always --exclude-standard --no-index --full-name -e %p -- %f") nil [58944 59603])
            ("helm-grep-git-1" function (:arguments ("directory" "all" "default" "input")) nil [59605 60559])
            ("helm-do-grep-ag" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [60578 60825])
            ("helm-grep-do-git-grep" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [60842 61077])
            ("helm-grep" package nil nil [61080 61100]))          
      :file "helm-grep.el"
      :pointmax 61254
      :fsize 61253
      :lastmodtime '(22375 617 615310 597000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-regexp.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [837 854])
            ("helm" include nil nil [855 870])
            ("helm-help" include nil nil [871 891])
            ("helm-utils" include nil nil [892 913])
            ("helm-plugin" include nil nil [914 936])
            ("declare-function" code nil nil [938 997])
            ("helm-regexp" customgroup (:user-visible-flag t) nil [1001 1098])
            ("helm-moccur-always-search-in-current" variable nil nil [1100 1259])
            ("helm-moccur-use-ioccur-style-keys" variable (:default-value t) nil [1261 1417])
            ("helm-moccur-auto-update-on-resume" variable nil nil [1419 2101])
            ("helm-source-multi-occur-actions" variable (:default-value (quote (("Go to Line" . helm-moccur-goto-line) ("Goto line other window" . helm-moccur-goto-line-ow) ("Goto line new frame" . helm-moccur-goto-line-of)))) nil [2103 2424])
            ("helm-moccur-truncate-lines" variable (:default-value t) nil [2426 2572])
            ("helm-moccur-buffer" variable
               (:default-value (quote ((t (:foreground "DarkTurquoise" :underline t))))
                :type "face")
                nil [2576 2728])
            ("helm-resume-need-update" variable
               (:default-value (quote ((t (:background "red"))))
                :type "face")
                nil [2730 2875])
            ("helm-moccur-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "M-<down>") (quote helm-goto-next-file)) (define-key map (kbd "M-<up>") (quote helm-goto-precedent-file)) (define-key map (kbd "C-w") (quote helm-yank-text-at-point)) (define-key map (kbd "C-c o") (quote helm-moccur-run-goto-line-ow)) (define-key map (kbd "C-c C-o") (quote helm-moccur-run-goto-line-of)) (define-key map (kbd "C-x C-s") (quote helm-moccur-run-save-buffer)) (when helm-moccur-use-ioccur-style-keys (define-key map (kbd "<right>") (quote helm-execute-persistent-action)) (define-key map (kbd "<left>") (quote helm-moccur-run-default-action))) (delq nil map))) nil [2879 3608])
            ("helm-build-regexp-history" variable nil nil [3628 3666])
            ("helm-occur-history" variable nil nil [3667 3698])
            ("helm-query-replace-regexp" function (:arguments ("_candidate")) nil [3700 4042])
            ("helm-kill-regexp-as-sexp" function (:arguments ("_candidate")) nil [4044 4195])
            ("helm-kill-regexp" function (:arguments ("_candidate")) nil [4197 4314])
            ("helm-query-replace-args" function (:arguments ("regexp")) nil [4316 4883])
            ("helm-source-regexp" variable (:default-value (helm-build-in-buffer-source "Regexp Builder" :init (lambda nil (helm-init-candidates-in-buffer (quote global) (with-temp-buffer (insert-buffer-substring helm-current-buffer) (buffer-string)))) :get-line (function helm-regexp-get-line) :persistent-action (function helm-regexp-persistent-action) :persistent-help "Show this line" :multiline t :matchplugin nil :requires-pattern 2 :mode-line "Press TAB to select action." :action (quote (("Kill Regexp as sexp" . helm-kill-regexp-as-sexp) ("Query Replace Regexp (C-u Not inside word.)" . helm-query-replace-regexp) ("Kill Regexp" . helm-kill-regexp))))) nil [4885 5642])
            ("helm-regexp-get-line" function (:arguments ("s" "e")) nil [5644 6100])
            ("helm-regexp-persistent-action" function (:arguments ("pt")) nil [6102 6198])
            ("helm-regexp-kill-new" function (:arguments ("input")) nil [6200 6286])
            ("helm-source-occur" variable nil nil [6306 6336])
            ("helm-occur-init-source" function nil nil [6337 6490])
            ("helm-multi-occur-buffer-list" variable nil nil [6529 6570])
            ("helm-multi-occur-buffer-tick" variable nil nil [6571 6612])
            ("helm-moccur-init" function nil nil [6613 7082])
            ("helm-moccur--next-or-previous-char" function nil nil [7084 7228])
            ("helm-moccur-get-line" function (:arguments ("beg" "end")) nil [7230 8438])
            ("cl-defun" code nil nil [8440 9683])
            ("helm-moccur-persistent-action" function (:arguments ("candidate")) nil [9685 9802])
            ("helm-moccur-goto-line" function (:arguments ("candidate")) nil [9804 10055])
            ("helm-moccur-goto-line-ow" function (:arguments ("candidate")) nil [10065 10344])
            ("helm-moccur-goto-line-of" function (:arguments ("candidate")) nil [10354 10626])
            ("helm-moccur-run-goto-line-ow" function (:user-visible-flag t) nil [10636 10839])
            ("put" code nil nil [10840 10888])
            ("helm-moccur-run-goto-line-of" function (:user-visible-flag t) nil [10890 11090])
            ("put" code nil nil [11091 11139])
            ("helm-moccur-run-default-action" function nil nil [11141 11278])
            ("put" code nil nil [11279 11329])
            ("helm-source-moccur" variable nil nil [11331 11362])
            ("helm-source-multi-occur" type
               (:superclasses "helm-source-in-buffer"
                :members 
                  ( ("init" variable (:default-value "(lambda nil (require (quote helm-grep)) (helm-moccur-init))") nil nil)
                    ("filter-one-by-one" variable (:default-value "(quote helm-moccur-filter-one-by-one)") nil nil)
                    ("get-line" variable (:default-value "helm-moccur-get-line") nil nil)
                    ("nohighlight" variable (:default-value "t") nil nil)
                    ("nomark" variable (:default-value "t") nil nil)
                    ("migemo" variable (:default-value "t") nil nil)
                    ("action" variable (:default-value "(quote helm-source-multi-occur-actions)") nil nil)
                    ("persistent-action" variable (:default-value "(quote helm-moccur-persistent-action)") nil nil)
                    ("persistent-help" variable (:default-value "Go to line") nil nil)
                    ("resume" variable (:default-value "(quote helm-moccur-resume-fn)") nil nil)
                    ("candidate-number-limit" variable (:default-value "9999") nil nil)
                    ("help-message" variable (:default-value "(quote helm-moccur-help-message)") nil nil)
                    ("keymap" variable (:default-value "helm-moccur-map") nil nil)
                    ("history" variable (:default-value "(quote helm-occur-history)") nil nil)
                    ("requires-pattern" variable (:default-value "2") nil nil))                  
                :type "class")
                nil [11363 12142])
            ("helm-moccur-resume-fn" function nil nil [12144 15100])
            ("helm-moccur-filter-one-by-one" function (:arguments ("candidate")) nil [15102 15792])
            ("helm-multi-occur-1" function (:arguments ("buffers" "input")) nil [15794 16818])
            ("helm-moccur-run-save-buffer" function (:user-visible-flag t) nil [16820 17012])
            ("put" code nil nil [17013 17060])
            ("helm-moccur-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd "RET") (quote helm-moccur-mode-goto-line)) (define-key map (kbd "C-o") (quote helm-moccur-mode-goto-line-ow)) (define-key map (kbd "<C-down>") (quote helm-moccur-mode-goto-line-ow-forward)) (define-key map (kbd "<C-up>") (quote helm-moccur-mode-goto-line-ow-backward)) (define-key map (kbd "<M-down>") (quote helm-gm-next-file)) (define-key map (kbd "<M-up>") (quote helm-gm-precedent-file)) (define-key map (kbd "M-n") (quote helm-moccur-mode-goto-line-ow-forward)) (define-key map (kbd "M-p") (quote helm-moccur-mode-goto-line-ow-backward)) (define-key map (kbd "M-N") (quote helm-gm-next-file)) (define-key map (kbd "M-P") (quote helm-gm-precedent-file)) map)) nil [17091 17848])
            ("helm-moccur-mode-goto-line" function nil nil [17850 17991])
            ("helm-moccur-mode-goto-line-ow" function nil nil [17993 18140])
            ("helm-moccur-mode-goto-line-ow-forward-1" function (:arguments ("arg")) nil [18142 18369])
            ("helm-moccur-mode-goto-line-ow-forward" function nil nil [18371 18481])
            ("helm-moccur-mode-goto-line-ow-backward" function nil nil [18483 18595])
            ("helm-moccur-save-results" function (:arguments ("_candidate")) nil [18597 19758])
            ("define-derived-mode" code nil nil [19775 20180])
            ("put" code nil nil [20181 20217])
            ("helm-moccur-mode--revert-buffer-function" function (:arguments ("_ignore-auto" "_noconfirm")) nil [20219 22021])
            ("helm-regexp" function (:user-visible-flag t) nil [22071 22626])
            ("helm-occur" function (:user-visible-flag t) nil [22643 23454])
            ("helm-occur-from-isearch" function (:user-visible-flag t) nil [23471 24249])
            ("helm-multi-occur-from-isearch" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [24266 25269])
            ("helm-regexp" package nil nil [25272 25294]))          
      :file "helm-regexp.el"
      :pointmax 25450
      :fsize 25449
      :lastmodtime '(22375 617 415310 595000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-external.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [844 861])
            ("helm" include nil nil [862 877])
            ("helm-help" include nil nil [878 898])
            ("helm-net" include nil nil [899 918])
            ("helm-external" customgroup (:user-visible-flag t) nil [922 1024])
            ("helm-raise-command" variable nil nil [1026 1269])
            ("helm-external-programs-associations" variable nil nil [1271 1577])
            ("helm-default-external-file-browser" variable (:default-value "nautilus") nil [1579 1954])
            ("helm-external-command-history" variable nil nil [1972 2014])
            ("helm-external-commands-list" variable nil nil [2015 2191])
            ("helm-external-commands-list-1" function (:arguments ("sort")) nil [2193 3277])
            ("helm-run-or-raise" function (:arguments ("exe" "file")) nil [3279 4886])
            ("helm-get-mailcap-for-file" function (:arguments ("filename")) nil [4888 5358])
            ("helm-get-default-program-for-file" function (:arguments ("filename")) nil [5360 5941])
            ("helm-open-file-externally" function (:arguments ("file")) nil [5943 8263])
            ("helm-run-external-command" function
               (:user-visible-flag t
                :arguments ("program"))
                nil [8280 9083])
            ("helm-external" package nil nil [9086 9110]))          
      :file "helm-external.el"
      :pointmax 9265
      :fsize 9264
      :lastmodtime '(22375 616 343310 583000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-locate.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [952 969])
            ("helm" include nil nil [970 985])
            ("helm-types" include nil nil [986 1007])
            ("helm-help" include nil nil [1008 1028])
            ("helm-locate" customgroup (:user-visible-flag t) nil [1032 1129])
            ("helm-locate-db-file-regexp" variable (:default-value "m?locate.db$") nil [1131 1297])
            ("helm-ff-locate-db-filename" variable (:default-value "locate.db") nil [1299 1685])
            ("helm-locate-command" variable nil nil [1687 2461])
            ("helm-locate-create-db-command" variable (:default-value "updatedb -l 0 -o %s -U %s") nil [2463 2624])
            ("helm-locate-case-fold-search" variable (:default-value helm-case-fold-search) nil [2626 3067])
            ("helm-locate-fuzzy-match" variable nil nil [3069 3191])
            ("helm-locate-project-list" variable nil nil [3193 3430])
            ("helm-locate-recursive-dirs-command" variable (:default-value "locate -i -e -A --regex ^%s %s.*$") nil [3432 3688])
            ("helm-generic-files-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "C-]") (quote helm-ff-run-toggle-basename)) (define-key map (kbd "C-s") (quote helm-ff-run-grep)) (define-key map (kbd "M-g s") (quote helm-ff-run-grep)) (define-key map (kbd "M-g z") (quote helm-ff-run-zgrep)) (define-key map (kbd "M-g p") (quote helm-ff-run-pdfgrep)) (define-key map (kbd "C-c g") (quote helm-ff-run-gid)) (define-key map (kbd "M-R") (quote helm-ff-run-rename-file)) (define-key map (kbd "M-C") (quote helm-ff-run-copy-file)) (define-key map (kbd "M-B") (quote helm-ff-run-byte-compile-file)) (define-key map (kbd "M-L") (quote helm-ff-run-load-file)) (define-key map (kbd "M-S") (quote helm-ff-run-symlink-file)) (define-key map (kbd "M-H") (quote helm-ff-run-hardlink-file)) (define-key map (kbd "M-D") (quote helm-ff-run-delete-file)) (define-key map (kbd "C-=") (quote helm-ff-run-ediff-file)) (define-key map (kbd "C-c =") (quote helm-ff-run-ediff-merge-file)) (define-key map (kbd "C-c o") (quote helm-ff-run-switch-other-window)) (define-key map (kbd "C-c C-o") (quote helm-ff-run-switch-other-frame)) (define-key map (kbd "M-i") (quote helm-ff-properties-persistent)) (define-key map (kbd "C-c C-x") (quote helm-ff-run-open-file-externally)) (define-key map (kbd "C-c X") (quote helm-ff-run-open-file-with-default-tool)) (define-key map (kbd "M-.") (quote helm-ff-run-etags)) (define-key map (kbd "C-w") (quote helm-yank-text-at-point)) (define-key map (kbd "C-c @") (quote helm-ff-run-insert-org-link)) map)) nil [3692 5286])
            ("helm-locate-finish" variable
               (:default-value (quote ((t (:foreground "Green"))))
                :type "face")
                nil [5290 5431])
            ("helm-ff-find-locatedb" function (:arguments ("from-ff")) nil [5435 6345])
            ("helm-locate-create-db-default-function" function (:arguments ("db-name" "directory")) nil [6348 6628])
            ("helm-locate-create-db-function" variable (:default-value (function helm-locate-create-db-default-function)) nil [6630 6847])
            ("helm-locate-1" function (:arguments ("localdb" "init" "from-ff" "default")) nil [6849 9149])
            ("helm-locate-set-command" function nil nil [9151 9495])
            ("helm-file-name-history" variable nil nil [9497 9532])
            ("helm-locate-with-db" function (:arguments ("db" "initial-input" "default")) nil [9533 10773])
            ("helm-locate-init" function nil nil [10775 13684])
            ("helm-locate-source" type
               (:interfaces ("helm-type-file")
                :superclasses "helm-source-async"
                :members 
                  ( ("init" variable (:default-value "(quote helm-locate-set-command)") nil nil)
                    ("candidates-process" variable (:default-value "(quote helm-locate-init)") nil nil)
                    ("requires-pattern" variable (:default-value "3") nil nil)
                    ("history" variable (:default-value "(quote helm-file-name-history)") nil nil)
                    ("persistent-action" variable (:default-value "(quote helm-ff-kill-or-find-buffer-fname)") nil nil)
                    ("candidate-number-limit" variable (:default-value "9999") nil nil))                  
                :type "class")
                nil [13686 14040])
            ("helm-source-locate" variable (:default-value (helm-make-source "Locate" (quote helm-locate-source) :pattern-transformer (quote helm-locate-pattern-transformer))) nil [14042 14177])
            ("helm-locate-pattern-transformer" function (:arguments ("pattern")) nil [14179 14578])
            ("helm-locate-find-dbs-in-projects" function (:arguments ("update")) nil [14580 15334])
            ("helm-locate-subdirs-source" type
               (:superclasses "helm-source-in-buffer"
                :members 
                  ( ("basedir" variable (:default-value "nil") nil nil)
                    ("subdir" variable (:default-value "nil") nil nil)
                    ("data" variable (:default-value "(function helm-locate-init-subdirs)") nil nil))                  
                :type "class")
                nil [15373 15647])
            ("helm-locate-init-subdirs" function nil nil [15649 16076])
            ("helm-projects-find-files" function
               (:user-visible-flag t
                :arguments ("update"))
                nil [16093 16645])
            ("helm-locate" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [16662 17270])
            ("helm-locate" package nil nil [17272 17294]))          
      :file "helm-locate.el"
      :pointmax 17450
      :fsize 17449
      :lastmodtime '(22375 616 375310 583000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-bookmark.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [819 836])
            ("bookmark" include nil nil [837 856])
            ("helm" include nil nil [857 872])
            ("helm-help" include nil nil [873 893])
            ("helm-types" include nil nil [894 915])
            ("helm-utils" include nil nil [916 937])
            ("helm-info" include nil nil [938 958])
            ("helm-adaptive" include nil nil [959 983])
            ("helm-net" include nil nil [984 1003])
            ("declare-function" code nil nil [1005 1090])
            ("declare-function" code nil nil [1091 1138])
            ("declare-function" code nil nil [1139 1271])
            ("helm-bookmark" customgroup (:user-visible-flag t) nil [1275 1363])
            ("helm-bookmark-show-location" variable nil nil [1365 1491])
            ("helm-bookmark-default-filtered-sources" variable (:default-value (append (quote (helm-source-bookmark-files&dirs helm-source-bookmark-helm-find-files helm-source-bookmark-info helm-source-bookmark-gnus helm-source-bookmark-man helm-source-bookmark-images helm-source-bookmark-w3m)) (and (locate-library "addressbook-bookmark") (list (quote helm-source-bookmark-addressbook))) (list (quote helm-source-bookmark-uncategorized) (quote helm-source-bookmark-set)))) nil [1493 2150])
            ("helm-bookmark-addressbook-actions" variable (:default-value (quote (("Show Contact(s)" lambda (candidate) (let* ((contacts (helm-marked-candidates)) (current-prefix-arg helm-current-prefix-arg)) (bookmark-jump (helm-bookmark-get-bookmark-from-name (car contacts))) (helm-aif (cdr contacts) (let ((current-prefix-arg (quote (4)))) (cl-loop for bmk in it do (bookmark-jump (helm-bookmark-get-bookmark-from-name bmk))))))) ("Mail To" . helm-bookmark-addressbook-send-mail-1) ("Mail Cc" lambda (_candidate) (helm-bookmark-addressbook-send-mail-1 nil (quote cc))) ("Mail Bcc" lambda (_candidate) (helm-bookmark-addressbook-send-mail-1 nil (quote bcc))) ("Edit Bookmark" lambda (candidate) (let ((bmk (helm-bookmark-get-bookmark-from-name candidate))) (addressbook-bookmark-edit (assoc bmk bookmark-alist)))) ("Delete bookmark(s)" . helm-delete-marked-bookmarks) ("Insert Email at point" lambda (candidate) (let* ((bmk (helm-bookmark-get-bookmark-from-name candidate)) (mlist (split-string (assoc-default (quote email) (assoc bmk bookmark-alist)) ", "))) (insert (if (> (length mlist) 1) (helm-comp-read "Insert Mail Address: " mlist :must-match t) (car mlist))))) ("Show annotation" lambda (candidate) (let ((bmk (helm-bookmark-get-bookmark-from-name candidate))) (bookmark-show-annotation bmk))) ("Edit annotation" lambda (candidate) (let ((bmk (helm-bookmark-get-bookmark-from-name candidate))) (bookmark-edit-annotation bmk))) ("Show Google map" lambda (candidate) (let* ((bmk (helm-bookmark-get-bookmark-from-name candidate)) (full-bmk (assoc bmk bookmark-alist))) (addressbook-google-map full-bmk)))))) nil [2152 4494])
            ("helm-bookmark-info" variable
               (:default-value (quote ((t (:foreground "green"))))
                :type "face")
                nil [4498 4642])
            ("helm-bookmark-w3m" variable
               (:default-value (quote ((t (:foreground "yellow"))))
                :type "face")
                nil [4644 4788])
            ("helm-bookmark-gnus" variable
               (:default-value (quote ((t (:foreground "magenta"))))
                :type "face")
                nil [4790 4911])
            ("helm-bookmark-man" variable
               (:default-value (quote ((t (:foreground "Orange4"))))
                :type "face")
                nil [4913 5038])
            ("helm-bookmark-file" variable
               (:default-value (quote ((t (:foreground "Deepskyblue2"))))
                :type "face")
                nil [5040 5166])
            ("helm-bookmark-directory" variable
               (:default-value (quote ((t (:inherit helm-ff-directory))))
                :type "face")
                nil [5168 5299])
            ("helm-bookmark-addressbook" variable
               (:default-value (quote ((t (:foreground "tomato"))))
                :type "face")
                nil [5301 5435])
            ("helm-bookmark-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "C-c o") (quote helm-bookmark-run-jump-other-window)) (define-key map (kbd "C-d") (quote helm-bookmark-run-delete)) (define-key map (kbd "C-]") (quote helm-bookmark-toggle-filename)) (define-key map (kbd "M-e") (quote helm-bookmark-run-edit)) map)) nil [5439 5852])
            ("helm-source-basic-bookmarks" type
               (:interfaces ("helm-type-bookmark")
                :superclasses "helm-source-in-buffer"
                :members 
                  ( ("init" variable (:default-value "(lambda nil (bookmark-maybe-load-default-file) (helm-init-candidates-in-buffer (quote global) (bookmark-all-names)))") nil nil)
                    ("filtered-candidate-transformer" variable (:default-value "(quote helm-bookmark-transformer)") nil nil))                  
                :type "class")
                nil [5854 6234])
            ("helm-source-bookmarks" variable (:default-value (helm-make-source "Bookmarks" (quote helm-source-basic-bookmarks))) nil [6236 6365])
            ("helm-bookmark-transformer" function (:arguments ("candidates" "_source")) nil [6367 6972])
            ("helm-bookmark-toggle-filename-1" function (:arguments ("_candidate")) nil [6974 7669])
            ("helm-bookmark-toggle-filename" function (:user-visible-flag t) nil [7671 7947])
            ("put" code nil nil [7948 7997])
            ("helm-bookmark-jump" function (:arguments ("candidate")) nil [7999 8180])
            ("helm-bookmark-jump-other-window" function (:arguments ("candidate")) nil [8182 8300])
            ("helm-source-bookmark-set" variable (:default-value (helm-build-dummy-source "Set Bookmark" :filtered-candidate-transformer (lambda (_candidates _source) (list (or (and (not (string= helm-pattern "")) helm-pattern) "Enter a bookmark name to record"))) :action (quote (("Set bookmark" lambda (candidate) (if (string= helm-pattern "") (message "No bookmark name given for record") (bookmark-set candidate))))))) nil [8324 8915])
            ("helm-bookmark--non-file-filename" variable
               (:constant-flag t
                :default-value "   - no file -")
                nil [8937 9059])
            ("helm-bookmark-gnus-bookmark-p" function (:arguments ("bookmark")) nil [9061 9407])
            ("helm-bookmark-w3m-bookmark-p" function (:arguments ("bookmark")) nil [9409 9751])
            ("helm-bookmark-woman-bookmark-p" function (:arguments ("bookmark")) nil [9753 10096])
            ("helm-bookmark-man-bookmark-p" function (:arguments ("bookmark")) nil [10098 10431])
            ("helm-bookmark-woman-man-bookmark-p" function (:arguments ("bookmark")) nil [10433 10690])
            ("helm-bookmark-info-bookmark-p" function (:arguments ("bookmark")) nil [10692 10901])
            ("helm-bookmark-image-bookmark-p" function (:arguments ("bookmark")) nil [10903 11125])
            ("helm-bookmark-file-p" function (:arguments ("bookmark")) nil [11127 11552])
            ("helm-bookmark-helm-find-files-p" function (:arguments ("bookmark")) nil [11554 11786])
            ("helm-bookmark-addressbook-p" function (:arguments ("bookmark")) nil [11788 12146])
            ("helm-bookmark-uncategorized-bookmark-p" function (:arguments ("bookmark")) nil [12148 12794])
            ("helm-bookmark-filter-setup-alist" function (:arguments ("fn")) nil [12796 13072])
            ("w3m-async-exec" variable nil nil [13100 13123])
            ("helm-bookmark-jump-w3m" function (:arguments ("bookmark")) nil [13124 13774])
            ("defalias" code nil nil [14005 14067])
            ("defalias" code nil nil [14183 14233])
            ("defalias" code nil nil [14234 14280])
            ("defalias" code nil nil [14281 14332])
            ("defalias" code nil nil [14333 14389])
            ("defalias" code nil nil [14390 14449])
            ("defalias" code nil nil [14450 14504])
            ("defalias" code nil nil [14505 14558])
            ("defalias" code nil nil [14559 14608])
            ("helm-source-filtered-bookmarks" type
               (:interfaces ("helm-type-bookmark")
                :superclasses "helm-source-in-buffer"
                :members 
                  ( ("filtered-candidate-transformer" variable (:default-value "(quote (helm-adaptive-sort helm-highlight-bookmark))") nil nil))                  
                :type "class")
                nil [14649 14846])
            ("helm-bookmark-w3m-setup-alist" function nil nil [14870 15028])
            ("helm-source-bookmark-w3m" variable (:default-value (helm-make-source "Bookmark W3m" (quote helm-source-filtered-bookmarks) :init (lambda nil (bookmark-maybe-load-default-file) (helm-init-candidates-in-buffer (quote global) (helm-bookmark-w3m-setup-alist))))) nil [15030 15301])
            ("helm-bookmark-images-setup-alist" function nil nil [15317 15483])
            ("helm-source-bookmark-images" variable (:default-value (helm-make-source "Bookmark Images" (quote helm-source-filtered-bookmarks) :init (lambda nil (bookmark-maybe-load-default-file) (helm-init-candidates-in-buffer (quote global) (helm-bookmark-images-setup-alist))))) nil [15485 15765])
            ("helm-bookmark-man-setup-alist" function nil nil [15784 15948])
            ("helm-source-bookmark-man" variable (:default-value (helm-make-source "Bookmark Woman&Man" (quote helm-source-filtered-bookmarks) :init (lambda nil (bookmark-maybe-load-default-file) (helm-init-candidates-in-buffer (quote global) (helm-bookmark-man-setup-alist))))) nil [15950 16227])
            ("helm-bookmark-gnus-setup-alist" function nil nil [16241 16402])
            ("helm-source-bookmark-gnus" variable (:default-value (helm-make-source "Bookmark Gnus" (quote helm-source-filtered-bookmarks) :init (lambda nil (bookmark-maybe-load-default-file) (helm-init-candidates-in-buffer (quote global) (helm-bookmark-gnus-setup-alist))))) nil [16404 16678])
            ("helm-bookmark-info-setup-alist" function nil nil [16692 16853])
            ("helm-source-bookmark-info" variable (:default-value (helm-make-source "Bookmark Info" (quote helm-source-filtered-bookmarks) :init (lambda nil (bookmark-maybe-load-default-file) (helm-init-candidates-in-buffer (quote global) (helm-bookmark-info-setup-alist))))) nil [16855 17129])
            ("helm-bookmark-local-files-setup-alist" function nil nil [17160 17327])
            ("helm-source-bookmark-files&dirs" variable (:default-value (helm-make-source "Bookmark Files&Directories" (quote helm-source-filtered-bookmarks) :init (lambda nil (bookmark-maybe-load-default-file) (helm-init-candidates-in-buffer (quote global) (helm-bookmark-local-files-setup-alist))))) nil [17329 17629])
            ("helm-bookmark-helm-find-files-setup-alist" function nil nil [17664 17851])
            ("helm-source-bookmark-helm-find-files" variable (:default-value (helm-make-source "Bookmark helm-find-files sessions" (quote helm-source-filtered-bookmarks) :init (lambda nil (bookmark-maybe-load-default-file) (helm-init-candidates-in-buffer (quote global) (helm-bookmark-helm-find-files-setup-alist))) :persistent-action (lambda (_candidate) (ignore)) :persistent-help "Do nothing")) nil [17853 18269])
            ("helm-bookmark-uncategorized-setup-alist" function nil nil [18302 18490])
            ("helm-source-bookmark-uncategorized" variable (:default-value (helm-make-source "Bookmark uncategorized" (quote helm-source-filtered-bookmarks) :init (lambda nil (bookmark-maybe-load-default-file) (helm-init-candidates-in-buffer (quote global) (helm-bookmark-uncategorized-setup-alist))))) nil [18492 18793])
            ("helm-bookmark-addressbook-class" type
               (:superclasses "helm-source-in-buffer"
                :members 
                  ( ("init" variable (:default-value "(lambda nil (require (quote addressbook-bookmark) nil t) (bookmark-maybe-load-default-file) (helm-init-candidates-in-buffer (quote global) (helm-bookmark-addressbook-setup-alist)))") nil nil)
                    ("persistent-action" variable (:default-value "(lambda (candidate) (let ((bmk (helm-bookmark-get-bookmark-from-name candidate))) (bookmark--jump-via bmk (quote switch-to-buffer))))") nil nil)
                    ("persistent-help" variable (:default-value "Show contact - Prefix with C-u to append") nil nil)
                    ("mode-line" variable (:default-value "(list \"Contact(s)\" helm-mode-line-string)") nil nil)
                    ("filtered-candidate-transformer" variable (:default-value "(quote (helm-adaptive-sort helm-highlight-bookmark))") nil nil)
                    ("action" variable (:default-value "(quote helm-bookmark-addressbook-actions)") nil nil))                  
                :type "class")
                nil [18818 19812])
            ("helm-bookmark-addressbook-send-mail-1" function (:arguments ("_candidate" "cc")) nil [19814 20408])
            ("helm-bookmark-addressbook-setup-alist" function nil nil [20410 20583])
            ("helm-source-bookmark-addressbook" variable (:default-value (helm-make-source "Bookmark Addressbook" (quote helm-bookmark-addressbook-class))) nil [20585 20703])
            ("helm-highlight-bookmark" function (:arguments ("bookmarks" "_source")) nil [20726 25098])
            ("helm-bookmark-edit-bookmark" function (:arguments ("bookmark-name")) nil [25140 25634])
            ("helm-bookmark-edit-bookmark-1" function (:arguments ("bookmark-name" "handler")) nil [25636 27005])
            ("helm-bookmark-maybe-save-bookmark" function nil nil [27007 27244])
            ("helm-bookmark-rename" function
               (:user-visible-flag t
                :arguments ("old" "new" "batch"))
                nil [27246 28512])
            ("helm-bookmark-run-edit" function (:user-visible-flag t) nil [28514 28702])
            ("put" code nil nil [28703 28745])
            ("helm-bookmark-run-jump-other-window" function (:user-visible-flag t) nil [28749 28932])
            ("put" code nil nil [28933 28988])
            ("helm-bookmark-run-delete" function (:user-visible-flag t) nil [28990 29209])
            ("put" code nil nil [29210 29254])
            ("helm-bookmark-get-bookmark-from-name" function (:arguments ("bmk")) nil [29256 29513])
            ("helm-delete-marked-bookmarks" function (:arguments ("_ignore")) nil [29515 29745])
            ("helm-bookmarks" function (:user-visible-flag t) nil [29763 30017])
            ("helm-filtered-bookmarks" function (:user-visible-flag t) nil [30034 30512])
            ("helm-bookmark" package nil nil [30514 30538]))          
      :file "helm-bookmark.el"
      :pointmax 30696
      :fsize 30695
      :lastmodtime '(22375 617 583310 597000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-tags.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [798 815])
            ("helm" include nil nil [816 831])
            ("helm-help" include nil nil [832 852])
            ("helm-utils" include nil nil [853 874])
            ("helm-grep" include nil nil [875 895])
            ("helm-tags" customgroup (:user-visible-flag t) nil [899 992])
            ("helm-etags-tag-file-name" variable (:default-value "TAGS") nil [994 1099])
            ("helm-etags-tag-file-search-limit" variable (:default-value 10) nil [1101 1290])
            ("helm-etags-match-part-only" variable (:default-value (quote tag)) nil [1292 1722])
            ("helm-etags-execute-action-at-once-if-one" variable (:default-value t) nil [1724 1891])
            ("helm-tags-faces" customgroup (:user-visible-flag t) nil [1895 2033])
            ("helm-etags-file" variable
               (:default-value (quote ((t (:foreground "Lightgoldenrod4" :underline t))))
                :type "face")
                nil [2035 2196])
            ("helm-etags-run-switch-other-window" function (:user-visible-flag t) nil [2216 2481])
            ("put" code nil nil [2482 2536])
            ("helm-etags-run-switch-other-frame" function (:user-visible-flag t) nil [2538 2800])
            ("put" code nil nil [2801 2854])
            ("helm-etags-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "M-<down>") (quote helm-goto-next-file)) (define-key map (kbd "M-<up>") (quote helm-goto-precedent-file)) (define-key map (kbd "C-w") (quote helm-yank-text-at-point)) (define-key map (kbd "C-c o") (quote helm-etags-run-switch-other-window)) (define-key map (kbd "C-c C-o") (quote helm-etags-run-switch-other-frame)) map)) nil [2856 3320])
            ("helm-etags-mtime-alist" variable nil nil [3322 3415])
            ("helm-etags-cache" variable (:default-value (make-hash-table :test (quote equal))) nil [3416 3534])
            ("helm-etags-get-tag-file" function (:arguments ("directory")) nil [3536 4017])
            ("helm-etags-all-tag-files" function nil nil [4019 4513])
            ("helm-etags-find-tag-file-directory" function (:arguments ("current-dir")) nil [4515 5485])
            ("helm-etags-get-header-name" function (:arguments ("_x")) nil [5487 5676])
            ("helm-etags-create-buffer" function (:arguments ("file")) nil [5678 7058])
            ("helm-etags-init" function nil nil [7060 8071])
            ("helm-source-etags-select" variable nil nil [8073 8137])
            ("helm-etags-build-source" function nil nil [8139 9548])
            ("helm-etags-fuzzy-match" variable nil nil [9550 9804])
            ("find-tag-marker-ring" variable nil nil [9806 9835])
            ("helm-etags-action-goto" function (:arguments ("switcher" "candidate")) nil [9837 10692])
            ("helm-etags-mtime" function (:arguments ("file")) nil [10694 10811])
            ("helm-etags-file-modified-p" function (:arguments ("file")) nil [10813 11112])
            ("helm-etags-select" function
               (:user-visible-flag t
                :arguments ("reinit"))
                nil [11129 13271])
            ("helm-tags" package nil nil [13273 13293]))          
      :file "helm-tags.el"
      :pointmax 13447
      :fsize 13446
      :lastmodtime '(22375 616 579310 585000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-buffers.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [812 829])
            ("helm" include nil nil [830 845])
            ("helm-types" include nil nil [846 867])
            ("helm-utils" include nil nil [868 889])
            ("helm-elscreen" include nil nil [890 914])
            ("helm-grep" include nil nil [915 935])
            ("helm-plugin" include nil nil [936 958])
            ("helm-regexp" include nil nil [959 981])
            ("helm-help" include nil nil [982 1002])
            ("declare-function" code nil nil [1004 1059])
            ("declare-function" code nil nil [1060 1116])
            ("declare-function" code nil nil [1117 1162])
            ("declare-function" code nil nil [1163 1214])
            ("helm-buffers" customgroup (:user-visible-flag t) nil [1218 1317])
            ("helm-boring-buffer-regexp-list" variable (:default-value (quote ("\\` " "\\*helm" "\\*helm-mode" "\\*Echo Area" "\\*Minibuf"))) nil [1319 1693])
            ("helm-white-buffer-regexp-list" variable nil nil [1695 1932])
            ("helm-buffers-favorite-modes" variable (:default-value (quote (lisp-interaction-mode emacs-lisp-mode text-mode org-mode))) nil [1934 2268])
            ("helm-buffer-max-length" variable (:default-value 20) nil [2270 2538])
            ("helm-buffer-details-flag" variable (:default-value t) nil [2540 2672])
            ("helm-buffers-fuzzy-matching" variable nil nil [2674 2909])
            ("helm-buffer-skip-remote-checking" variable nil nil [2911 3056])
            ("helm-buffers-truncate-lines" variable (:default-value t) nil [3058 3196])
            ("helm-mini-default-sources" variable (:default-value (quote (helm-source-buffers-list helm-source-recentf helm-source-buffer-not-found))) nil [3198 3493])
            ("helm-buffers-end-truncated-string" variable (:default-value "...") nil [3495 3645])
            ("helm-buffers-faces" customgroup (:user-visible-flag t) nil [3665 3806])
            ("helm-buffer-saved-out" variable
               (:default-value (quote ((t (:foreground "red" :background "black"))))
                :type "face")
                nil [3808 3977])
            ("helm-buffer-not-saved" variable
               (:default-value (quote ((t (:foreground "Indianred2"))))
                :type "face")
                nil [3979 4135])
            ("helm-buffer-size" variable
               (:default-value (quote ((((background dark)) :foreground "RosyBrown") (((background light)) :foreground "SlateGray")))
                :type "face")
                nil [4137 4329])
            ("helm-buffer-process" variable
               (:default-value (quote ((t (:foreground "Sienna3"))))
                :type "face")
                nil [4331 4468])
            ("helm-buffer-directory" variable
               (:default-value (quote ((t (:foreground "DarkRed" :background "LightGray"))))
                :type "face")
                nil [4470 4643])
            ("helm-buffer-file" variable
               (:default-value (quote ((t :inherit font-lock-builtin-face)))
                :type "face")
                nil [4645 4798])
            ("helm-buffer-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "M-g s") (quote helm-buffer-run-zgrep)) (define-key map (kbd "C-s") (quote helm-buffers-run-multi-occur)) (define-key map (kbd "C-x C-d") (quote helm-buffers-run-browse-project)) (define-key map (kbd "C-c o") (quote helm-buffer-switch-other-window)) (define-key map (kbd "C-c C-o") (quote helm-buffer-switch-other-frame)) (define-key map (kbd "C-c =") (quote helm-buffer-run-ediff)) (define-key map (kbd "M-=") (quote helm-buffer-run-ediff-merge)) (define-key map (kbd "C-=") (quote helm-buffer-diff-persistent)) (define-key map (kbd "M-U") (quote helm-buffer-revert-persistent)) (define-key map (kbd "C-c d") (quote helm-buffer-run-kill-persistent)) (define-key map (kbd "M-D") (quote helm-buffer-run-kill-buffers)) (define-key map (kbd "C-x C-s") (quote helm-buffer-save-persistent)) (define-key map (kbd "C-M-%") (quote helm-buffer-run-query-replace-regexp)) (define-key map (kbd "M-%") (quote helm-buffer-run-query-replace)) (define-key map (kbd "M-m") (quote helm-toggle-all-marks)) (define-key map (kbd "M-a") (quote helm-mark-all)) (define-key map (kbd "C-]") (quote helm-toggle-buffers-details)) (define-key map (kbd "C-c a") (quote helm-buffers-toggle-show-hidden-buffers)) (define-key map (kbd "<C-M-SPC>") (quote helm-buffers-mark-similar-buffers)) map)) nil [4824 6463])
            ("helm-buffers-ido-virtual-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "C-c o") (quote helm-ff-run-switch-other-window)) (define-key map (kbd "C-c C-o") (quote helm-ff-run-switch-other-frame)) (define-key map (kbd "M-g s") (quote helm-ff-run-grep)) (define-key map (kbd "M-g z") (quote helm-ff-run-zgrep)) (define-key map (kbd "M-D") (quote helm-ff-run-delete-file)) (define-key map (kbd "C-c C-x") (quote helm-ff-run-open-file-externally)) map)) nil [6465 6967])
            ("helm-buffers-list-cache" variable nil nil [6971 7007])
            ("helm-buffer-max-len-mode" variable nil nil [7008 7045])
            ("helm-buffers-in-project-p" variable nil nil [7046 7084])
            ("helm-buffers-list--init" function nil nil [7086 7861])
            ("helm-source-buffers" type
               (:interfaces ("helm-type-buffer")
                :superclasses "helm-source-sync"
                :members 
                  ( ("buffer-list" variable
                       (:documentation "  A function with no arguments to create buffer list."
                        :default-value "(function helm-buffer-list)")
                        nil nil)
                    ("init" variable (:default-value "(quote helm-buffers-list--init)") nil nil)
                    ("candidates" variable (:default-value "helm-buffers-list-cache") nil nil)
                    ("matchplugin" variable (:default-value "nil") nil nil)
                    ("match" variable (:default-value "(quote helm-buffers-match-function)") nil nil)
                    ("persistent-action" variable (:default-value "(quote helm-buffers-list-persistent-action)") nil nil)
                    ("resume" variable (:default-value "(lambda nil (run-with-idle-timer 0.1 nil (lambda nil (with-helm-buffer (helm-force-update)))))") nil nil)
                    ("keymap" variable (:default-value "helm-buffer-map") nil nil)
                    ("migemo" variable (:default-value "(quote nomultimatch)") nil nil)
                    ("volatile" variable (:default-value "t") nil nil)
                    ("help-message" variable (:default-value "(quote helm-buffer-help-message)") nil nil)
                    ("persistent-help" variable (:default-value "Show this buffer / C-u \\[helm-execute-persistent-action]: Kill this buffer") nil nil))                  
                :type "class")
                nil [7863 8855])
            ("helm-source-buffers-list" variable nil nil [8857 8894])
            ("helm-source-buffer-not-found" variable (:default-value (helm-build-dummy-source "Create buffer" :action (helm-make-actions "Create buffer (C-u choose mode)" (lambda (candidate) (let ((mjm (or (and helm-current-prefix-arg (intern-soft (helm-comp-read "Major-mode: " helm-buffers-favorite-modes))) (cl-loop for (r . m) in auto-mode-alist when (string-match r candidate) return m))) (buffer (get-buffer-create candidate))) (if mjm (with-current-buffer buffer (funcall mjm)) (set-buffer-major-mode buffer)) (switch-to-buffer buffer)))))) nil [8896 9772])
            ("ido-temp-list" variable nil nil [9774 9796])
            ("ido-ignored-list" variable nil nil [9797 9822])
            ("ido-process-ignore-lists" variable nil nil [9823 9856])
            ("ido-use-virtual-buffers" variable nil nil [9857 9889])
            ("ido-virtual-buffers" variable nil nil [9890 9918])
            ("helm-source-ido-virtual-buffers" variable (:default-value (helm-build-sync-source "Ido virtual buffers" :candidates (lambda nil (let (ido-temp-list ido-ignored-list (ido-process-ignore-lists t)) (when ido-use-virtual-buffers (ido-add-virtual-buffers-to-list) ido-virtual-buffers))) :fuzzy-match helm-buffers-fuzzy-matching :keymap helm-buffers-ido-virtual-map :help-message (quote helm-buffers-ido-virtual-help-message) :action (quote (("Find file" . helm-find-many-files) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Find file as root" . helm-find-file-as-root) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("View file" . view-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally))))) nil [9920 11034])
            ("ido-use-virtual-buffers" variable nil nil [11038 11070])
            ("ido-ignore-buffers" variable nil nil [11071 11098])
            ("helm-buffer-list" function nil nil [11099 11438])
            ("helm-buffer-size" function (:arguments ("buffer")) nil [11440 11676])
            ("helm-buffer--show-details" function (:arguments ("buf-name" "prefix" "help-echo" "size" "mode" "dir" "face1" "face2" "proc" "details" "type")) nil [11678 12327])
            ("helm-buffer--details" function (:arguments ("buffer" "details")) nil [12329 14849])
            ("helm-highlight-buffers" function (:arguments ("buffers" "_source")) nil [14851 16488])
            ("helm-buffer--get-preselection" function (:arguments ("buffer")) nil [16490 17122])
            ("helm-toggle-buffers-details" function nil nil [17124 17404])
            ("put" code nil nil [17405 17452])
            ("helm-buffers-sort-transformer" function (:arguments ("candidates" "_source")) nil [17454 17665])
            ("helm-buffers-mark-similar-buffers-1" function nil nil [17667 18783])
            ("helm-buffers-mark-similar-buffers" function (:user-visible-flag t) nil [18785 19174])
            ("put" code nil nil [19175 19228])
            ("helm-buffer--match-mjm" function (:arguments ("pattern" "mjm")) nil [19255 19943])
            ("helm-buffer--match-pattern" function (:arguments ("pattern" "candidate")) nil [19945 20517])
            ("helm-buffers--match-from-mjm" function (:arguments ("candidate")) nil [20519 21066])
            ("helm-buffers--match-from-pat" function (:arguments ("candidate")) nil [21068 21532])
            ("helm-buffers--match-from-inside" function (:arguments ("candidate")) nil [21534 22188])
            ("helm-buffers--match-from-directory" function (:arguments ("candidate")) nil [22190 22824])
            ("helm-buffers-match-function" function (:arguments ("candidate")) nil [22826 23114])
            ("helm-buffer-query-replace-1" function (:arguments ("regexp-flag" "buffers")) nil [23118 23984])
            ("helm-buffer-query-replace-regexp" function (:arguments ("_candidate")) nil [23986 24079])
            ("helm-buffer-query-replace" function (:arguments ("_candidate")) nil [24081 24159])
            ("helm-buffer-toggle-diff" function (:arguments ("candidate")) nil [24161 24500])
            ("helm-buffer-diff-persistent" function (:user-visible-flag t) nil [24502 24731])
            ("put" code nil nil [24732 24779])
            ("helm-revert-buffer" function (:arguments ("candidate")) nil [24781 24940])
            ("helm-revert-marked-buffers" function (:arguments ("_ignore")) nil [24942 25040])
            ("helm-buffer-revert-and-update" function (:arguments ("_candidate")) nil [25042 25381])
            ("helm-buffer-revert-persistent" function (:user-visible-flag t) nil [25383 25635])
            ("put" code nil nil [25636 25685])
            ("helm-buffer-save-and-update" function (:arguments ("_candidate")) nil [25687 26103])
            ("helm-buffer-save-persistent" function (:user-visible-flag t) nil [26105 26347])
            ("put" code nil nil [26348 26395])
            ("helm-buffer-run-kill-persistent" function (:user-visible-flag t) nil [26397 26644])
            ("put" code nil nil [26645 26696])
            ("helm-kill-marked-buffers" function (:arguments ("_ignore")) nil [26698 26992])
            ("helm-buffer-run-kill-buffers" function (:user-visible-flag t) nil [26994 27192])
            ("put" code nil nil [27193 27241])
            ("helm-buffer-run-grep" function (:user-visible-flag t) nil [27243 27419])
            ("put" code nil nil [27420 27460])
            ("helm-buffer-run-zgrep" function (:user-visible-flag t) nil [27462 27640])
            ("put" code nil nil [27641 27682])
            ("helm-buffer-run-query-replace-regexp" function (:user-visible-flag t) nil [27684 27907])
            ("put" code nil nil [27908 27964])
            ("helm-buffer-run-query-replace" function (:user-visible-flag t) nil [27966 28168])
            ("put" code nil nil [28169 28218])
            ("helm-buffer-switch-other-window" function (:user-visible-flag t) nil [28220 28443])
            ("put" code nil nil [28444 28495])
            ("helm-buffer-switch-other-frame" function (:user-visible-flag t) nil [28497 28711])
            ("put" code nil nil [28712 28762])
            ("helm-buffer-switch-to-elscreen" function (:user-visible-flag t) nil [28764 28976])
            ("put" code nil nil [28977 29027])
            ("helm-buffer-run-ediff" function (:user-visible-flag t) nil [29029 29215])
            ("put" code nil nil [29216 29257])
            ("helm-buffer-run-ediff-merge" function (:user-visible-flag t) nil [29259 29457])
            ("put" code nil nil [29458 29505])
            ("helm-buffers-persistent-kill-1" function (:arguments ("buffer")) nil [29507 30018])
            ("helm-buffers--quote-truncated-buffer" function (:arguments ("buffer")) nil [30020 30348])
            ("helm-buffers-persistent-kill" function (:arguments ("_buffer")) nil [30350 31055])
            ("helm-buffers-list-persistent-action" function (:arguments ("candidate")) nil [31057 31386])
            ("helm-ediff-marked-buffers" function (:arguments ("_candidate" "merge")) nil [31388 32096])
            ("helm-ediff-marked-buffers-merge" function (:arguments ("candidate")) nil [32098 32278])
            ("helm-multi-occur-as-action" function (:arguments ("_candidate")) nil [32280 32889])
            ("helm-buffers-run-multi-occur" function (:user-visible-flag t) nil [32891 33076])
            ("put" code nil nil [33077 33125])
            ("helm-buffers-toggle-show-hidden-buffers" function nil nil [33127 33987])
            ("put" code nil nil [33988 34047])
            ("helm-buffers-browse-project" function (:arguments ("buf")) nil [34049 34200])
            ("helm-buffers-run-browse-project" function (:user-visible-flag t) nil [34202 34500])
            ("helm-skip-boring-buffers" function (:arguments ("buffers" "_source")) nil [34536 34719])
            ("helm-shadow-boring-buffers" function (:arguments ("buffers" "_source")) nil [34721 34950])
            ("helm-buffers-list" function (:user-visible-flag t) nil [34969 35449])
            ("helm-mini" function (:user-visible-flag t) nil [35466 35899])
            ("helm-quit-and-helm-mini" function (:user-visible-flag t) nil [35901 36049])
            ("helm-buffers" package nil nil [36051 36074]))          
      :file "helm-buffers.el"
      :pointmax 36231
      :fsize 36230
      :lastmodtime '(22375 616 983310 590000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-ring.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [836 853])
            ("helm" include nil nil [854 869])
            ("helm-utils" include nil nil [870 891])
            ("helm-help" include nil nil [892 912])
            ("helm-elisp" include nil nil [913 934])
            ("declare-function" code nil nil [936 1022])
            ("helm-ring" customgroup (:user-visible-flag t) nil [1026 1119])
            ("helm-kill-ring-threshold" variable (:default-value 3) nil [1121 1271])
            ("helm-kill-ring-max-lines-number" variable (:default-value 5) nil [1273 1564])
            ("helm-register-max-offset" variable (:default-value 160) nil [1566 1703])
            ("helm-kill-ring-actions" variable (:default-value (quote (("Yank" . helm-kill-ring-action) ("Delete" lambda (_candidate) (cl-loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))))) nil [1705 2105])
            ("helm-kill-ring-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "M-y") (quote helm-next-line)) (define-key map (kbd "M-u") (quote helm-previous-line)) map)) nil [2129 2378])
            ("helm-source-kill-ring" variable (:default-value (helm-build-sync-source "Kill Ring" :init (lambda nil (helm-attrset (quote last-command) last-command)) :candidates (function helm-kill-ring-candidates) :filtered-candidate-transformer (function helm-kill-ring-transformer) :action (quote helm-kill-ring-actions) :persistent-action (lambda (_candidate) (ignore)) :persistent-help "DoNothing" :keymap helm-kill-ring-map :migemo t :multiline t)) nil [2380 2863])
            ("helm-kill-ring-candidates" function nil nil [2865 3118])
            ("helm-kill-ring-transformer" function (:arguments ("candidates" "_source")) nil [3120 4067])
            ("helm-kill-ring-action" function (:arguments ("str")) nil [4069 5684])
            ("helm-mark-ring-line-string-at-pos" function (:arguments ("pos")) nil [5852 6138])
            ("helm-mark-ring-get-candidates" function nil nil [6140 6770])
            ("helm-source-mark-ring" variable (:default-value (helm-build-sync-source "mark-ring" :candidates (function helm-mark-ring-get-candidates) :action (quote (("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate))))) :persistent-action (lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-highlight-current-line)) :persistent-help "Show this line")) nil [6772 7230])
            ("helm-source-global-mark-ring" variable (:default-value (helm-build-sync-source "global-mark-ring" :candidates (function helm-global-mark-ring-get-candidates) :action (quote (("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))))))) :persistent-action (lambda (candidate) (let ((items (split-string candidate ":"))) (switch-to-buffer (cl-second items)) (helm-goto-line (string-to-number (car items))) (helm-highlight-current-line))) :persistent-help "Show this line")) nil [7253 7993])
            ("helm-global-mark-ring-format-buffer" function (:arguments ("marker")) nil [7995 8491])
            ("helm-global-mark-ring-get-candidates" function nil nil [8493 8978])
            ("helm--push-mark" function (:arguments ("location" "nomsg" "activate")) nil [8980 10363])
            ("push-mark" function (:arguments ("around" "helm-push-mark-mode")) nil [10365 10459])
            ("define-minor-mode" code nil nil [10476 10972])
            ("helm-source-register" variable (:default-value (helm-build-sync-source "Registers" :candidates (function helm-register-candidates) :action-transformer (function helm-register-action-transformer) :persistent-help "" :multiline t :action (quote (("Delete Register(s)" lambda (_candidate) (cl-loop for candidate in (helm-marked-candidates) for register = (car candidate) do (setq register-alist (delq (assoc register register-alist) register-alist)))))))) nil [11016 11641])
            ("helm-register-candidates" function nil nil [11643 14501])
            ("helm-register-action-transformer" function (:arguments ("actions" "register-and-functions")) nil [14503 15943])
            ("helm-mark-ring" function (:user-visible-flag t) nil [15960 16152])
            ("helm-global-mark-ring" function (:user-visible-flag t) nil [16169 16389])
            ("helm-all-mark-rings" function (:user-visible-flag t) nil [16406 16695])
            ("helm-register" function (:user-visible-flag t) nil [16712 16898])
            ("helm-show-kill-ring" function (:user-visible-flag t) nil [16915 17288])
            ("helm-execute-kmacro" function (:user-visible-flag t) nil [17305 18667])
            ("helm-ring" package nil nil [18669 18689]))          
      :file "helm-ring.el"
      :pointmax 18843
      :fsize 18842
      :lastmodtime '(22375 616 275310 582000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-font.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [811 828])
            ("helm" include nil nil [829 844])
            ("helm-help" include nil nil [845 865])
            ("helm-font" customgroup (:user-visible-flag t) nil [867 957])
            ("helm-ucs-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "<C-backspace>") (quote helm-ucs-persistent-delete)) (define-key map (kbd "<C-left>") (quote helm-ucs-persistent-backward)) (define-key map (kbd "<C-right>") (quote helm-ucs-persistent-forward)) (define-key map (kbd "<C-return>") (quote helm-ucs-persistent-insert)) map)) nil [959 1376])
            ("helm-ucs-char" variable
               (:default-value (quote ((((class color) (background dark)) (:foreground "Gold"))))
                :type "face")
                nil [1378 1525])
            ("helm-xfonts-cache" variable nil nil [1553 1583])
            ("helm-previous-font" variable nil nil [1584 1615])
            ("helm-source-xfonts" variable (:default-value (helm-build-sync-source "X Fonts" :init (lambda nil (unless helm-xfonts-cache (setq helm-xfonts-cache (x-list-fonts "*"))) (setq helm-previous-font (cdr (assoc (quote font) (frame-parameters))))) :candidates (quote helm-xfonts-cache) :action (quote (("Copy font to kill ring" lambda (elm) (kill-new elm)) ("Set font" lambda (elm) (kill-new elm) (set-frame-font elm (quote keep-size)) (message "Font copied to kill ring")))) :cleanup (lambda nil (set-frame-font helm-previous-font (quote keep-size))) :persistent-action (lambda (new-font) (set-frame-font new-font (quote keep-size)) (kill-new new-font)) :persistent-help "Preview font and copy to kill-ring")) nil [1616 2668])
            ("helm-ucs--max-len" variable nil nil [2702 2732])
            ("helm-ucs--names" variable nil nil [2733 2761])
            ("helm-ucs-history" variable nil nil [2762 2791])
            ("helm-calculate-ucs-max-len" function nil nil [2793 3099])
            ("helm-ucs-init" function nil nil [3101 3857])
            ("helm-ucs-forward-char" function (:arguments ("_candidate")) nil [3859 3951])
            ("helm-ucs-backward-char" function (:arguments ("_candidate")) nil [3953 4047])
            ("helm-ucs-delete-backward" function (:arguments ("_candidate")) nil [4049 4144])
            ("helm-ucs-insert" function (:arguments ("candidate" "n")) nil [4146 4355])
            ("helm-ucs-insert-char" function (:arguments ("candidate")) nil [4357 4429])
            ("helm-ucs-insert-code" function (:arguments ("candidate")) nil [4431 4503])
            ("helm-ucs-insert-name" function (:arguments ("candidate")) nil [4505 4577])
            ("helm-ucs-persistent-insert" function nil nil [4579 4762])
            ("put" code nil nil [4763 4809])
            ("helm-ucs-persistent-forward" function nil nil [4811 4998])
            ("put" code nil nil [4999 5046])
            ("helm-ucs-persistent-backward" function nil nil [5048 5231])
            ("put" code nil nil [5232 5280])
            ("helm-ucs-persistent-delete" function nil nil [5282 5469])
            ("put" code nil nil [5470 5516])
            ("helm-source-ucs" variable (:default-value (helm-build-in-buffer-source "Ucs names" :data (function helm-ucs-init) :get-line (function buffer-substring) :help-message (quote helm-ucs-help-message) :match-part (lambda (candidate) (cadr (split-string candidate ":"))) :filtered-candidate-transformer (lambda (candidates _source) (sort candidates (function helm-generic-sort-fn))) :action (quote (("Insert character" . helm-ucs-insert-char) ("Insert character name" . helm-ucs-insert-name) ("Insert character code in hex" . helm-ucs-insert-code) ("Forward char" . helm-ucs-forward-char) ("Backward char" . helm-ucs-backward-char) ("Delete char backward" . helm-ucs-delete-backward))))) nil [5518 6292])
            ("helm-select-xfont" function (:user-visible-flag t) nil [6309 6471])
            ("helm-ucs" function (:user-visible-flag t) nil [6488 6825])
            ("helm-font" package nil nil [6827 6847]))          
      :file "helm-font.el"
      :pointmax 7001
      :fsize 7057
      :lastmodtime '(22375 616 823310 588000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-elscreen.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [801 818])
            ("helm" include nil nil [819 834])
            ("declare-function" code nil nil [836 929])
            ("declare-function" code nil nil [930 996])
            ("declare-function" code nil nil [997 1056])
            ("declare-function" code nil nil [1057 1123])
            ("helm-find-buffer-on-elscreen" function (:arguments ("candidate")) nil [1125 1686])
            ("helm-elscreen-find-file" function (:arguments ("file")) nil [1688 1815])
            ("helm-source-elscreen" type
               (:superclasses "helm-source-sync"
                :members 
                  ( ("candidates" variable (:default-value "(lambda nil (when (cdr (elscreen-get-screen-to-name-alist)) (cl-sort (cl-loop for (screen . name) in (elscreen-get-screen-to-name-alist) collect (cons (format \"[%d] %s\" screen name) screen)) (function <) :key (function cdr))))") nil nil)
                    ("action" variable (:default-value "(quote ((\"Change Screen\" lambda (candidate) (elscreen-goto candidate)) (\"Kill Screen(s)\" lambda (_) (cl-dolist (i (helm-marked-candidates)) (elscreen-goto i) (elscreen-kill))) (\"Only Screen\" lambda (candidate) (elscreen-goto candidate) (elscreen-kill-others))))") nil nil)
                    ("migemo" variable (:default-value "t") nil nil))                  
                :type "class")
                nil [1817 2656])
            ("helm-source-elscreen-history" type
               (:superclasses "helm-source-elscreen"
                :members 
                  ( ("candidates" variable (:default-value "(lambda nil (let ((sname (elscreen-get-screen-to-name-alist))) (when (cdr sname) (cl-loop for screen in (cdr (elscreen-get-conf-list (quote screen-history))) collect (cons (format \"[%d] %s\" screen (cdr (assq screen sname))) screen)))))") nil nil))                  
                :type "class")
                nil [2658 3053])
            ("helm-source-elscreen-list" variable (:default-value (helm-make-source "ElScreen" (quote helm-source-elscreen))) nil [3055 3143])
            ("helm-source-elscreen-history-list" variable (:default-value (helm-make-source "ElScreen History" (quote helm-source-elscreen-history))) nil [3145 3257])
            ("helm-elscreen" function (:user-visible-flag t) nil [3274 3422])
            ("helm-elscreen-history" function (:user-visible-flag t) nil [3439 3620])
            ("helm-elscreen" package nil nil [3622 3646]))          
      :file "helm-elscreen.el"
      :pointmax 3804
      :fsize 3803
      :lastmodtime '(22375 616 411310 583000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-config.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("declare-function" code nil nil [839 909])
            ("when" code nil nil [910 1034])
            ("helm-config" customgroup (:user-visible-flag t) nil [1038 1116])
            ("helm-command-prefix-key" variable (:default-value "C-x c") nil [1118 1604])
            ("helm-minibuffer-history-key" variable (:default-value "C-r") nil [1606 2661])
            ("helm-command-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd "a") (quote helm-apropos)) (define-key map (kbd "e") (quote helm-etags-select)) (define-key map (kbd "l") (quote helm-locate)) (define-key map (kbd "s") (quote helm-surfraw)) (define-key map (kbd "r") (quote helm-regexp)) (define-key map (kbd "m") (quote helm-man-woman)) (define-key map (kbd "t") (quote helm-top)) (define-key map (kbd "/") (quote helm-find)) (define-key map (kbd "i") (quote helm-semantic-or-imenu)) (define-key map (kbd "I") (quote helm-imenu-in-all-buffers)) (define-key map (kbd "<tab>") (quote helm-lisp-completion-at-point)) (define-key map (kbd "p") (quote helm-list-emacs-process)) (define-key map (kbd "C-x r b") (quote helm-filtered-bookmarks)) (define-key map (kbd "M-y") (quote helm-show-kill-ring)) (define-key map (kbd "C-c <SPC>") (quote helm-all-mark-rings)) (define-key map (kbd "C-x C-f") (quote helm-find-files)) (define-key map (kbd "f") (quote helm-multi-files)) (define-key map (kbd "C-:") (quote helm-eval-expression-with-eldoc)) (define-key map (kbd "C-,") (quote helm-calcul-expression)) (define-key map (kbd "M-x") (quote helm-M-x)) (define-key map (kbd "M-s o") (quote helm-occur)) (define-key map (kbd "M-g a") (quote helm-do-grep-ag)) (define-key map (kbd "c") (quote helm-colors)) (define-key map (kbd "F") (quote helm-select-xfont)) (define-key map (kbd "8") (quote helm-ucs)) (define-key map (kbd "C-c f") (quote helm-recentf)) (define-key map (kbd "C-c g") (quote helm-google-suggest)) (define-key map (kbd "h i") (quote helm-info-at-point)) (define-key map (kbd "h r") (quote helm-info-emacs)) (define-key map (kbd "h g") (quote helm-info-gnus)) (define-key map (kbd "h h") (quote helm-documentation)) (define-key map (kbd "C-x C-b") (quote helm-buffers-list)) (define-key map (kbd "C-x r i") (quote helm-register)) (define-key map (kbd "C-c C-x") (quote helm-run-external-command)) (define-key map (kbd "b") (quote helm-resume)) (define-key map (kbd "M-g i") (quote helm-gid)) (define-key map (kbd "@") (quote helm-list-elisp-packages)) map)) nil [2689 4877])
            ("helm-command-prefix" variable nil nil [4998 5026])
            ("define-prefix-command" code nil nil [5027 5071])
            ("fset" code nil nil [5072 5116])
            ("setq" code nil nil [5117 5161])
            ("helm-easymenu" include nil nil [5175 5199])
            ("helm-configuration" function (:user-visible-flag t) nil [5218 5312])
            ("cl-dolist" code nil nil [5329 6580])
            ("load" code nil nil [6689 6718])
            ("helm-config" package nil nil [6720 6742]))          
      :file "helm-config.el"
      :pointmax 6898
      :fsize 6897
      :lastmodtime '(22375 617 547310 596000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-easymenu.el"
      :file "helm-easymenu.el"
      :fsize 3121
      :lastmodtime '(22375 616 547310 585000))
    (semanticdb-table "helm-adaptive.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [893 910])
            ("helm" include nil nil [911 926])
            ("helm-adapt" customgroup (:user-visible-flag t) nil [930 1017])
            ("helm-adaptive-history-file" variable (:default-value "~/.emacs.d/helm-adaptive-history") nil [1019 1185])
            ("helm-adaptive-history-length" variable (:default-value 50) nil [1187 1321])
            ("helm-adaptive-done" variable nil nil [1337 1444])
            ("helm-adaptive-history" variable nil nil [1446 1608])
            ("helm-adaptive-done-reset" function nil nil [1610 1677])
            ("define-minor-mode" code nil nil [1694 2783])
            ("helm-adapt-use-adaptive-p" function (:arguments ("source-name")) nil [2785 3777])
            ("helm-adaptive-store-selection" function nil nil [3779 6892])
            ("helm-adaptive-maybe-load-history" function nil nil [6894 7170])
            ("helm-adaptive-save-history" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [7172 7672])
            ("helm-adaptive-sort" function (:arguments ("candidates" "source")) nil [7674 10508])
            ("helm-reset-adaptive-history" function (:user-visible-flag t) nil [10525 10855])
            ("helm-adaptive-compare" function (:arguments ("x" "y")) nil [10857 11066])
            ("helm-adaptive" package nil nil [11069 11093]))          
      :file "helm-adaptive.el"
      :pointmax 11251
      :fsize 11250
      :lastmodtime '(22375 617 251310 593000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-net.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [813 830])
            ("helm" include nil nil [831 846])
            ("helm-help" include nil nil [847 867])
            ("url" include nil nil [868 882])
            ("xml" include nil nil [883 897])
            ("browse-url" include nil nil [898 919])
            ("helm-net" customgroup (:user-visible-flag t) nil [923 1014])
            ("helm-google-suggest-default-browser-function" variable nil nil [1016 1274])
            ("helm-home-url" variable (:default-value "http://www.google.fr") nil [1276 1395])
            ("helm-surfraw-default-browser-function" variable nil nil [1397 1598])
            ("helm-google-suggest-url" variable (:default-value "http://google.com/complete/search?output=toolbar&q=") nil [1600 1774])
            ("helm-google-suggest-search-url" variable (:default-value "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s") nil [1776 1944])
            ("helm-net-prefer-curl" variable nil nil [1946 2125])
            ("defvaralias" code nil nil [2127 2194])
            ("make-obsolete-variable" code nil nil [2195 2281])
            ("helm-surfraw-duckduckgo-url" variable (:default-value "https://duckduckgo.com/lite/?q=%s&kp=1") nil [2283 2587])
            ("helm-wikipedia-suggest-url" variable (:default-value "https://en.wikipedia.org/w/api.php?action=opensearch&search=") nil [2589 2778])
            ("helm-search-suggest-action-wikipedia-url" variable (:default-value "https://en.wikipedia.org/wiki/Special:Search?search=%s") nil [2780 3004])
            ("helm-wikipedia-summary-url" variable (:default-value "http://en.wikipedia.org/w/api.php?action=parse&format=json&prop=text&section=0&page=") nil [3006 3222])
            ("helm-wikipedia-follow-delay" variable (:default-value 2) nil [3224 3342])
            ("helm-search-suggest-action-youtube-url" variable (:default-value "http://www.youtube.com/results?aq=f&search_query=%s") nil [3344 3561])
            ("helm-search-suggest-action-imdb-url" variable (:default-value "http://www.imdb.com/find?s=all&q=%s") nil [3563 3758])
            ("helm-search-suggest-action-google-maps-url" variable (:default-value "http://maps.google.com/maps?f=q&source=s_q&q=%s") nil [3760 3981])
            ("helm-search-suggest-action-google-news-url" variable (:default-value "http://www.google.com/search?safe=off&prmd=nvlifd&source=lnms&tbs=nws:1&q=%s") nil [3983 4233])
            ("helm-google-suggest-actions" variable (:default-value (quote (("Google Search" . helm-google-suggest-action) ("Wikipedia" lambda (candidate) (helm-search-suggest-perform-additional-action helm-search-suggest-action-wikipedia-url candidate)) ("Youtube" lambda (candidate) (helm-search-suggest-perform-additional-action helm-search-suggest-action-youtube-url candidate)) ("IMDb" lambda (candidate) (helm-search-suggest-perform-additional-action helm-search-suggest-action-imdb-url candidate)) ("Google Maps" lambda (candidate) (helm-search-suggest-perform-additional-action helm-search-suggest-action-google-maps-url candidate)) ("Google News" lambda (candidate) (helm-search-suggest-perform-additional-action helm-search-suggest-action-google-news-url candidate))))) nil [4235 5458])
            ("helm-browse-url-firefox-new-window" variable (:default-value "-new-tab") nil [5460 5756])
            ("helm-search-suggest-perform-additional-action" function (:arguments ("url" "query")) nil [5825 5997])
            ("helm-net--url-retrieve-sync" function (:arguments ("request" "parser")) nil [5999 6267])
            ("helm-google-suggest-parser" function nil nil [6300 6613])
            ("helm-google-suggest-fetch" function (:arguments ("input")) nil [6615 6885])
            ("helm-google-suggest-set-candidates" function (:arguments ("request-prefix")) nil [6887 7601])
            ("helm-ggs-set-number-result" function (:arguments ("num")) nil [7603 8103])
            ("helm-google-suggest-action" function (:arguments ("candidate")) nil [8105 8431])
            ("helm-google-suggest-default-function" variable (:default-value (quote helm-google-suggest-set-candidates)) nil [8433 8568])
            ("helm-source-google-suggest" variable (:default-value (helm-build-sync-source "Google Suggest" :candidates (lambda nil (funcall helm-google-suggest-default-function)) :action (quote helm-google-suggest-actions) :volatile t :keymap helm-map :requires-pattern 3)) nil [8570 8844])
            ("helm-google-suggest-emacs-lisp" function nil nil [8846 8995])
            ("declare-function" code nil nil [9029 9085])
            ("helm-wikipedia-suggest-fetch" function nil nil [9086 9394])
            ("helm-wikipedia--parse-buffer" function nil nil [9396 9945])
            ("helm-wikipedia--summary-cache" variable (:default-value (make-hash-table :test (quote equal))) nil [9947 10016])
            ("helm-wikipedia-persistent-action" function (:arguments ("candidate")) nil [10017 11304])
            ("helm-wikipedia-fetch-summary" function (:arguments ("input")) nil [11306 11538])
            ("helm-wikipedia--parse-summary" function nil nil [11540 12959])
            ("helm-source-wikipedia-suggest" variable (:default-value (helm-build-sync-source "Wikipedia Suggest" :candidates (function helm-wikipedia-suggest-fetch) :action (quote (("Wikipedia" lambda (candidate) (helm-search-suggest-perform-additional-action helm-search-suggest-action-wikipedia-url candidate)))) :persistent-action (function helm-wikipedia-persistent-action) :volatile t :keymap helm-map :follow 1 :follow-delay helm-wikipedia-follow-delay :requires-pattern 3)) nil [12962 13519])
            ("helm-browse-url-chromium-program" variable (:default-value "chromium-browser") nil [13712 13772])
            ("helm-browse-url-uzbl-program" variable (:default-value "uzbl-browser") nil [13773 13825])
            ("helm-browse-url-conkeror-program" variable (:default-value "conkeror") nil [13826 13878])
            ("helm-browse-url-default-browser-alist" variable
               (:user-visible-flag t
                :default-value (\` (((\, (or (and (boundp (quote w3m-command)) w3m-command) "/usr/bin/w3m")) . w3m-browse-url) ((\, browse-url-firefox-program) . browse-url-firefox) ((\, helm-browse-url-chromium-program) . helm-browse-url-chromium) ((\, helm-browse-url-conkeror-program) . helm-browse-url-conkeror) ((\, helm-browse-url-uzbl-program) . helm-browse-url-uzbl) ((\, browse-url-kde-program) . browse-url-kde) ((\, browse-url-gnome-moz-program) . browse-url-gnome-moz) ((\, browse-url-mozilla-program) . browse-url-mozilla) ((\, browse-url-galeon-program) . browse-url-galeon) ((\, browse-url-netscape-program) . browse-url-netscape) ((\, browse-url-mosaic-program) . browse-url-mosaic) ((\, browse-url-xterm-program) . browse-url-text-xterm) ("emacs" . eww-browse-url))))
                nil [13879 14758])
            ("cl-defun" code nil nil [14760 15192])
            ("helm-browse-url-firefox" function
               (:user-visible-flag t
                :arguments ("url" "_ignore"))
                nil [15194 15793])
            ("helm-browse-url-chromium" function
               (:user-visible-flag t
                :arguments ("url" "_ignore"))
                nil [15795 15984])
            ("helm-browse-url-uzbl" function
               (:user-visible-flag t
                :arguments ("url" "_ignore"))
                nil [15986 16160])
            ("helm-browse-url-conkeror" function
               (:user-visible-flag t
                :arguments ("url" "_ignore"))
                nil [16162 16343])
            ("helm-browse-url-default-browser" function (:arguments ("url" "args")) nil [16345 16751])
            ("helm-browse-url" function (:arguments ("url" "args")) nil [16753 16938])
            ("helm-surfraw-engines-history" variable nil nil [17043 17084])
            ("helm-surfraw-input-history" variable nil nil [17085 17124])
            ("helm-surfraw--elvi-cache" variable nil nil [17125 17162])
            ("helm-build-elvi-list" function nil nil [17164 17487])
            ("helm-surfraw" function
               (:user-visible-flag t
                :arguments ("pattern" "engine"))
                nil [17504 19007])
            ("helm-google-suggest" function (:user-visible-flag t) nil [19024 19200])
            ("helm-wikipedia-suggest" function (:user-visible-flag t) nil [19217 19420])
            ("helm-net" package nil nil [19423 19442]))          
      :file "helm-net.el"
      :pointmax 19595
      :fsize 19594
      :lastmodtime '(22375 617 451310 595000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-multi-match.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1003 1020])
            ("helm-lib" include nil nil [1021 1040])
            ("helm-multi-match" customgroup (:user-visible-flag t) nil [1044 1112])
            ("helm-mm-matching-method" variable (:default-value (quote multi3)) nil [1114 2171])
            ("helm-mm-default-match-functions" variable
               (:constant-flag t
                :default-value (quote (helm-mm-exact-match helm-mm-match)))
                nil [2187 2268])
            ("helm-mm-default-search-functions" variable
               (:constant-flag t
                :default-value (quote (helm-mm-exact-search helm-mm-search)))
                nil [2269 2353])
            ("helm-mm-space-regexp" variable (:default-value "[\\ ] ") nil [2381 2482])
            ("helm-mm-split-pattern" function (:arguments ("pattern")) nil [2484 3027])
            ("helm-mm-1-make-regexp" function (:arguments ("pattern")) nil [3029 3173])
            ("helm-mm-exact-pattern-str" variable nil nil [3213 3251])
            ("helm-mm-exact-pattern-real" variable nil nil [3252 3291])
            ("helm-mm-exact-get-pattern" function (:arguments ("pattern")) nil [3293 3527])
            ("cl-defun" code nil nil [3530 3770])
            ("helm-mm-exact-search" function (:arguments ("pattern" "_ignore")) nil [3772 3916])
            ("helm-mm-prefix-pattern-str" variable nil nil [3955 3994])
            ("helm-mm-prefix-pattern-real" variable nil nil [3995 4035])
            ("helm-mm-prefix-get-pattern" function (:arguments ("pattern")) nil [4037 4271])
            ("helm-mm-prefix-match" function (:arguments ("str" "pattern")) nil [4273 4656])
            ("helm-mm-prefix-search" function (:arguments ("pattern" "_ignore")) nil [4658 4773])
            ("helm-mm-1-pattern-str" variable nil nil [4857 4891])
            ("helm-mm-1-pattern-real" variable nil nil [4892 4927])
            ("helm-mm-1-get-pattern" function (:arguments ("pattern")) nil [4929 5171])
            ("cl-defun" code nil nil [5173 5291])
            ("helm-mm-1-search" function (:arguments ("pattern" "_ignore")) nil [5293 5401])
            ("helm-mm-2-pattern-str" variable nil nil [5486 5520])
            ("helm-mm-2-pattern-real" variable nil nil [5521 5556])
            ("helm-mm-2-get-pattern" function (:arguments ("pattern")) nil [5558 5802])
            ("cl-defun" code nil nil [5804 5922])
            ("helm-mm-2-search" function (:arguments ("pattern" "_ignore")) nil [5924 6032])
            ("helm-mm-3-pattern-str" variable nil nil [6100 6134])
            ("helm-mm-3-pattern-list" variable nil nil [6135 6170])
            ("helm-mm-3-get-patterns" function (:arguments ("pattern")) nil [6172 6602])
            ("helm-mm-3-get-patterns-internal" function (:arguments ("pattern")) nil [6604 6991])
            ("cl-defun" code nil nil [6993 8080])
            ("helm-mm-3-search-base" function (:arguments ("pattern" "searchfn1" "searchfn2")) nil [8082 9421])
            ("helm-mm-3-search" function (:arguments ("pattern" "_ignore")) nil [9423 9625])
            ("helm-mm--previous-migemo-info" variable nil nil [9655 9741])
            ("make-local-variable" code nil nil [9742 9794])
            ("declare-function" code nil nil [9796 9849])
            ("declare-function" code nil nil [9850 9910])
            ("define-minor-mode" code nil nil [9912 10240])
            ("helm-mm-migemo-get-pattern" function (:arguments ("pattern")) nil [10242 10429])
            ("helm-mm-migemo-search-pattern-get" function (:arguments ("pattern")) nil [10431 10632])
            ("helm-mm-migemo-string-match" function (:arguments ("pattern" "str")) nil [10634 11038])
            ("cl-defun" code nil nil [11040 11281])
            ("helm-mm-migemo-forward" function (:arguments ("word" "bound" "noerror" "count")) nil [11283 11801])
            ("helm-mm-3-migemo-search" function (:arguments ("pattern" "_ignore")) nil [11803 11978])
            ("helm-mm-3p-match" function (:arguments ("str" "pattern")) nil [12046 12580])
            ("helm-mm-3p-search" function (:arguments ("pattern" "_ignore")) nil [12582 12789])
            ("cl-defun" code nil nil [12840 13154])
            ("helm-mm-search" function (:arguments ("pattern" "_ignore")) nil [13156 13453])
            ("helm-multi-match" package nil nil [13456 13483]))          
      :file "helm-multi-match.el"
      :pointmax 13645
      :fsize 13644
      :lastmodtime '(22375 617 291310 593000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-command.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [815 832])
            ("helm" include nil nil [833 848])
            ("helm-help" include nil nil [849 869])
            ("helm-mode" include nil nil [870 890])
            ("helm-elisp" include nil nil [891 912])
            ("helm-command" customgroup (:user-visible-flag t) nil [916 1021])
            ("helm-M-x-requires-pattern" variable nil nil [1023 1197])
            ("helm-M-x-always-save-history" variable nil nil [1199 1361])
            ("helm-M-x-reverse-history" variable nil nil [1363 1521])
            ("helm-M-x-fuzzy-match" variable nil nil [1523 1654])
            ("helm-command-faces" customgroup (:user-visible-flag t) nil [1674 1815])
            ("helm-M-x-key" variable
               (:default-value (quote ((t (:foreground "orange" :underline t))))
                :type "face")
                nil [1817 1957])
            ("helm-M-x-input-history" variable nil nil [1961 1996])
            ("cl-defun" code nil nil [2000 2353])
            ("helm-get-mode-map-from-mode" function (:arguments ("mode")) nil [2355 3180])
            ("helm-M-x-current-mode-map-alist" function nil nil [3182 3447])
            ("helm-M-x-transformer-1" function (:arguments ("candidates" "sort")) nil [3450 4830])
            ("helm-M-x-transformer" function (:arguments ("candidates" "_source")) nil [4832 4993])
            ("helm-M-x-transformer-hist" function (:arguments ("candidates" "_source")) nil [4995 5139])
            ("helm-M-x--notify-prefix-arg" function nil nil [5141 5334])
            ("helm-cmd--get-current-function-name" function nil nil [5336 5540])
            ("helm-cmd--get-preconfigured-commands" function (:arguments ("dir")) nil [5542 6035])
            ("helm-M-x-read-extended-command" function (:arguments ("collection" "history")) nil [6037 8828])
            ("helm-M-x" function
               (:user-visible-flag t
                :arguments ("arg" "command-name"))
                nil [8845 10133])
            ("helm-command" package nil nil [10136 10159]))          
      :file "helm-command.el"
      :pointmax 10316
      :fsize 10315
      :lastmodtime '(22375 616 479310 584000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-mode.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [817 834])
            ("helm" include nil nil [835 850])
            ("helm-files" include nil nil [851 872])
            ("helm-mode" customgroup (:user-visible-flag t) nil [876 943])
            ("helm-completing-read-handlers-alist" variable (:default-value (quote ((describe-function . helm-completing-read-symbols) (describe-variable . helm-completing-read-symbols) (describe-symbol . helm-completing-read-symbols) (debug-on-entry . helm-completing-read-symbols) (find-function . helm-completing-read-symbols) (disassemble . helm-completing-read-symbols) (trace-function . helm-completing-read-symbols) (trace-function-foreground . helm-completing-read-symbols) (trace-function-background . helm-completing-read-symbols) (find-tag . helm-completing-read-with-cands-in-buffer) (org-capture . helm-org-completing-read-tags) (org-set-tags . helm-org-completing-read-tags) (ffap-alternate-file) (tmm-menubar) (find-file) (execute-extended-command)))) nil [945 3134])
            ("helm-comp-read-case-fold-search" variable (:default-value helm-case-fold-search) nil [3136 3355])
            ("helm-mode-handle-completion-in-region" variable (:default-value t) nil [3357 3600])
            ("helm-mode-reverse-history" variable (:default-value t) nil [3602 3759])
            ("helm-mode-no-completion-in-region-in-modes" variable nil nil [3761 3926])
            ("helm-completion-in-region-fuzzy-match" variable nil nil [3928 4156])
            ("helm-mode-fuzzy-match" variable nil nil [4158 4546])
            ("helm-mode-minibuffer-setup-hook-black-list" variable (:default-value (quote (minibuffer-completion-help))) nil [4548 4887])
            ("helm-comp-read-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "<C-return>") (quote helm-cr-empty-string)) (define-key map (kbd "<M-RET>") (quote helm-cr-empty-string)) map)) nil [4891 5154])
            ("helm-comp-read-must-match-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd "RET") (quote helm-confirm-and-exit-minibuffer)) map)) nil [5156 5392])
            ("helm-cr-unknown-pattern-flag" variable nil nil [5507 5548])
            ("helm-cr-empty-string" function (:user-visible-flag t) nil [5597 5776])
            ("put" code nil nil [5777 5817])
            ("helm-mode--keyboard-quit" function nil nil [5819 5999])
            ("cl-defun" code nil nil [6001 10271])
            ("helm-cr-default-transformer" function (:arguments ("candidates" "_source")) nil [10273 11118])
            ("helm-comp-read--move-to-first-real-candidate" function nil nil [11120 11311])
            ("helm-cr-default" function (:arguments ("default" "cands")) nil [11313 11548])
            ("cl-defun" code nil nil [11565 22700])
            ("helm-completion-mode-string" variable (:default-value " Helm") nil [23098 23142])
            ("helm-completion-mode-quit-message" variable (:default-value "Helm completion disabled") nil [23144 23215])
            ("helm-completion-mode-start-message" variable (:default-value "Helm completion enabled") nil [23217 23288])
            ("helm-completing-read-symbols" function (:arguments ("prompt" "_collection" "test" "_require-match" "init" "hist" "default" "_inherit-input-method" "name" "buffer")) nil [23321 24429])
            ("helm-completing-read-default-1" function (:arguments ("prompt" "collection" "test" "require-match" "init" "hist" "default" "_inherit-input-method" "name" "buffer" "cands-in-buffer" "exec-when-only-one")) nil [24466 26357])
            ("helm-completing-read-with-cands-in-buffer" function (:arguments ("prompt" "collection" "test" "require-match" "init" "hist" "default" "inherit-input-method" "name" "buffer")) nil [26359 27113])
            ("cl-defun" code nil nil [27115 31945])
            ("cl-defun" code nil nil [31996 38504])
            ("helm-mode--default-filename" function (:arguments ("fname" "dir" "initial")) nil [38506 39047])
            ("cl-defun" code nil nil [39049 43167])
            ("helm-mode--advice-lisp--local-variables" function (:arguments ("old--fn" "args")) nil [43169 43280])
            ("helm--completion-in-region" function (:arguments ("start" "end" "collection" "predicate")) nil [43282 49813])
            ("helm-mode--in-file-completion-p" function nil nil [49815 49955])
            ("when" code nil nil [49957 50086])
            ("define-minor-mode" code nil nil [50103 52731])
            ("helm-mode" package nil nil [52733 52753]))          
      :file "helm-mode.el"
      :pointmax 52907
      :fsize 52906
      :lastmodtime '(22375 616 211310 581000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-id-utils.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("helm-grep" include nil nil [815 835])
            ("helm-help" include nil nil [836 856])
            ("helm-id-utils" customgroup (:user-visible-flag t) nil [858 959])
            ("helm-gid-program" variable (:default-value "gid") nil [961 1317])
            ("helm-gid-db-file-name" variable (:default-value "ID") nil [1319 1468])
            ("helm-gid-candidates-process" function nil nil [1470 3046])
            ("helm-gid-filtered-candidate-transformer" function (:arguments ("candidates" "_source")) nil [3048 3285])
            ("helm-gid-source" type
               (:superclasses "helm-source-async"
                :members 
                  ( ("header-name" variable (:default-value "(lambda (name) (concat name \" [\" (helm-attr (quote db-dir)) \"]\"))") nil nil)
                    ("db-dir" variable
                       (:documentation " Location of ID file."
                        :default-value "nil")
                        nil nil)
                    ("candidates-process" variable (:default-value "(function helm-gid-candidates-process)") nil nil)
                    ("filtered-candidate-transformer" variable (:default-value "(function helm-gid-filtered-candidate-transformer)") nil nil)
                    ("candidate-number-limit" variable (:default-value "99999") nil nil)
                    ("action" variable (:default-value "(helm-make-actions \"Find File\" (quote helm-grep-action) \"Find file other frame\" (quote helm-grep-other-frame) (lambda nil (and (locate-library \"elscreen\") \"Find file in Elscreen\")) (quote helm-grep-jump-elscreen) \"Save results in grep buffer\" (quote helm-grep-save-results) \"Find file other window\" (quote helm-grep-other-window))") nil nil)
                    ("persistent-action" variable (:default-value "(quote helm-grep-persistent-action)") nil nil)
                    ("history" variable (:default-value "(quote helm-grep-history)") nil nil)
                    ("nohighlight" variable (:default-value "t") nil nil)
                    ("help-message" variable (:default-value "(quote helm-grep-help-message)") nil nil)
                    ("requires-pattern" variable (:default-value "2") nil nil))                  
                :type "class")
                nil [3287 4470])
            ("helm-gid" function (:user-visible-flag t) nil [4487 5278])
            ("helm-id-utils" package nil nil [5280 5304]))          
      :file "helm-id-utils.el"
      :pointmax 5459
      :fsize 5458
      :lastmodtime '(22375 617 15310 590000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-org.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [827 844])
            ("helm" include nil nil [845 860])
            ("helm-utils" include nil nil [861 882])
            ("org" include nil nil [883 897])
            ("declare-function" code nil nil [899 954])
            ("helm-org" customgroup (:user-visible-flag t) nil [956 1030])
            ("helm-org-headings-fontify" variable nil nil [1032 1257])
            ("helm-org-format-outline-path" variable nil nil [1259 1371])
            ("helm-org-show-filename" variable nil nil [1373 1580])
            ("helm-org-headings-min-depth" variable (:default-value 1) nil [1582 1708])
            ("helm-org-headings-max-depth" variable (:default-value 8) nil [1710 1838])
            ("helm-org-headings-actions" variable (:default-value (quote (("Go to heading" . helm-org-goto-marker) ("Open in indirect buffer `C-RET'" . helm-org--open-heading-in-indirect-buffer) ("Refile to this heading `C-w`''" . helm-org-heading-refile) ("Insert link to this heading `C-l`''" . helm-org-insert-link-to-heading-at-marker)))) nil [1840 2304])
            ("helm-org-truncate-lines" variable (:default-value t) nil [2306 2422])
            ("org-capture-templates" variable nil nil [2456 2486])
            ("helm-source-org-capture-templates" function nil nil [2487 2850])
            ("helm-org-goto-marker" function (:arguments ("marker")) nil [2875 3073])
            ("helm-org--open-heading-in-indirect-buffer" function (:arguments ("marker")) nil [3075 3470])
            ("helm-org--run-open-heading-in-indirect-buffer" function (:user-visible-flag t) nil [3472 3698])
            ("put" code nil nil [3699 3764])
            ("helm-org-headings-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "<C-return>") (quote helm-org--run-open-heading-in-indirect-buffer)) (define-key map (kbd "C-w") (quote helm-org-heading-refile)) (define-key map (kbd "C-l") (quote helm-org-insert-link-to-heading-at-marker)) map)) nil [3766 4152])
            ("helm-org-headings-class" type
               (:superclasses "helm-source-sync"
                :members 
                  ( ("parents" variable (:default-value "nil") nil nil)
                    ("match" variable (:default-value "(lambda (candidate) (string-match helm-pattern (helm-aif (get-text-property 0 (quote helm-real-display) candidate) it candidate)))") nil nil)
                    ("action" variable (:default-value "(quote helm-org-headings-actions)") nil nil)
                    ("keymap" variable (:default-value "(quote helm-org-headings-map)") nil nil))                  
                :type "class")
                nil [4154 4600])
            ("helm--setup-source" function
               (:parent "helm-org-headings-class"
                :arguments ("source"))
                nil [4602 4932])
            ("helm-source-org-headings-for-files" function (:arguments ("filenames" "parents")) nil [4934 5114])
            ("helm-org-get-candidates" function (:arguments ("filenames" "parents")) nil [5116 5481])
            ("helm-org--get-candidates-in-file" function (:arguments ("filename" "fontify" "nofname" "parents")) nil [5483 8527])
            ("helm-org-insert-link-to-heading-at-marker" function (:arguments ("marker")) nil [8529 8953])
            ("helm-org-heading-refile" function (:arguments ("marker")) nil [8955 9408])
            ("helm-org-agenda-files-headings" function (:user-visible-flag t) nil [9425 9727])
            ("helm-org-in-buffer-headings" function (:user-visible-flag t) nil [9744 10116])
            ("helm-org-parent-headings" function (:user-visible-flag t) nil [10133 10653])
            ("helm-org-capture-templates" function (:user-visible-flag t) nil [10670 10952])
            ("crm-separator" variable nil nil [11115 11137])
            ("helm-org-completing-read-tags" function (:arguments ("prompt" "collection" "pred" "req" "initial" "hist" "def" "inherit-input-method" "_name" "_buffer")) nil [11154 12417])
            ("helm-org" package nil nil [12419 12438]))          
      :file "helm-org.el"
      :pointmax 12591
      :fsize 12590
      :lastmodtime '(22375 617 651310 597000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-color.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [799 816])
            ("helm" include nil nil [817 832])
            ("helm-help" include nil nil [833 853])
            ("helm-custom-faces-init" function nil nil [880 1320])
            ("helm-source-customize-face" variable (:default-value (helm-build-in-buffer-source "Customize Face" :init (quote helm-custom-faces-init) :get-line (quote buffer-substring) :action (quote (("Customize" lambda (line) (customize-face (intern (car (split-string line))))) ("Copy name" lambda (line) (kill-new (car (split-string line " " t)))))))) nil [1322 1760])
            ("helm-colors-init" function nil nil [1787 2082])
            ("helm-color-insert-name" function (:arguments ("candidate")) nil [2084 2201])
            ("helm-color-kill-name" function (:arguments ("candidate")) nil [2203 2289])
            ("helm-color-insert-rgb" function (:arguments ("candidate")) nil [2291 2406])
            ("helm-color-kill-rgb" function (:arguments ("candidate")) nil [2408 2492])
            ("helm-color-run-insert-name" function (:user-visible-flag t) nil [2494 2675])
            ("put" code nil nil [2676 2722])
            ("helm-color-run-kill-name" function (:user-visible-flag t) nil [2724 2899])
            ("put" code nil nil [2900 2944])
            ("helm-color-run-insert-rgb" function (:user-visible-flag t) nil [2946 3124])
            ("put" code nil nil [3125 3170])
            ("helm-color-run-kill-rgb" function (:user-visible-flag t) nil [3172 3344])
            ("put" code nil nil [3345 3388])
            ("helm-color-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "C-c n") (quote helm-color-run-insert-name)) (define-key map (kbd "C-c N") (quote helm-color-run-kill-name)) (define-key map (kbd "C-c r") (quote helm-color-run-insert-rgb)) (define-key map (kbd "C-c R") (quote helm-color-run-kill-rgb)) map)) nil [3390 3741])
            ("helm-source-colors" variable (:default-value (helm-build-in-buffer-source "Colors" :init (quote helm-colors-init) :get-line (quote buffer-substring) :keymap helm-color-map :persistent-help "Kill entry in RGB format." :persistent-action (quote helm-color-kill-rgb) :help-message (quote helm-colors-help-message) :action (quote (("Copy Name (C-c N)" . helm-color-kill-name) ("Copy RGB (C-c R)" . helm-color-kill-rgb) ("Insert Name (C-c n)" . helm-color-insert-name) ("Insert RGB (C-c r)" . helm-color-insert-rgb))))) nil [3743 4256])
            ("helm-colors-get-name" function (:arguments ("candidate")) nil [4258 4551])
            ("helm-colors-get-rgb" function (:arguments ("candidate")) nil [4553 4845])
            ("helm-colors" function (:user-visible-flag t) nil [4862 5035])
            ("helm-color" package nil nil [5037 5058]))          
      :file "helm-color.el"
      :pointmax 5213
      :fsize 5212
      :lastmodtime '(22375 617 483310 595000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-apt.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [831 848])
            ("helm" include nil nil [849 864])
            ("helm-utils" include nil nil [865 886])
            ("helm-external" include nil nil [887 911])
            ("helm-help" include nil nil [912 932])
            ("declare-function" code nil nil [934 974])
            ("declare-function" code nil nil [975 1015])
            ("declare-function" code nil nil [1016 1057])
            ("declare-function" code nil nil [1058 1097])
            ("helm-apt" customgroup (:user-visible-flag t) nil [1101 1192])
            ("helm-apt-cache-show-function" variable (:default-value (quote helm-apt-cache-show-1)) nil [1194 1533])
            ("helm-apt-actions" variable (:default-value (quote (("Show package description" . helm-apt-cache-show) ("Install package(s)" . helm-apt-install) ("Reinstall package(s)" . helm-apt-reinstall) ("Remove package(s)" . helm-apt-uninstall) ("Purge package(s)" . helm-apt-purge)))) nil [1535 1904])
            ("helm-apt-installed" variable
               (:default-value (quote ((t (:foreground "green"))))
                :type "face")
                nil [1906 2030])
            ("helm-apt-deinstalled" variable
               (:default-value (quote ((t (:foreground "DimGray"))))
                :type "face")
                nil [2032 2162])
            ("helm-apt-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "M-I") (quote helm-apt-show-only-installed)) (define-key map (kbd "M-U") (quote helm-apt-show-only-not-installed)) (define-key map (kbd "M-D") (quote helm-apt-show-only-deinstalled)) (define-key map (kbd "M-A") (quote helm-apt-show-all)) map)) nil [2166 2524])
            ("helm-source-apt" variable (:default-value (helm-build-in-buffer-source "APT" :init (function helm-apt-init) :candidate-transformer (function helm-apt-candidate-transformer) :display-to-real (function helm-apt-display-to-real) :update (function helm-apt-refresh) :keymap helm-apt-map :help-message (quote helm-apt-help-message) :action (quote helm-apt-actions) :persistent-action (function helm-apt-persistent-action) :persistent-help "Show package description")) nil [2528 2951])
            ("helm-apt-search-command" variable (:default-value "apt-cache search '%s'") nil [2972 3028])
            ("helm-apt-show-command" variable (:default-value "apt-cache show '%s'") nil [3029 3081])
            ("helm-apt-installed-packages" variable nil nil [3082 3122])
            ("helm-apt-all-packages" variable nil nil [3123 3157])
            ("helm-apt-input-history" variable nil nil [3158 3193])
            ("helm-apt-show-only" variable (:default-value (quote all)) nil [3194 3226])
            ("helm-apt-term-buffer" variable nil nil [3227 3260])
            ("helm-apt-default-archs" variable nil nil [3261 3296])
            ("helm-apt-refresh" function nil nil [3298 3440])
            ("helm-apt-persistent-action" function (:arguments ("candidate")) nil [3442 3560])
            ("helm-apt--installed-package-name" function (:arguments ("name")) nil [3562 3895])
            ("helm-apt-candidate-transformer" function (:arguments ("candidates")) nil [3897 4965])
            ("helm-apt-show-only-installed" function nil nil [4967 5103])
            ("put" code nil nil [5104 5152])
            ("helm-apt-show-only-not-installed" function nil nil [5154 5296])
            ("put" code nil nil [5297 5349])
            ("helm-apt-show-only-deinstalled" function nil nil [5351 5491])
            ("put" code nil nil [5492 5542])
            ("helm-apt-show-all" function nil nil [5544 5663])
            ("put" code nil nil [5664 5701])
            ("helm-apt-init" function nil nil [5703 6648])
            ("helm-apt-display-to-real" function (:arguments ("line")) nil [6650 6817])
            ("helm-apt-show-current-package" variable nil nil [6819 6861])
            ("define-derived-mode" code nil nil [6862 6980])
            ("helm-apt-cache-show" function (:arguments ("package")) nil [6982 7365])
            ("helm-apt-cache-show-1" function (:arguments ("package")) nil [7367 7881])
            ("helm-apt-install" function (:arguments ("_package")) nil [7883 8015])
            ("helm-apt-reinstall" function (:arguments ("_package")) nil [8017 8165])
            ("helm-apt-uninstall" function (:arguments ("_package")) nil [8167 8302])
            ("helm-apt-purge" function (:arguments ("_package")) nil [8304 8430])
            ("cl-defun" code nil nil [8432 9642])
            ("helm-apt" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [9659 10492])
            ("helm-apt" package nil nil [10495 10514]))          
      :file "helm-apt.el"
      :pointmax 10667
      :fsize 10666
      :lastmodtime '(22375 617 51310 591000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-elisp-package.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [820 837])
            ("helm" include nil nil [838 853])
            ("helm-help" include nil nil [854 874])
            ("package" include nil nil [875 893])
            ("helm-el-package" customgroup (:user-visible-flag t) nil [895 965])
            ("helm-el-package-initial-filter" variable (:default-value (quote all)) nil [967 1389])
            ("helm-el-package--show-only" variable (:default-value (quote all)) nil [1409 1449])
            ("helm-el-package--initialized-p" variable nil nil [1450 1493])
            ("helm-el-package--tabulated-list" variable nil nil [1494 1538])
            ("helm-el-package--upgrades" variable nil nil [1539 1577])
            ("helm-el-package--removable-packages" variable nil nil [1578 1626])
            ("package-menu-async" variable nil nil [1665 1692])
            ("declare-function" code nil nil [1723 1796])
            ("helm-el-package--init" function nil nil [1798 3307])
            ("helm-el-package-describe" function (:arguments ("candidate")) nil [3309 3558])
            ("helm-el-package-visit-homepage" function (:arguments ("candidate")) nil [3560 4142])
            ("helm-el-run-visit-homepage" function nil nil [4144 4286])
            ("put" code nil nil [4287 4333])
            ("helm-el-package-install-1" function (:arguments ("pkg-list")) nil [4335 5281])
            ("helm-el-package-install" function (:arguments ("_candidate")) nil [5283 5382])
            ("helm-el-run-package-install" function nil nil [5384 5520])
            ("put" code nil nil [5521 5568])
            ("helm-el-package-uninstall-1" function (:arguments ("pkg-list")) nil [5570 7625])
            ("helm-el-package-uninstall" function (:arguments ("_candidate")) nil [7627 7730])
            ("helm-el-run-package-uninstall" function nil nil [7732 7872])
            ("put" code nil nil [7873 7922])
            ("helm-el-package-menu--find-upgrades" function nil nil [7924 8818])
            ("helm-el-package-upgrade-1" function (:arguments ("pkg-list")) nil [8820 9660])
            ("helm-el-package-upgrade" function (:arguments ("_candidate")) nil [9662 9958])
            ("helm-el-run-package-upgrade" function nil nil [9960 10096])
            ("put" code nil nil [10097 10144])
            ("helm-el-package-upgrade-all" function nil nil [10146 10575])
            ("helm-el-package-upgrade-all-action" function (:arguments ("_candidate")) nil [10577 10664])
            ("helm-el-run-package-upgrade-all" function nil nil [10666 10817])
            ("put" code nil nil [10818 10869])
            ("helm-el-package--transformer" function (:arguments ("candidates" "_source")) nil [10871 12251])
            ("helm-el-package-show-upgrade" function nil nil [12253 12395])
            ("put" code nil nil [12396 12444])
            ("helm-el-package-show-installed" function nil nil [12446 12592])
            ("put" code nil nil [12593 12643])
            ("helm-el-package-show-all" function nil nil [12645 12779])
            ("put" code nil nil [12780 12824])
            ("helm-el-package-show-uninstalled" function nil nil [12826 12976])
            ("put" code nil nil [12977 13029])
            ("helm-el-package-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "M-I") (quote helm-el-package-show-installed)) (define-key map (kbd "M-O") (quote helm-el-package-show-uninstalled)) (define-key map (kbd "M-U") (quote helm-el-package-show-upgrade)) (define-key map (kbd "M-A") (quote helm-el-package-show-all)) (define-key map (kbd "C-c i") (quote helm-el-run-package-install)) (define-key map (kbd "C-c r") (quote helm-el-run-package-reinstall)) (define-key map (kbd "C-c d") (quote helm-el-run-package-uninstall)) (define-key map (kbd "C-c u") (quote helm-el-run-package-upgrade)) (define-key map (kbd "C-c U") (quote helm-el-run-package-upgrade-all)) (define-key map (kbd "C-c @") (quote helm-el-run-visit-homepage)) map)) nil [13031 13794])
            ("helm-source-list-el-package" variable nil nil [13796 13836])
            ("helm-list-el-package-source" type
               (:superclasses "helm-source-in-buffer"
                :members 
                  ( ("init" variable (:default-value "(quote helm-el-package--init)") nil nil)
                    ("get-line" variable (:default-value "(quote buffer-substring)") nil nil)
                    ("filtered-candidate-transformer" variable (:default-value "(quote helm-el-package--transformer)") nil nil)
                    ("action-transformer" variable (:default-value "(quote helm-el-package--action-transformer)") nil nil)
                    ("help-message" variable (:default-value "(quote helm-el-package-help-message)") nil nil)
                    ("keymap" variable (:default-value "helm-el-package-map") nil nil)
                    ("update" variable (:default-value "(quote helm-el-package--update)") nil nil)
                    ("candidate-number-limit" variable (:default-value "9999") nil nil)
                    ("action" variable (:default-value "(quote ((\"Describe package\" . helm-el-package-describe) (\"Visit homepage\" . helm-el-package-visit-homepage)))") nil nil))                  
                :type "class")
                nil [13837 14470])
            ("helm-el-package--action-transformer" function (:arguments ("actions" "candidate")) nil [14472 15693])
            ("helm-el-package--update" function nil nil [15695 15773])
            ("helm-el-package-recompile" function (:arguments ("_pkg")) nil [15775 16299])
            ("helm-el-package-reinstall" function (:arguments ("_pkg")) nil [16301 17397])
            ("helm-el-run-package-reinstall" function nil nil [17399 17539])
            ("put" code nil nil [17540 17589])
            ("helm-list-elisp-packages" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [17606 18021])
            ("helm-list-elisp-packages-no-fetch" function (:user-visible-flag t) nil [18038 18292])
            ("helm-elisp-package" package nil nil [18294 18323]))          
      :file "helm-elisp-package.el"
      :pointmax 18361
      :fsize 18360
      :lastmodtime '(22375 616 511310 585000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-dabbrev.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("helm" include nil nil [817 832])
            ("helm-lib" include nil nil [833 852])
            ("helm-help" include nil nil [853 873])
            ("helm-elisp" include nil nil [874 895])
            ("helm-dabbrev" customgroup (:user-visible-flag t) nil [921 1020])
            ("helm-dabbrev-always-search-all" variable (:default-value t) nil [1022 1285])
            ("helm-dabbrev-max-length-result" variable (:default-value 20) nil [1287 1586])
            ("helm-dabbrev-ignored-buffers-regexps" variable (:default-value (quote ("\\*helm" "\\*Messages" "\\*Echo Area" "\\*Buffer List"))) nil [1588 1827])
            ("helm-dabbrev-related-buffer-fn" variable (:default-value (function helm-dabbrev--same-major-mode-p)) nil [1829 2311])
            ("helm-dabbrev-major-mode-assoc" variable nil nil [2313 3018])
            ("helm-dabbrev-lineno-around" variable (:default-value 30) nil [3020 3165])
            ("helm-dabbrev-cycle-threshold" variable nil nil [3167 3400])
            ("helm-dabbrev-case-fold-search" variable (:default-value (quote smart)) nil [3402 3816])
            ("helm-dabbrev-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "M-/") (quote helm-next-line)) (define-key map (kbd "M-:") (quote helm-previous-line)) map)) nil [3820 4029])
            ("helm-dabbrev--exclude-current-buffer-flag" variable nil nil [4043 4097])
            ("helm-dabbrev--cache" variable nil nil [4098 4130])
            ("helm-dabbrev--data" variable nil nil [4131 4162])
            ("helm-dabbrev--regexp" variable (:default-value "\\s-\\|	\\|[([{\"'`=<$;.]\\|\\s\\\\|^") nil [4163 4235])
            ("cl-defstruct" code nil nil [4236 4292])
            ("helm-dabbrev--buffer-list" function nil nil [4296 4627])
            ("helm-dabbrev--same-major-mode-p" function (:arguments ("start-buffer")) nil [4629 4810])
            ("helm-dabbrev--collect" function (:arguments ("str" "limit" "ignore-case" "all")) nil [4812 8808])
            ("helm-dabbrev--get-candidates" function (:arguments ("abbrev")) nil [8810 9741])
            ("helm-dabbrev-default-action" function (:arguments ("candidate")) nil [9744 10078])
            ("helm-dabbrev" function (:user-visible-flag t) nil [10095 14473])
            ("helm-dabbrev" package nil nil [14475 14498]))          
      :file "helm-dabbrev.el"
      :pointmax 14655
      :fsize 14654
      :lastmodtime '(22375 617 115310 591000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-sys.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [816 833])
            ("helm" include nil nil [834 849])
            ("helm-help" include nil nil [850 870])
            ("helm-utils" include nil nil [871 892])
            ("helm-sys" customgroup (:user-visible-flag t) nil [896 967])
            ("helm-top-columns" variable
               (:default-value (quote ((t :inherit helm-header)))
                :type "face")
                nil [969 1091])
            ("helm-top-command" variable (:default-value (cl-case system-type (darwin "env COLUMNS=%s ps -axo pid,user,pri,nice,ucomm,tty,start,vsz,%%cpu,%%mem,etime,command") (t "env COLUMNS=%s top -b -n 1"))) nil [1095 1844])
            ("helm-top-poll-delay" variable (:default-value 1.5) nil [1846 2064])
            ("helm-top-poll-delay-post-command" variable (:default-value 1.0) nil [2066 2272])
            ("helm-top-poll-preselection" variable (:default-value (quote linum)) nil [2274 2626])
            ("helm-top-sort-fn" variable nil nil [2653 2682])
            ("helm-top-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "M-P") (quote helm-top-run-sort-by-cpu)) (define-key map (kbd "M-C") (quote helm-top-run-sort-by-com)) (define-key map (kbd "M-M") (quote helm-top-run-sort-by-mem)) (define-key map (kbd "M-U") (quote helm-top-run-sort-by-user)) map)) nil [2683 3031])
            ("helm-top-after-init-hook" variable nil nil [3033 3099])
            ("helm-top--poll-timer" variable nil nil [3101 3134])
            ("helm-top-poll" function (:arguments ("no-update" "delay")) nil [3136 4258])
            ("helm-top--poll-delay" function nil nil [4260 4323])
            ("helm-top-poll-no-update" function nil nil [4325 4461])
            ("helm-top-initialize-poll-hooks" function nil nil [4463 4998])
            ("define-minor-mode" code nil nil [5015 5478])
            ("helm-source-top" variable (:default-value (helm-build-in-buffer-source "Top" :header-name (lambda (name) (concat name (if helm-top-poll-mode " (auto updating)" " (Press C-c C-u to refresh)"))) :init (function helm-top-init) :after-init-hook (quote helm-top-after-init-hook) :cleanup (lambda nil (when helm-top--poll-timer (cancel-timer helm-top--poll-timer)) (remove-hook (quote post-command-hook) (quote helm-top-poll-no-update)) (remove-hook (quote focus-in-hook) (quote helm-top-poll-no-update))) :nomark t :display-to-real (function helm-top-display-to-real) :persistent-action (function helm-top-sh-persistent-action) :persistent-help "SIGTERM" :help-message (quote helm-top-help-message) :follow (quote never) :keymap helm-top-map :filtered-candidate-transformer (function helm-top-sort-transformer) :action-transformer (function helm-top-action-transformer))) nil [5480 6440])
            ("helm-top--line" variable nil nil [6442 6469])
            ("helm-top-transformer" function (:arguments ("candidates" "_source")) nil [6470 6988])
            ("helm-top--skip-top-line" function nil nil [6990 7294])
            ("helm-top-action-transformer" function (:arguments ("actions" "_candidate")) nil [7296 8530])
            ("helm-top-sh" function (:arguments ("sig" "pid")) nil [8532 8740])
            ("helm-top-sh-persistent-action" function (:arguments ("pid")) nil [8742 8859])
            ("helm-top-init" function nil nil [8861 9188])
            ("helm-top-display-to-real" function (:arguments ("line")) nil [9190 9288])
            ("helm-top-set-mode-line" function (:arguments ("str")) nil [9311 9576])
            ("helm-top-sort-transformer" function (:arguments ("candidates" "source")) nil [9578 10035])
            ("helm-top-sort-by-com" function (:arguments ("s1" "s2")) nil [10037 10243])
            ("helm-top-sort-by-mem" function (:arguments ("s1" "s2")) nil [10245 10481])
            ("helm-top-sort-by-user" function (:arguments ("s1" "s2")) nil [10483 10692])
            ("helm-top-run-sort-by-com" function nil nil [10694 10961])
            ("helm-top-run-sort-by-cpu" function nil nil [10963 11212])
            ("helm-top-run-sort-by-mem" function nil nil [11214 11481])
            ("helm-top-run-sort-by-user" function nil nil [11483 11753])
            ("helm-xrandr-info" function nil nil [11833 12356])
            ("helm-xrandr-screen" function nil nil [12358 12450])
            ("helm-xrandr-output" function nil nil [12452 12544])
            ("helm-source-xrandr-change-resolution" variable (:default-value (quote ((name . "Change Resolution") (candidates lambda nil (with-temp-buffer (call-process "xrandr" nil (current-buffer) nil "--screen" (helm-xrandr-screen) "-q") (goto-char 1) (cl-loop with modes = nil while (re-search-forward "   \\([0-9]+x[0-9]+\\)" nil t) for mode = (match-string 1) unless (member mode modes) collect mode into modes finally return modes))) (action ("Change Resolution" lambda (mode) (call-process "xrandr" nil nil nil "--screen" (helm-xrandr-screen) "--output" (helm-xrandr-output) "--mode" mode)))))) nil [12546 13376])
            ("helm-source-emacs-process" variable (:default-value (quote ((name . "Emacs Process") (init lambda nil (list-processes--refresh)) (candidates lambda nil (mapcar (function process-name) (process-list))) (persistent-action lambda (elm) (delete-process (get-process elm)) (helm-delete-current-selection)) (persistent-help . "Kill Process") (action ("Kill Process" lambda (elm) (delete-process (get-process elm))))))) nil [13404 13904])
            ("helm-top" function (:user-visible-flag t) nil [13923 14404])
            ("helm-list-emacs-process" function (:user-visible-flag t) nil [14421 14581])
            ("helm-xrandr-set" function (:user-visible-flag t) nil [14598 14763])
            ("helm-sys" package nil nil [14765 14784]))          
      :file "helm-sys.el"
      :pointmax 14937
      :fsize 14936
      :lastmodtime '(22375 617 83310 591000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-eshell.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1146 1163])
            ("helm" include nil nil [1164 1179])
            ("helm-lib" include nil nil [1180 1199])
            ("helm-help" include nil nil [1200 1220])
            ("helm-elisp" include nil nil [1221 1242])
            ("declare-function" code nil nil [1244 1298])
            ("declare-function" code nil nil [1299 1388])
            ("declare-function" code nil nil [1389 1429])
            ("declare-function" code nil nil [1430 1491])
            ("declare-function" code nil nil [1492 1562])
            ("declare-function" code nil nil [1563 1614])
            ("helm-eshell" customgroup (:user-visible-flag t) nil [1618 1699])
            ("helm-eshell-history-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "M-p") (quote helm-next-line)) map)) nil [1703 1904])
            ("helm-esh-completion-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "TAB") (quote helm-next-line)) map)) nil [1906 2106])
            ("helm-esh-source" type
               (:superclasses "helm-source-sync"
                :members 
                  ( ("init" variable (:default-value "(lambda nil (setq pcomplete-current-completions nil pcomplete-last-completion-raw nil) (remove-hook (quote minibuffer-setup-hook) (quote eshell-mode)))") nil nil)
                    ("candidates" variable (:default-value "(quote helm-esh-get-candidates)") nil nil)
                    ("nomark" variable (:default-value "t") nil nil)
                    ("persistent-action" variable (:default-value "(quote ignore)") nil nil)
                    ("nohighlight" variable (:default-value "t") nil nil)
                    ("filtered-candidate-transformer" variable (:default-value "(lambda (candidates _sources) (cl-loop for i in candidates collect (cond ((string-match \"\\\\`~/?\" helm-ec-target) (abbreviate-file-name i)) ((string-match \"\\\\`/\" helm-ec-target) i) (t (file-relative-name i))) into lst finally return (sort lst (quote helm-generic-sort-fn))))") nil nil)
                    ("action" variable (:default-value "(quote helm-ec-insert)") nil nil))                  
                :type "class")
                nil [2110 3180])
            ("helm-ec-target" variable nil nil [3195 3221])
            ("helm-ec-insert" function (:arguments ("candidate")) nil [3222 4066])
            ("helm-esh-get-candidates" function nil nil [4068 6779])
            ("helm-eshell-history-source" type
               (:superclasses "helm-source-sync"
                :members 
                  ( ("init" variable (:default-value "(lambda nil (remove-hook (quote minibuffer-setup-hook) (quote eshell-mode)))") nil nil)
                    ("candidates" variable (:default-value "(lambda nil (with-helm-current-buffer (cl-loop for c from 0 to (ring-length eshell-history-ring) collect (eshell-get-history c))))") nil nil)
                    ("nomark" variable (:default-value "t") nil nil)
                    ("multiline" variable (:default-value "t") nil nil)
                    ("keymap" variable (:default-value "helm-eshell-history-map") nil nil)
                    ("candidate-number-limit" variable (:default-value "9999") nil nil)
                    ("action" variable (:default-value "(lambda (candidate) (eshell-kill-input) (insert candidate))") nil nil))                  
                :type "class")
                nil [6808 7534])
            ("helm-esh-pcomplete" function (:user-visible-flag t) nil [7553 9747])
            ("helm-eshell-history" function (:user-visible-flag t) nil [9764 10498])
            ("helm-eshell" package nil nil [10500 10522]))          
      :file "helm-eshell.el"
      :pointmax 10675
      :fsize 10674
      :lastmodtime '(22375 616 679310 586000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-misc.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [808 825])
            ("helm" include nil nil [826 841])
            ("helm-help" include nil nil [842 862])
            ("helm-types" include nil nil [863 884])
            ("declare-function" code nil nil [886 941])
            ("display-time-world-list" variable nil nil [942 974])
            ("helm-misc" customgroup (:user-visible-flag t) nil [978 1066])
            ("helm-time-zone-home-location" variable (:default-value "Paris") nil [1068 1183])
            ("helm-timezone-actions" variable (:default-value (quote (("Set timezone env (TZ)" lambda (candidate) (setenv "TZ" candidate))))) nil [1185 1435])
            ("helm-mini-default-sources" variable (:default-value (quote (helm-source-buffers-list helm-source-recentf helm-source-buffer-not-found))) nil [1437 1729])
            ("helm-time-zone-current" variable
               (:default-value (quote ((t (:foreground "green"))))
                :type "face")
                nil [1731 1877])
            ("helm-time-zone-home" variable
               (:default-value (quote ((t (:foreground "red"))))
                :type "face")
                nil [1879 2017])
            ("LaTeX-math-menu" variable nil nil [2043 2067])
            ("helm-latex-math-candidates" function nil nil [2068 2335])
            ("helm-source-latex-math" variable (:default-value (quote ((name . "Latex Math Menu") (init lambda nil (with-helm-current-buffer (LaTeX-math-mode 1))) (candidate-number-limit . 9999) (candidates . helm-latex-math-candidates) (action lambda (candidate) (call-interactively candidate))))) nil [2337 2667])
            ("helm-jabber-online-contacts" function nil nil [2703 3018])
            ("helm-source-jabber-contacts" variable (:default-value (quote ((name . "Jabber Contacts") (init lambda nil (require (quote jabber))) (candidates lambda nil (mapcar (quote car) (helm-jabber-online-contacts))) (action lambda (x) (jabber-chat-with (jabber-read-account) (symbol-name (cdr (assoc x (helm-jabber-online-contacts))))))))) nil [3020 3403])
            ("helm-time-zone-transformer" function (:arguments ("candidates" "_source")) nil [3423 3909])
            ("helm-source-time-world" variable (:default-value (helm-build-in-buffer-source "Time World List" :data (lambda nil (with-temp-buffer (display-time-world-display display-time-world-list) (buffer-string))) :action (quote helm-timezone-actions) :filtered-candidate-transformer (quote helm-time-zone-transformer))) nil [3911 4241])
            ("declare-function" code nil nil [4261 4349])
            ("helm-lacarte-candidate-transformer" function (:arguments ("cands")) nil [4351 4725])
            ("helm-lacarte" type
               (:interfaces ("helm-type-command")
                :superclasses "helm-source-sync"
                :members 
                  ( ("init" variable (:default-value "(lambda nil (require (quote lacarte)))") nil nil)
                    ("candidates" variable (:default-value "(quote helm-lacarte-get-candidates)") nil nil)
                    ("candidate-transformer" variable (:default-value "(quote helm-lacarte-candidate-transformer)") nil nil)
                    ("candidate-number-limit" variable (:default-value "9999") nil nil))                  
                :type "class")
                nil [4727 5018])
            ("helm-lacarte-get-candidates" function (:arguments ("maps")) nil [5020 5534])
            ("helm-browse-menubar" function (:user-visible-flag t) nil [5551 6048])
            ("helm-call-interactively" function (:arguments ("cmd-or-name")) nil [6050 6653])
            ("helm-source-minibuffer-history" variable (:default-value (helm-build-sync-source "Minibuffer History" :header-name (lambda (name) (format "%s (%s)" name minibuffer-history-variable)) :candidates (lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) :migemo t :multiline t :action (lambda (candidate) (delete-minibuffer-contents) (insert candidate)))) nil [6684 7333])
            ("helm-comint-input-ring-action" function (:arguments ("candidate")) nil [7359 7564])
            ("helm-source-comint-input-ring" variable (:default-value (quote ((name . "Comint history") (candidates lambda nil (with-helm-current-buffer (ring-elements comint-input-ring))) (action . helm-comint-input-ring-action)))) nil [7566 7883])
            ("helm-source-ratpoison-commands" variable (:default-value (quote ((name . "Ratpoison Commands") (init . helm-ratpoison-commands-init) (candidates-in-buffer) (action ("Execute the command" . helm-ratpoison-commands-execute)) (display-to-real . helm-ratpoison-commands-display-to-real) (candidate-number-limit)))) nil [7915 8222])
            ("helm-ratpoison-commands-init" function nil nil [8224 8851])
            ("helm-ratpoison-commands-display-to-real" function (:arguments ("display")) nil [8853 8987])
            ("helm-ratpoison-commands-execute" function (:arguments ("candidate")) nil [8989 9097])
            ("helm-source-stumpwm-commands" variable (:default-value (quote ((name . "Stumpwm Commands") (init . helm-stumpwm-commands-init) (candidates-in-buffer) (action ("Execute the command" . helm-stumpwm-commands-execute)) (candidate-number-limit)))) nil [9125 9360])
            ("helm-stumpwm-commands-init" function nil nil [9362 9737])
            ("helm-stumpwm-commands-execute" function (:arguments ("candidate")) nil [9739 9839])
            ("helm-world-time" function (:user-visible-flag t) nil [9856 10073])
            ("helm-insert-latex-math" function (:user-visible-flag t) nil [10090 10258])
            ("helm-ratpoison-commands" function (:user-visible-flag t) nil [10275 10484])
            ("helm-stumpwm-commands" function (:user-visible-flag t) nil [10501 10692])
            ("helm-minibuffer-history" function (:user-visible-flag t) nil [10709 10951])
            ("helm-comint-input-ring" function (:user-visible-flag t) nil [10968 11366])
            ("helm-misc" package nil nil [11369 11389]))          
      :file "helm-misc.el"
      :pointmax 11543
      :fsize 11542
      :lastmodtime '(22375 617 219310 592000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-semantic.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [901 918])
            ("semantic" include nil nil [919 938])
            ("helm-help" include nil nil [939 959])
            ("helm-imenu" include nil nil [960 981])
            ("declare-function" code nil nil [983 1070])
            ("helm-semantic" customgroup (:user-visible-flag t) nil [1072 1178])
            ("helm-semantic-lynx-style-map" variable (:default-value t) nil [1180 1306])
            ("helm-semantic-display-style" variable (:default-value (quote ((python-mode . semantic-format-tag-summarize) (c-mode . semantic-format-tag-concise-prototype-c-mode) (emacs-lisp-mode . semantic-format-tag-abbreviate-emacs-lisp-mode)))) nil [1308 2157])
            ("helm-semantic-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (when helm-semantic-lynx-style-map (define-key map (kbd "<left>") (quote helm-maybe-exit-minibuffer)) (define-key map (kbd "<right>") (quote helm-execute-persistent-action))) (delq nil map))) nil [2170 2467])
            ("helm-semantic--tags-cache" variable nil nil [2487 2525])
            ("helm-semantic--fetch-candidates" function (:arguments ("tags" "depth" "class")) nil [2527 4070])
            ("helm-semantic-default-action" function (:arguments ("_candidate" "persistent")) nil [4072 4632])
            ("helm-semantic--maybe-set-needs-update" function nil nil [4634 4804])
            ("helm-source-semantic" variable nil nil [4806 4839])
            ("helm-semantic-source" type
               (:superclasses "helm-source-in-buffer"
                :members 
                  ( ("init" variable (:default-value "(lambda nil (helm-semantic--maybe-set-needs-update) (setq helm-semantic--tags-cache (semantic-fetch-tags)) (with-current-buffer (helm-candidate-buffer (quote global)) (let ((major-mode (with-helm-current-buffer major-mode))) (helm-semantic--fetch-candidates helm-semantic--tags-cache 0))))") nil nil)
                    ("get-line" variable (:default-value "(quote buffer-substring)") nil nil)
                    ("persistent-help" variable (:default-value "Show this entry") nil nil)
                    ("keymap" variable (:default-value "(quote helm-semantic-map)") nil nil)
                    ("help-message" variable (:default-value "(quote helm-semantic-help-message)") nil nil)
                    ("persistent-action" variable (:default-value "(lambda (elm) (helm-semantic-default-action elm t) (helm-highlight-current-line))") nil nil)
                    ("action" variable (:default-value "(quote helm-semantic-default-action)") nil nil))                  
                :type "class")
                nil [4841 5733])
            ("helm-semantic-fuzzy-match" variable nil nil [5735 6085])
            ("helm-semantic" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [6102 6925])
            ("helm-semantic-or-imenu" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [6942 8510])
            ("helm-semantic" package nil nil [8512 8536]))          
      :file "helm-semantic.el"
      :pointmax 8694
      :fsize 8697
      :lastmodtime '(22375 616 947310 589000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-imenu.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [808 825])
            ("helm" include nil nil [826 841])
            ("helm-lib" include nil nil [842 861])
            ("imenu" include nil nil [862 878])
            ("helm-utils" include nil nil [879 900])
            ("helm-help" include nil nil [901 921])
            ("helm-imenu" customgroup (:user-visible-flag t) nil [925 1020])
            ("helm-imenu-delimiter" variable (:default-value " / ") nil [1022 1161])
            ("helm-imenu-execute-action-at-once-if-one" variable (:default-value (function helm-imenu--execute-action-at-once-p)) nil [1163 1346])
            ("helm-imenu-lynx-style-map" variable (:default-value t) nil [1348 1468])
            ("helm-imenu-all-buffer-assoc" variable nil nil [1470 1876])
            ("helm-imenu-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "M-<down>") (quote helm-imenu-next-section)) (define-key map (kbd "M-<up>") (quote helm-imenu-previous-section)) (when helm-imenu-lynx-style-map (define-key map (kbd "<left>") (quote helm-maybe-exit-minibuffer)) (define-key map (kbd "<right>") (quote helm-execute-persistent-action))) (delq nil map))) nil [1890 2311])
            ("helm-imenu-next-or-previous-section" function (:arguments ("n")) nil [2313 2943])
            ("helm-imenu-next-section" function nil nil [2945 3037])
            ("helm-imenu-previous-section" function nil nil [3039 3136])
            ("helm-cached-imenu-alist" variable nil nil [3154 3190])
            ("make-variable-buffer-local" code nil nil [3191 3244])
            ("helm-cached-imenu-candidates" variable nil nil [3246 3287])
            ("make-variable-buffer-local" code nil nil [3288 3346])
            ("helm-cached-imenu-tick" variable nil nil [3348 3383])
            ("make-variable-buffer-local" code nil nil [3384 3436])
            ("helm-source-imenu" variable nil nil [3440 3500])
            ("helm-source-imenu-all" variable nil nil [3501 3535])
            ("helm-imenu-source" type
               (:superclasses "helm-source-sync"
                :members 
                  ( ("candidates" variable (:default-value "(quote helm-imenu-candidates)") nil nil)
                    ("candidate-transformer" variable (:default-value "(quote helm-imenu-transformer)") nil nil)
                    ("persistent-action" variable (:default-value "(quote helm-imenu-persistent-action)") nil nil)
                    ("persistent-help" variable (:default-value "Show this entry") nil nil)
                    ("keymap" variable (:default-value "helm-imenu-map") nil nil)
                    ("help-message" variable (:default-value "(quote helm-imenu-help-message)") nil nil)
                    ("action" variable (:default-value "(quote helm-imenu-action)") nil nil))                  
                :type "class")
                nil [3537 3938])
            ("helm-imenu-fuzzy-match" variable nil nil [3940 4264])
            ("helm-imenu--maybe-switch-to-buffer" function (:arguments ("candidate")) nil [4267 4394])
            ("helm-imenu--execute-action-at-once-p" function nil nil [4396 4748])
            ("helm-imenu-action" function (:arguments ("candidate")) nil [4750 5261])
            ("helm-imenu-persistent-action" function (:arguments ("candidate")) nil [5263 5467])
            ("helm-imenu-candidates" function (:arguments ("buffer")) nil [5469 6013])
            ("helm-imenu-candidates-in-all-buffers" function nil nil [6015 6849])
            ("helm-imenu--candidates-1" function (:arguments ("alist")) nil [6851 7761])
            ("helm-imenu--get-prop" function (:arguments ("item")) nil [7763 8225])
            ("helm-imenu-transformer" function (:arguments ("candidates")) nil [8227 9096])
            ("helm-imenu" function (:user-visible-flag t) nil [9114 9671])
            ("helm-imenu-in-all-buffers" function (:user-visible-flag t) nil [9688 10686])
            ("helm-imenu" package nil nil [10688 10709]))          
      :file "helm-imenu.el"
      :pointmax 10864
      :fsize 10863
      :lastmodtime '(22375 616 915310 589000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-man.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [798 815])
            ("helm" include nil nil [816 831])
            ("helm-help" include nil nil [832 852])
            ("woman-topic-all-completions" variable nil nil [854 890])
            ("woman-manpath" variable nil nil [891 913])
            ("woman-path" variable nil nil [914 933])
            ("woman-expanded-directory-path" variable nil nil [934 972])
            ("declare-function" code nil nil [973 1045])
            ("declare-function" code nil nil [1046 1115])
            ("declare-function" code nil nil [1116 1177])
            ("declare-function" code nil nil [1178 1260])
            ("declare-function" code nil nil [1261 1325])
            ("declare-function" code nil nil [1326 1389])
            ("helm-man" customgroup (:user-visible-flag t) nil [1391 1470])
            ("helm-man-or-woman-function" variable (:default-value (quote Man-getpage-in-background)) nil [1472 1755])
            ("helm-man-format-switches" variable (:default-value "-l %s") nil [1757 2099])
            ("helm-man--pages" variable nil nil [2113 2238])
            ("helm-man-default-action" function (:arguments ("candidate")) nil [2240 3039])
            ("helm-man--init" function nil nil [3041 3479])
            ("helm-source-man-pages" variable (:default-value (helm-build-in-buffer-source "Manual Pages" :init (function helm-man--init) :persistent-action (function ignore) :filtered-candidate-transformer (lambda (candidates _source) (sort candidates (function helm-generic-sort-fn))) :action (quote (("Display Man page" . helm-man-default-action))))) nil [3481 3799])
            ("helm-man-woman" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [3816 4076])
            ("helm-man" package nil nil [4078 4097]))          
      :file "helm-man.el"
      :pointmax 4250
      :fsize 4249
      :lastmodtime '(22375 617 355310 594000)
      :unmatched-syntax nil))
  :file "!home!lyra!.emacs.d!elpa!helm-20160616.217!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
