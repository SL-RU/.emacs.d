;; Object ivy-20160621.207/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "ivy-20160621.207/"
  :tables
  (list
    (semanticdb-table "ivy.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1362 1379])
            ("ffap" include nil nil [1380 1395])
            ("ivy" customgroup (:user-visible-flag t) nil [1415 1492])
            ("ivy-faces" customgroup (:user-visible-flag t) nil [1494 1579])
            ("ivy-current-match" variable
               (:default-value (quote ((((class color) (background light)) :background "#1a4b77" :foreground "white") (((class color) (background dark)) :background "#65a7e2" :foreground "black")))
                :type "face")
                nil [1581 1841])
            ("ivy-minibuffer-match-face-1" variable
               (:default-value (quote ((((class color) (background light)) :background "#d3d3d3") (((class color) (background dark)) :background "#555555")))
                :type "face")
                nil [1843 2070])
            ("ivy-minibuffer-match-face-2" variable
               (:default-value (quote ((((class color) (background light)) :background "#e99ce8" :weight bold) (((class color) (background dark)) :background "#777777" :weight bold)))
                :type "face")
                nil [2072 2330])
            ("ivy-minibuffer-match-face-3" variable
               (:default-value (quote ((((class color) (background light)) :background "#bbbbff" :weight bold) (((class color) (background dark)) :background "#7777ff" :weight bold)))
                :type "face")
                nil [2332 2590])
            ("ivy-minibuffer-match-face-4" variable
               (:default-value (quote ((((class color) (background light)) :background "#ffbbff" :weight bold) (((class color) (background dark)) :background "#8a498a" :weight bold)))
                :type "face")
                nil [2592 2850])
            ("ivy-confirm-face" variable
               (:default-value (quote ((t :foreground "ForestGreen" :inherit minibuffer-prompt)))
                :type "face")
                nil [2852 2988])
            ("ivy-match-required-face" variable
               (:default-value (quote ((t :foreground "red" :inherit minibuffer-prompt)))
                :type "face")
                nil [2990 3127])
            ("ivy-subdir" variable
               (:default-value (quote ((t :inherit dired-directory)))
                :type "face")
                nil [3129 3250])
            ("ivy-modified-buffer" variable
               (:default-value (quote ((t :inherit default)))
                :type "face")
                nil [3252 3377])
            ("ivy-remote" variable
               (:default-value (quote ((t :foreground "#110099")))
                :type "face")
                nil [3379 3497])
            ("ivy-virtual" variable
               (:default-value (quote ((t :inherit font-lock-builtin-face)))
                :type "face")
                nil [3499 3617])
            ("ivy-action" variable
               (:default-value (quote ((t :inherit font-lock-builtin-face)))
                :type "face")
                nil [3619 3743])
            ("setcdr" code nil nil [3745 3808])
            ("ivy-height" variable (:default-value 10) nil [3810 3899])
            ("ivy-count-format" variable (:default-value "%-4d ") nil [3901 4332])
            ("ivy-add-newline-after-prompt" variable nil nil [4334 4456])
            ("ivy-wrap" variable nil nil [4458 4569])
            ("ivy-display-style" variable (:default-value (unless (version< emacs-version "24.5") (quote fancy))) nil [4571 5086])
            ("ivy-on-del-error-function" variable (:default-value (quote minibuffer-keyboard-quit)) nil [5088 5273])
            ("ivy-extra-directories" variable (:default-value (quote ("../" "./"))) nil [5275 5601])
            ("ivy-use-virtual-buffers" variable nil nil [5603 5734])
            ("ivy--actions-list" variable nil nil [5736 5807])
            ("ivy-set-actions" function (:arguments ("cmd" "actions")) nil [5809 5965])
            ("ivy-add-actions" function (:arguments ("cmd" "actions")) nil [5967 6261])
            ("ivy--prompts-list" variable nil nil [6263 6293])
            ("ivy-set-prompt" function (:arguments ("caller" "prompt-fn")) nil [6295 6525])
            ("ivy--display-transformers-list" variable nil nil [6527 6619])
            ("ivy-set-display-transformer" function (:arguments ("cmd" "transformer")) nil [6621 7105])
            ("ivy--sources-list" variable nil nil [7107 7178])
            ("ivy-set-sources" function (:arguments ("cmd" "sources")) nil [7180 7719])
            ("ivy-current-prefix-arg" variable nil nil [7721 7875])
            ("delsel" include nil nil [7888 7905])
            ("ivy-minibuffer-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd "C-m") (quote ivy-done)) (define-key map (kbd "C-M-m") (quote ivy-call)) (define-key map (kbd "C-j") (quote ivy-alt-done)) (define-key map (kbd "C-M-j") (quote ivy-immediate-done)) (define-key map (kbd "TAB") (quote ivy-partial-or-done)) (define-key map [remap next-line] (quote ivy-next-line)) (define-key map [remap previous-line] (quote ivy-previous-line)) (define-key map (kbd "C-s") (quote ivy-next-line-or-history)) (define-key map (kbd "C-r") (quote ivy-reverse-i-search)) (define-key map (kbd "SPC") (quote self-insert-command)) (define-key map [remap delete-backward-char] (quote ivy-backward-delete-char)) (define-key map [remap backward-kill-word] (quote ivy-backward-kill-word)) (define-key map [remap delete-char] (quote ivy-delete-char)) (define-key map [remap forward-char] (quote ivy-forward-char)) (define-key map [remap kill-word] (quote ivy-kill-word)) (define-key map [remap beginning-of-buffer] (quote ivy-beginning-of-buffer)) (define-key map [remap end-of-buffer] (quote ivy-end-of-buffer)) (define-key map (kbd "M-n") (quote ivy-next-history-element)) (define-key map (kbd "M-p") (quote ivy-previous-history-element)) (define-key map (kbd "C-g") (quote minibuffer-keyboard-quit)) (define-key map (kbd "C-v") (quote ivy-scroll-up-command)) (define-key map (kbd "M-v") (quote ivy-scroll-down-command)) (define-key map (kbd "C-M-n") (quote ivy-next-line-and-call)) (define-key map (kbd "C-M-p") (quote ivy-previous-line-and-call)) (define-key map (kbd "M-q") (quote ivy-toggle-regexp-quote)) (define-key map (kbd "M-j") (quote ivy-yank-word)) (define-key map (kbd "M-i") (quote ivy-insert-current)) (define-key map (kbd "C-o") (quote hydra-ivy/body)) (define-key map (kbd "M-o") (quote ivy-dispatching-done)) (define-key map (kbd "C-M-o") (quote ivy-dispatching-call)) (define-key map [remap kill-line] (quote ivy-kill-line)) (define-key map (kbd "S-SPC") (quote ivy-restrict-to-matches)) (define-key map [remap kill-ring-save] (quote ivy-kill-ring-save)) (define-key map (kbd "C-'") (quote ivy-avy)) (define-key map (kbd "C-M-a") (quote ivy-read-action)) (define-key map (kbd "C-c C-o") (quote ivy-occur)) (define-key map (kbd "C-c C-a") (quote ivy-toggle-ignore)) (define-key map [remap describe-mode] (quote ivy-help)) map)) nil [7906 10163])
            ("hydra-ivy/body" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [10164 10207])
            ("ivy-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap switch-to-buffer] (quote ivy-switch-buffer)) (define-key map [remap switch-to-buffer-other-window] (quote ivy-switch-buffer-other-window)) map)) nil [10209 10470])
            ("cl-defstruct" code nil nil [10484 11017])
            ("ivy-last" variable (:default-value (make-ivy-state)) nil [11019 11184])
            ("ivy-set-action" function (:arguments ("action")) nil [11186 11312])
            ("ivy-thing-at-point" function nil nil [11314 11858])
            ("ivy-history" variable nil nil [11860 12026])
            ("ivy--directory" variable nil nil [12028 12105])
            ("ivy--length" variable nil nil [12107 12172])
            ("ivy-text" variable nil nil [12174 12241])
            ("ivy--current" variable nil nil [12243 12290])
            ("ivy--index" variable nil nil [12292 12359])
            ("ivy-exit" variable nil nil [12361 12465])
            ("ivy--all-candidates" variable nil nil [12467 12546])
            ("ivy--extra-candidates" variable (:default-value (quote ((original-source)))) nil [12548 12999])
            ("ivy-use-ignore-default" variable (:default-value t) nil [13001 13275])
            ("ivy-use-ignore" variable (:default-value t) nil [13277 13476])
            ("ivy--default" variable nil nil [13478 13530])
            ("ivy--prompt" variable nil nil [13532 13640])
            ("ivy--prompt-extra" variable nil nil [13642 13714])
            ("ivy--old-re" variable nil nil [13716 13766])
            ("ivy--old-cands" variable nil nil [13768 13846])
            ("ivy--regex-function" variable (:default-value (quote ivy--regex)) nil [13848 13931])
            ("ivy--subexps" variable nil nil [13933 14006])
            ("ivy--full-length" variable nil nil [14008 14122])
            ("ivy--old-text" variable nil nil [14124 14198])
            ("ivy-case-fold-search" variable (:default-value (quote auto)) nil [14200 14288])
            ("Info-current-file" variable nil nil [14290 14316])
            ("unless" code nil nil [14665 14856])
            ("unless" code nil nil [14338 14662])
            ("ivy-quit-and-run" function (:arguments ("body")) nil [14859 15164])
            ("ivy-exit-with-action" function (:arguments ("action")) nil [15166 15415])
            ("with-ivy-window" function (:arguments ("body")) nil [15417 15630])
            ("ivy--done" function (:arguments ("text")) nil [15632 15982])
            ("ivy-done" function (:user-visible-flag t) nil [15997 17022])
            ("ivy-read-action-format-function" variable (:default-value (quote ivy-read-action-format-default)) nil [17024 17162])
            ("ivy-read-action-format-default" function (:arguments ("actions")) nil [17164 17723])
            ("ivy-read-action" function (:user-visible-flag t) nil [17725 18611])
            ("ivy-dispatching-done" function (:user-visible-flag t) nil [18613 18763])
            ("ivy-dispatching-call" function (:user-visible-flag t) nil [18765 19094])
            ("ivy-build-tramp-name" function (:arguments ("x")) nil [19096 19333])
            ("declare-function" code nil nil [19335 19391])
            ("declare-function" code nil nil [19392 19432])
            ("ivy-alt-done" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19434 20242])
            ("ivy--directory-done" function nil nil [20244 22286])
            ("ivy-expand-file-if-directory" function (:arguments ("file-name")) nil [22288 22729])
            ("ivy-tab-space" variable nil nil [22731 22840])
            ("ivy-partial-or-done" function (:user-visible-flag t) nil [22842 23599])
            ("ivy-partial" function (:user-visible-flag t) nil [23601 24704])
            ("ivy-immediate-done" function (:user-visible-flag t) nil [24706 25056])
            ("ivy-resume" function (:user-visible-flag t) nil [25073 26272])
            ("defvar-local" code nil nil [26274 26373])
            ("ivy-set-index" function (:arguments ("index")) nil [26375 26516])
            ("ivy-beginning-of-buffer" function (:user-visible-flag t) nil [26518 26631])
            ("ivy-end-of-buffer" function (:user-visible-flag t) nil [26633 26754])
            ("ivy-scroll-up-command" function (:user-visible-flag t) nil [26756 26957])
            ("ivy-scroll-down-command" function (:user-visible-flag t) nil [26959 27149])
            ("ivy-minibuffer-grow" function (:user-visible-flag t) nil [27151 27312])
            ("ivy-minibuffer-shrink" function (:user-visible-flag t) nil [27314 27553])
            ("ivy-next-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [27555 27888])
            ("ivy-next-line-or-history" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [27890 28166])
            ("ivy-previous-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [28168 28467])
            ("ivy-previous-line-or-history" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [28469 28739])
            ("ivy-toggle-calling" function (:user-visible-flag t) nil [28741 28871])
            ("ivy-toggle-ignore" function (:user-visible-flag t) nil [28873 29123])
            ("ivy--get-action" function (:arguments ("state")) nil [29125 29346])
            ("ivy--get-window" function (:arguments ("state")) nil [29348 29664])
            ("ivy--actionp" function (:arguments ("x")) nil [29666 29797])
            ("ivy-action-wrap" variable nil nil [29799 29911])
            ("ivy-next-action" function (:user-visible-flag t) nil [29913 30296])
            ("ivy-prev-action" function (:user-visible-flag t) nil [30298 30628])
            ("ivy-action-name" function nil nil [30630 30958])
            ("ivy-inhibit-action" variable nil nil [30960 31210])
            ("ivy-call" function (:user-visible-flag t) nil [31212 32459])
            ("ivy-next-line-and-call" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [32461 32666])
            ("ivy-previous-line-and-call" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [32668 32881])
            ("ivy-previous-history-element" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [32883 33101])
            ("ivy-next-history-element" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [33103 33962])
            ("ivy-ffap-url-functions" variable nil nil [33964 34058])
            ("ivy--cd-maybe" function nil nil [34060 35057])
            ("ivy--maybe-scroll-history" function nil nil [35059 35357])
            ("ivy--cd" function (:arguments ("dir")) nil [35359 35715])
            ("ivy-backward-delete-char" function (:user-visible-flag t) nil [35717 36274])
            ("ivy-delete-char" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [36276 36424])
            ("ivy-forward-char" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [36426 36577])
            ("ivy-kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [36579 36721])
            ("ivy-kill-line" function (:user-visible-flag t) nil [36723 36873])
            ("ivy-backward-kill-word" function (:user-visible-flag t) nil [36875 37323])
            ("ivy--regexp-quote" variable (:default-value (quote regexp-quote)) nil [37325 37401])
            ("ivy-toggle-regexp-quote" function (:user-visible-flag t) nil [37403 37562])
            ("avy-all-windows" variable nil nil [37564 37588])
            ("avy-action" variable nil nil [37589 37608])
            ("avy-keys" variable nil nil [37609 37626])
            ("avy-keys-alist" variable nil nil [37627 37650])
            ("avy-style" variable nil nil [37651 37669])
            ("avy-styles-alist" variable nil nil [37670 37695])
            ("declare-function" code nil nil [37696 37737])
            ("declare-function" code nil nil [37738 37780])
            ("eval-after-load" code nil nil [37782 37856])
            ("ivy-avy" function (:user-visible-flag t) nil [37858 39046])
            ("ivy-sort-file-function-default" function (:arguments ("x" "y")) nil [39048 39330])
            ("declare-function" code nil nil [39332 39381])
            ("ivy-sort-file-function-using-ido" function (:arguments ("x" "y")) nil [39383 39742])
            ("ivy-sort-functions-alist" variable (:default-value (quote ((read-file-name-internal . ivy-sort-file-function-default) (internal-complete-buffer) (counsel-git-grep-function) (Man-goto-section) (org-refile) (t . string-lessp)))) nil [39744 40778])
            ("ivy-index-functions-alist" variable (:default-value (quote ((swiper . ivy-recompute-index-swiper) (swiper-multi . ivy-recompute-index-swiper) (counsel-git-grep . ivy-recompute-index-swiper) (counsel-grep . ivy-recompute-index-swiper-async) (t . ivy-recompute-index-zero)))) nil [40780 41250])
            ("ivy-re-builders-alist" variable (:default-value (quote ((t . ivy--regex-plus)))) nil [41252 42001])
            ("ivy-initial-inputs-alist" variable (:default-value (quote ((org-refile . "^") (org-agenda-refile . "^") (org-capture-refile . "^") (counsel-M-x . "^") (counsel-describe-function . "^") (counsel-describe-variable . "^") (man . "^") (woman . "^")))) nil [42003 42291])
            ("ivy-sort-max-size" variable (:default-value 30000) nil [42293 42405])
            ("ivy--sorted-files" function (:arguments ("dir")) nil [42407 43273])
            ("ivy-recursive-restore" variable (:default-value t) nil [43275 43469])
            ("cl-defun" code nil nil [43503 49348])
            ("ivy--reset-state" function (:arguments ("state")) nil [49350 56551])
            ("ivy-add-prompt-count" function (:arguments ("prompt")) nil [56553 57440])
            ("ivy-completing-read" function (:arguments ("prompt" "collection" "predicate" "require-match" "initial-input" "history" "def" "inherit-input-method")) nil [57457 59694])
            ("ivy-completion-beg" variable nil nil [59696 59756])
            ("ivy-completion-end" variable nil nil [59758 59816])
            ("declare-function" code nil nil [59818 59884])
            ("ivy-completion-in-region-action" function (:arguments ("str")) nil [59886 61135])
            ("ivy-completion-common-length" function (:arguments ("str")) nil [61137 61863])
            ("ivy-completion-in-region" function (:arguments ("start" "end" "collection" "predicate")) nil [61865 63587])
            ("ivy-do-completion-in-region" variable (:default-value t) nil [63589 63717])
            ("define-minor-mode" code nil nil [63734 64402])
            ("ivy--preselect-index" function (:arguments ("preselect" "candidates")) nil [64404 64786])
            ("ivy--regex-hash" variable (:default-value (make-hash-table :test (function equal))) nil [64818 64906])
            ("ivy--split" function (:arguments ("str")) nil [64908 66262])
            ("ivy--regex" function (:arguments ("str" "greedy")) nil [66264 67429])
            ("ivy--regex-ignore-order--part" function (:arguments ("str" "discard")) nil [67431 67769])
            ("ivy--regex-ignore-order" function (:arguments ("str")) nil [67771 68445])
            ("ivy--regex-plus" function (:arguments ("str")) nil [68447 69057])
            ("ivy--regex-fuzzy" function (:arguments ("str")) nil [69059 69545])
            ("ivy-fixed-height-minibuffer" variable nil nil [69547 69849])
            ("ivy--minibuffer-setup" function nil nil [69861 70482])
            ("ivy--input" function nil nil [70484 70669])
            ("ivy--cleanup" function nil nil [70671 70853])
            ("ivy-set-prompt-text-properties-function" variable (:default-value (quote ivy-set-prompt-text-properties-default)) nil [70855 71110])
            ("ivy-set-prompt-text-properties-default" function (:arguments ("prompt" "std-props")) nil [71112 71406])
            ("ivy-prompt" function nil nil [71408 71779])
            ("ivy--insert-prompt" function nil nil [71781 74439])
            ("ivy--set-match-props" function (:arguments ("str" "match" "props" "subexp")) nil [74441 74830])
            ("inhibit-message" variable nil nil [74832 74856])
            ("ivy--sort-maybe" function (:arguments ("collection")) nil [74858 75510])
            ("ivy--magic-file-slash" function nil nil [75512 76484])
            ("ivy--exhibit" function nil nil [76486 78469])
            ("ivy--insert-minibuffer" function (:arguments ("text")) nil [78471 79023])
            ("ivy--resize-minibuffer-to-fit" function nil nil [79025 79932])
            ("declare-function" code nil nil [79934 79992])
            ("ivy--add-face" function (:arguments ("str" "face")) nil [79994 80622])
            ("declare-function" code nil nil [80624 80674])
            ("declare-function" code nil nil [80675 80713])
            ("ivy--flx-cache" variable nil nil [80715 80742])
            ("eval-after-load" code nil nil [80744 80815])
            ("ivy-toggle-case-fold" function (:user-visible-flag t) nil [80817 81298])
            ("ivy--re-filter" function (:arguments ("re" "candidates")) nil [81300 81917])
            ("ivy--filter" function (:arguments ("name" "candidates")) nil [81919 84078])
            ("ivy--set-candidates" function (:arguments ("x")) nil [84080 84519])
            ("ivy-sort-matches-functions-alist" variable (:default-value (quote ((t)))) nil [84521 85350])
            ("ivy--sort-files-by-date" function (:arguments ("_name" "candidates")) nil [85352 85697])
            ("ivy--sort" function (:arguments ("name" "candidates")) nil [85699 86366])
            ("ivy--prefix-sort" function (:arguments ("name" "candidates")) nil [86368 86882])
            ("ivy--recompute-index" function (:arguments ("name" "re-str" "cands")) nil [86884 88323])
            ("ivy-recompute-index-swiper" function (:arguments ("_re-str" "cands")) nil [88325 89082])
            ("ivy-recompute-index-swiper-async" function (:arguments ("_re-str" "cands")) nil [89084 89944])
            ("ivy-recompute-index-zero" function (:arguments ("_re-str" "_cands")) nil [89946 89999])
            ("ivy-minibuffer-faces" variable (:default-value (quote (ivy-minibuffer-match-face-1 ivy-minibuffer-match-face-2 ivy-minibuffer-match-face-3 ivy-minibuffer-match-face-4))) nil [90001 90490])
            ("ivy-flx-limit" variable (:default-value 200) nil [90492 90651])
            ("ivy--flx-sort" function (:arguments ("name" "cands")) nil [90653 92269])
            ("ivy-format-function" variable (:default-value (quote ivy-format-function-default)) nil [92271 92643])
            ("ivy--truncate-string" function (:arguments ("str" "width")) nil [92645 92868])
            ("ivy--format-function-generic" function (:arguments ("selected-fn" "other-fn" "strs" "separator")) nil [92870 93317])
            ("ivy-format-function-default" function (:arguments ("cands")) nil [93319 93543])
            ("ivy-format-function-arrow" function (:arguments ("cands")) nil [93545 93808])
            ("ivy-format-function-line" function (:arguments ("cands")) nil [93810 94070])
            ("ivy-add-face-text-property" function (:arguments ("start" "end" "face" "str")) nil [94072 94296])
            ("ivy--format-minibuffer-line" function (:arguments ("str")) nil [94298 96218])
            ("ivy-set-display-transformer" code nil nil [96220 96296])
            ("ivy-set-display-transformer" code nil nil [96297 96379])
            ("ivy-read-file-transformer" function (:arguments ("str")) nil [96381 96504])
            ("ivy--format" function (:arguments ("cands")) nil [96506 97638])
            ("ivy--virtual-buffers" variable nil nil [97640 97710])
            ("recentf-list" variable nil nil [97712 97733])
            ("ivy-virtual-abbreviate" variable (:default-value (quote name)) nil [97735 97973])
            ("ivy--virtual-buffers" function nil nil [97975 99314])
            ("ivy-ignore-buffers" variable (:default-value (quote ("\\` "))) nil [99316 99465])
            ("ivy--buffer-list" function (:arguments ("str" "virtual" "predicate")) nil [99467 99957])
            ("ivy-views" variable (:default-value (and nil (\` (("ivy + *scratch* {}" (vert (file (\, (expand-file-name "ivy.el"))) (buffer "*scratch*"))) ("swiper + *scratch* {}" (horz (file (\, (expand-file-name "swiper.el"))) (buffer "*scratch*"))))))) nil [99959 100935])
            ("ivy-source-views" function nil nil [100937 100991])
            ("ivy-set-sources" code nil nil [100993 101074])
            ("ivy-set-view-recur" function (:arguments ("view")) nil [101076 102251])
            ("ivy--switch-buffer-action" function (:arguments ("buffer")) nil [102253 102896])
            ("ivy--switch-buffer-other-window-action" function (:arguments ("buffer")) nil [102898 103320])
            ("ivy--rename-buffer-action" function (:arguments ("buffer")) nil [103322 103514])
            ("ivy-switch-buffer-map" variable (:default-value (make-sparse-keymap)) nil [103516 103567])
            ("ivy-set-actions" code nil nil [103569 103823])
            ("ivy--switch-buffer-matcher" function (:arguments ("regexp" "candidates")) nil [103825 104443])
            ("ivy-set-display-transformer" code nil nil [104445 104525])
            ("ivy-set-display-transformer" code nil nil [104526 104613])
            ("ivy-switch-buffer-transformer" function (:arguments ("str")) nil [104615 104837])
            ("ivy-switch-buffer-occur" function nil nil [104839 105137])
            ("ivy-switch-buffer" function (:user-visible-flag t) nil [105154 105592])
            ("ivy-switch-buffer-other-window" function (:user-visible-flag t) nil [105609 106014])
            ("ivy-recentf" function (:user-visible-flag t) nil [106031 106282])
            ("ivy-yank-word" function (:user-visible-flag t) nil [106284 106699])
            ("ivy-kill-ring-save" function (:user-visible-flag t) nil [106701 107010])
            ("ivy-insert-current" function (:user-visible-flag t) nil [107012 107307])
            ("ivy-toggle-fuzzy" function (:user-visible-flag t) nil [107309 107602])
            ("ivy-reverse-i-search" function (:user-visible-flag t) nil [107604 108295])
            ("ivy-restrict-to-matches" function (:user-visible-flag t) nil [108297 108518])
            ("defvar-local" code nil nil [108530 108697])
            ("ivy-occur-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-1] (quote ivy-occur-click)) (define-key map (kbd "RET") (quote ivy-occur-press)) (define-key map (kbd "j") (quote ivy-occur-next-line)) (define-key map (kbd "k") (quote ivy-occur-previous-line)) (define-key map (kbd "h") (quote backward-char)) (define-key map (kbd "l") (quote forward-char)) (define-key map (kbd "f") (quote ivy-occur-press)) (define-key map (kbd "g") (quote ivy-occur-revert-buffer)) (define-key map (kbd "a") (quote ivy-occur-read-action)) (define-key map (kbd "o") (quote ivy-occur-dispatch)) (define-key map (kbd "c") (quote ivy-occur-toggle-calling)) (define-key map (kbd "q") (quote quit-window)) map)) nil [108699 109409])
            ("ivy-occur-toggle-calling" function (:user-visible-flag t) nil [109411 109679])
            ("ivy-occur-next-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [109681 109898])
            ("ivy-occur-previous-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [109900 110123])
            ("define-derived-mode" code nil nil [110125 110260])
            ("ivy-occur-grep-mode-map" variable (:default-value (let ((map (copy-keymap ivy-occur-mode-map))) (define-key map (kbd "C-x C-q") (quote ivy-wgrep-change-to-wgrep-mode)) map)) nil [110262 110456])
            ("define-derived-mode" code nil nil [110458 110596])
            ("ivy--occurs-list" variable nil nil [110598 110678])
            ("ivy-set-occur" function (:arguments ("cmd" "occur")) nil [110680 110826])
            ("ivy-set-occur" code nil nil [110828 110887])
            ("ivy-set-occur" code nil nil [110888 110960])
            ("ivy--occur-insert-lines" function (:arguments ("cands")) nil [110962 111181])
            ("ivy-occur" function (:user-visible-flag t) nil [111183 112581])
            ("ivy-occur-revert-buffer" function (:user-visible-flag t) nil [112583 113568])
            ("declare-function" code nil nil [113570 113627])
            ("ivy-wgrep-change-to-wgrep-mode" function (:user-visible-flag t) nil [113629 113847])
            ("ivy-occur-read-action" function (:user-visible-flag t) nil [113849 114015])
            ("ivy-occur-dispatch" function (:user-visible-flag t) nil [114017 114469])
            ("ivy-occur-click" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [114471 114791])
            ("declare-function" code nil nil [114793 114836])
            ("declare-function" code nil nil [114837 114885])
            ("ivy-occur-timer" variable nil nil [114886 114914])
            ("counsel-grep-last-line" variable nil nil [114915 114946])
            ("ivy-occur-press" function (:user-visible-flag t) nil [114948 116828])
            ("ivy-help-file" variable (:default-value (let ((default-directory (if load-file-name (file-name-directory load-file-name) default-directory))) (if (file-exists-p "ivy-help.org") (expand-file-name "ivy-help.org") (if (file-exists-p "doc/ivy-help.org") (expand-file-name "doc/ivy-help.org"))))) nil [116830 117333])
            ("ivy-help" function (:user-visible-flag t) nil [117335 117811])
            ("ivy" package nil nil [117813 117827]))          
      :file "ivy.el"
      :pointmax 117850
      :fsize 117849
      :lastmodtime '(22379 7883 6416 751000)
      :unmatched-syntax '((close-paren 14856 . 14857) (symbol 14319 . 14335) (open-paren 14318 . 14319))))
  :file "!home!lyra!.emacs.d!elpa!ivy-20160621.207!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
