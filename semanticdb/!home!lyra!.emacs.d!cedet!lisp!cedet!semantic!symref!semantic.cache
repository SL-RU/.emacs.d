;; Object symref/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "symref/"
  :tables
  (list
    (semanticdb-table "global.el"
      :file "global.el"
      :fsize 2444
      :lastmodtime '(22436 31432 274422 179000))
    (semanticdb-table "filter.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1330 1349])
            ("semantic/analyze" include nil nil [1350 1377])
            ("declare-function" code nil nil [1378 1444])
            ("declare-function" code nil nil [1445 1495])
            ("declare-function" code nil nil [1496 1545])
            ("declare-function" code nil nil [1546 1614])
            ("declare-function" code nil nil [1615 1676])
            ("declare-function" code nil nil [1677 1750])
            ("semantic-symref-filter-hit" function (:arguments ("target" "position")) nil [1767 2132])
            ("semantic-symref-hits-in-region" function (:arguments ("target" "hookfcn" "start" "end")) nil [2252 3226])
            ("semantic-symref-test-count-hits-in-tag" function (:user-visible-flag t) nil [3228 4031])
            ("semantic-symref-rename-local-variable" function (:user-visible-flag t) nil [4033 5670])
            ("semantic/symref/filter" package nil nil [5672 5705]))          
      :file "filter.el"
      :pointmax 5747
      :fsize 5746
      :lastmodtime '(22436 31432 274422 179000)
      :unmatched-syntax nil)
    (semanticdb-table "list.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/symref" include nil nil [1256 1282])
            ("semantic/complete" include nil nil [1283 1311])
            ("semantic/senator" include nil nil [1312 1339])
            ("pulse" include nil nil [1340 1356])
            ("semantic-symref" function (:user-visible-flag t) nil [1384 2293])
            ("semantic-symref-symbol" function
               (:user-visible-flag t
                :arguments ("sym"))
                nil [2310 2960])
            ("semantic-symref-regexp" function
               (:user-visible-flag t
                :arguments ("sym"))
                nil [2977 3629])
            ("semantic-symref-results-mode" customgroup (:user-visible-flag t) nil [3651 3739])
            ("semantic-symref-results-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (suppress-keymap km) (define-key km "	" (quote forward-button)) (define-key km "\303-i" (quote backward-button)) (define-key km " " (quote push-button)) (define-key km "-" (quote semantic-symref-list-toggle-showing)) (define-key km "=" (quote semantic-symref-list-toggle-showing)) (define-key km "+" (quote semantic-symref-list-toggle-showing)) (define-key km "n" (quote semantic-symref-list-next-line)) (define-key km "p" (quote semantic-symref-list-prev-line)) (define-key km "q" (quote semantic-symref-hide-buffer)) (define-key km "" (quote semantic-symref-list-expand-all)) (define-key km "" (quote semantic-symref-list-contract-all)) (define-key km "R" (quote semantic-symref-list-rename-open-hits)) (define-key km "(" (quote semantic-symref-list-create-macro-on-open-hit)) (define-key km "E" (quote semantic-symref-list-call-macro-on-open-hits)) km)) nil [3741 4709])
            ("semantic-symref-list-menu-entries" variable (:default-value (list "Symref" (semantic-menu-item ["Toggle Line Open" semantic-symref-list-toggle-showing :active t :help "Toggle the current line open or closed."]) (semantic-menu-item ["Expand All Entries" semantic-symref-list-expand-all :active t :help "Expand every expandable entry."]) (semantic-menu-item ["Contract All Entries" semantic-symref-list-contract-all :active t :help "Close every expandable entry."]) (semantic-menu-item ["Rename Symbol in Open hits" semantic-symref-list-rename-open-hits :active t :help "Rename the searched for symbol in all hits that are currently open."]))) nil [4711 5507])
            ("semantic-symref-list-menu" variable nil nil [5509 5606])
            ("easy-menu-define" code nil nil [5608 5744])
            ("semantic-symref-auto-expand-results" variable nil nil [5746 5871])
            ("semantic-symref-results-mode-hook" variable nil nil [5873 5993])
            ("semantic-symref-current-results" variable nil nil [5995 6089])
            ("semantic-symref-produce-list-on-results" function (:arguments ("res" "str")) nil [6091 6668])
            ("define-derived-mode" code nil nil [6670 6948])
            ("semantic-symref-hide-buffer" function (:user-visible-flag t) nil [6950 7066])
            ("semantic-symref-results-summary-function" variable (:default-value (quote semantic-format-tag-prototype)) nil [7068 7309])
            ("semantic-symref-results-dump" function (:arguments ("results")) nil [7311 8410])
            ("semantic-symref-list-toggle-showing" function (:user-visible-flag t) nil [8456 8695])
            ("semantic-symref-rb-toggle-expand-tag" function
               (:user-visible-flag t
                :arguments ("button"))
                nil [8697 10182])
            ("semantic-symref-rb-goto-file" function (:arguments ("button")) nil [10184 10597])
            ("semantic-symref-rb-goto-tag" function
               (:user-visible-flag t
                :arguments ("button"))
                nil [10600 11060])
            ("semantic-symref-rb-goto-match" function
               (:user-visible-flag t
                :arguments ("button"))
                nil [11062 11587])
            ("semantic-symref-list-next-line" function (:user-visible-flag t) nil [11589 11738])
            ("semantic-symref-list-prev-line" function (:user-visible-flag t) nil [11740 11890])
            ("semantic-symref-list-expand-all" function (:user-visible-flag t) nil [11892 12230])
            ("semantic-symref-list-contract-all" function (:user-visible-flag t) nil [12232 12572])
            ("semantic-symref-list-on-hit-p" function nil nil [12642 12999])
            ("semantic-symref-list-create-macro-on-open-hit" function (:user-visible-flag t) nil [13110 14427])
            ("semantic-symref-list-call-macro-on-open-hits" function (:user-visible-flag t) nil [14429 14992])
            ("semantic-symref-list-rename-open-hits" function
               (:user-visible-flag t
                :arguments ("newname"))
                nil [15087 15622])
            ("semantic-symref-list-map-open-hits" function (:arguments ("function")) nil [15737 17082])
            ("semantic-symref-list-update-open-hits" function nil nil [17084 17583])
            ("semantic/symref/list" package nil nil [17585 17616]))          
      :file "list.el"
      :pointmax 17786
      :fsize 17785
      :lastmodtime '(22436 31432 274422 179000)
      :unmatched-syntax nil)
    (semanticdb-table "cscope.el"
      :file "cscope.el"
      :fsize 3147
      :lastmodtime '(22436 31432 274422 179000))
    (semanticdb-table "grep.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/symref" include nil nil [1150 1176])
            ("grep" include nil nil [1177 1192])
            ("semantic-symref-tool-grep" type
               (:superclasses "semantic-symref-tool-baseclass"
                :type "class")
                nil [1229 1499])
            ("semantic-symref-filepattern-alist" variable (:default-value (quote ((c-mode "*.[ch]") (c++-mode "*.[chCH]" "*.[ch]pp" "*.cc" "*.hh") (html-mode "*.s?html" "*.php")))) nil [1501 1753])
            ("semantic-symref-derive-find-filepatterns" function (:arguments ("mode")) nil [1755 2949])
            ("semantic-symref-grep-expand-keywords" variable (:default-value (condition-case nil (let* ((kw (copy-alist grep-expand-keywords)) (C (assoc "<C>" kw)) (R (assoc "<R>" kw))) (setcdr C (quote grepflags)) (setcdr R (quote greppattern)) kw) (error nil))) nil [2951 3262])
            ("semantic-symref-grep-use-template" function (:arguments ("rootdir" "filepattern" "grepflags" "greppattern")) nil [3264 4092])
            ("semantic-symref-grep-shell" variable (:default-value "sh") nil [4094 4274])
            ("semantic-symref-perform-search" function
               (:parent "semantic-symref-tool-grep"
                :arguments ("tool"))
                nil [4276 5941])
            ("semantic-symref-parse-tool-output-one-line" function
               (:parent "semantic-symref-tool-grep"
                :arguments ("tool"))
                nil [5943 6435])
            ("semantic/symref/grep" package nil nil [6437 6468]))          
      :file "grep.el"
      :pointmax 6638
      :fsize 6637
      :lastmodtime '(22436 31432 274422 179000)
      :unmatched-syntax nil))
  :file "!home!lyra!.emacs.d!cedet!lisp!cedet!semantic!symref!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
