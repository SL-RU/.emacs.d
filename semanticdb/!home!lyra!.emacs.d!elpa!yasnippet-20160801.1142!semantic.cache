;; Object yasnippet-20160801.1142/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "yasnippet-20160801.1142/"
  :tables
  (list
    (semanticdb-table "yasnippet-autoloads.el"
      :major-mode 'emacs-lisp-mode
      :tags nil
      :file "yasnippet-autoloads.el"
      :pointmax 291
      :fsize 1760
      :lastmodtime '(22437 54222 413045 779000)
      :unmatched-syntax nil)
    (semanticdb-table "yasnippet.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [4816 4833])
            ("easymenu" include nil nil [4834 4853])
            ("help-mode" include nil nil [4854 4874])
            ("yas--editing-template" variable nil nil [4876 4906])
            ("yas--guessed-modes" variable nil nil [4907 4934])
            ("yas--indent-original-column" variable nil nil [4935 4971])
            ("yas--scheduled-jit-loads" variable nil nil [4972 5005])
            ("yas-keymap" variable nil nil [5006 5025])
            ("yas-selected-text" variable nil nil [5026 5052])
            ("yas-verbosity" variable nil nil [5053 5075])
            ("yas--current-template" variable nil nil [5076 5106])
            ("yasnippet" customgroup (:user-visible-flag t) nil [5143 5236])
            ("yas-installed-snippets-dir" variable nil nil [5238 5277])
            ("setq" code nil nil [5278 5414])
            ("yas--default-user-snippets-dir" variable
               (:constant-flag t
                :default-value (expand-file-name "snippets" user-emacs-directory))
                nil [5416 5510])
            ("yas-snippet-dirs" variable (:default-value (remove nil (list yas--default-user-snippets-dir (quote yas-installed-snippets-dir)))) nil [5512 6519])
            ("yas-snippet-dirs" function nil nil [6521 7052])
            ("yas-new-snippet-default" variable (:default-value "# -*- mode: snippet -*-
# name: $1
# key: ${2:${1:$(yas--key-from-desc yas-text)}}
# --
$0`(yas-escape-text yas-selected-text)`") nil [7054 7324])
            ("yas-prompt-functions" variable (:default-value (quote (yas-dropdown-prompt yas-completing-prompt yas-maybe-ido-prompt yas-no-prompt))) nil [7326 8270])
            ("yas-indent-line" variable (:default-value (quote auto)) nil [8272 8811])
            ("yas-also-auto-indent-first-line" variable nil nil [8813 9005])
            ("yas-snippet-revival" variable (:default-value t) nil [9007 9119])
            ("yas-triggers-in-field" variable nil nil [9121 9320])
            ("yas-fallback-behavior" variable (:default-value (quote call-other-command)) nil [9322 9969])
            ("yas-choose-keys-first" variable nil nil [9971 10206])
            ("yas-choose-tables-first" variable nil nil [10208 10488])
            ("yas-use-menu" variable (:default-value (quote abbreviate)) nil [10490 11047])
            ("yas-trigger-symbol" variable (:default-value (or (and (eq window-system (quote mac)) (ignore-errors (char-to-string 8677))) " =>")) nil [11049 11375])
            ("yas-wrap-around-region" variable nil nil [11377 11890])
            ("yas-good-grace" variable (:default-value t) nil [11911 12073])
            ("yas-visit-from-menu" variable nil nil [12075 12260])
            ("yas-expand-only-for-last-commands" variable nil nil [12262 12777])
            ("yas-alias-to-yas/prefix-p" variable (:default-value t) nil [12779 12987])
            ("yas-field-highlight-face" variable
               (:default-value (quote ((t (:inherit (quote region)))))
                :type "face")
                nil [13053 13186])
            ("yas--field-debug-face" variable
               (:default-value (quote nil)
                :type "face")
                nil [13188 13287])
            ("yas-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(tab)] (quote yas-next-field-or-maybe-expand)) (define-key map (kbd "TAB") (quote yas-next-field-or-maybe-expand)) (define-key map [(shift tab)] (quote yas-prev-field)) (define-key map [backtab] (quote yas-prev-field)) (define-key map (kbd "C-g") (quote yas-abort-snippet)) (define-key map (kbd "C-d") (quote yas-skip-and-clear-or-delete-char)) map)) nil [13319 13932])
            ("yas-key-syntaxes" variable (:default-value (list "w" "w_" "w_." "w_.()" (function yas-try-key-from-whitespace))) nil [13934 15546])
            ("yas-after-exit-snippet-hook" variable (:default-value (quote nil)) nil [15548 15902])
            ("yas-before-expand-snippet-hook" variable (:default-value (quote nil)) nil [15904 15999])
            ("yas-buffer-local-condition" variable (:default-value (quote (if (and (let ((ppss (syntax-ppss))) (or (nth 3 ppss) (nth 4 ppss))) (memq this-command (quote (yas-expand yas-expand-from-trigger-key yas-expand-from-keymap)))) (quote (require-snippet-condition . force-in-comment)) t))) nil [16001 18100])
            ("yas--version" variable
               (:constant-flag t
                :default-value "0.10.0")
                nil [18128 18160])
            ("yas--menu-table" variable (:default-value (make-hash-table)) nil [18162 18260])
            ("yas--escaped-characters" variable (:default-value (quote (92 96 34 39 36 125 123 40 41))) nil [18262 18387])
            ("yas--field-regexp" variable
               (:constant-flag t
                :default-value "${\\([0-9]+:\\)?\\([^}]*\\)}")
                nil [18389 18494])
            ("yas--multi-dollar-lisp-expression-regexp" variable
               (:constant-flag t
                :default-value "$+[ 	
]*\\(([^)]*)\\)")
                nil [18496 18635])
            ("yas--backquote-lisp-expression-regexp" variable
               (:constant-flag t
                :default-value "`\\([^`]*\\)`")
                nil [18637 18772])
            ("yas--transform-mirror-regexp" variable
               (:constant-flag t
                :default-value "${\\(?:\\([0-9]+\\):\\)?$\\([ 	
]*([^}]*\\)")
                nil [18774 18925])
            ("yas--simple-mirror-regexp" variable
               (:constant-flag t
                :default-value "$\\([0-9]+\\)")
                nil [18927 19024])
            ("yas--snippet-id-seed" variable nil nil [19026 19097])
            ("yas--snippet-next-id" function nil nil [19099 19208])
            ("last-buffer-undo-list" variable nil nil [19311 19345])
            ("yas--minor-mode-menu" variable nil nil [19347 19410])
            ("yas-minor-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(tab)] (quote yas-expand)) (define-key map (kbd "TAB") (quote yas-expand)) (define-key map "&" (quote yas-insert-snippet)) (define-key map "&" (quote yas-new-snippet)) (define-key map "&" (quote yas-visit-snippet-file)) map)) nil [19412 19787])
            ("easy-menu-define" code nil nil [19789 25031])
            ("yas--extra-modes" variable nil nil [25033 25243])
            ("define-obsolete-variable-alias" code nil nil [25244 25319])
            ("yas--tables" variable (:default-value (make-hash-table)) nil [25321 25417])
            ("yas--parents" variable (:default-value (make-hash-table)) nil [25419 25811])
            ("yas--direct-keymaps" variable (:default-value (list)) nil [25813 26319])
            ("yas-direct-keymaps-reload" function (:user-visible-flag t) nil [26321 26701])
            ("yas--modes-to-activate" function (:arguments ("mode")) nil [26703 27775])
            ("yas-minor-mode-hook" variable nil nil [27777 27858])
            ("define-minor-mode" code nil nil [27875 29454])
            ("yas-activate-extra-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [29456 30085])
            ("yas-deactivate-extra-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [30087 30426])
            ("define-obsolete-variable-alias" code nil nil [30428 30518])
            ("yas-dont-activate-functions" variable (:default-value (list (function minibufferp))) nil [30519 31247])
            ("unless" code nil nil [31248 31356])
            ("yas-minor-mode-on" function (:user-visible-flag t) nil [31359 31844])
            ("define-globalized-minor-mode" code nil nil [31861 31940])
            ("yas--global-mode-reload-with-jit-maybe" function nil nil [31942 32088])
            ("add-hook" code nil nil [32090 32163])
            ("yas--font-lock-keywords" variable (:default-value (append (quote (("^#.*$" . font-lock-comment-face))) (with-temp-buffer (let ((prog-mode-hook nil) (emacs-lisp-mode-hook nil)) (ignore-errors (emacs-lisp-mode))) (font-lock-set-defaults) (if (eq t (car-safe font-lock-keywords)) (cadr font-lock-keywords) font-lock-keywords)) (quote (("\\$\\([0-9]+\\)" (0 font-lock-keyword-face) (1 font-lock-string-face t)) ("\\${\\([0-9]+\\):?" (0 font-lock-keyword-face) (1 font-lock-warning-face t)) ("\\(\\$(\\)" 1 font-lock-preprocessor-face) ("}" (0 font-lock-keyword-face)))))) nil [32189 33007])
            ("snippet-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (easy-menu-define nil map "Menu used when snippet-mode is active." (cons "Snippet" (mapcar (function (lambda (ent) (when (nth 2 ent) (define-key map (nth 2 ent) (nth 1 ent))) (vector (nth 0 ent) (nth 1 ent) t))) (quote (("Load this snippet" yas-load-snippet-buffer "") ("Load and quit window" yas-load-snippet-buffer-and-close "") ("Try out this snippet" yas-tryout-snippet "")))))) map)) nil [33009 33693])
            ("define-derived-mode" code nil nil [33711 34089])
            ("cl-defstruct" code nil nil [34140 35635])
            ("cl-defstruct" code nil nil [35637 36839])
            ("yas--get-template-by-uuid" function (:arguments ("mode" "uuid")) nil [36841 37054])
            ("yas--remove-template-by-uuid" function (:arguments ("table" "uuid")) nil [38921 40066])
            ("yas--add-template" function (:arguments ("table" "template")) nil [40068 41038])
            ("yas--update-template" function (:arguments ("table" "template")) nil [41040 41462])
            ("yas--update-template-menu" function (:arguments ("table" "template")) nil [41464 43421])
            ("yas--namehash-templates-alist" function (:arguments ("namehash")) nil [43423 43624])
            ("yas--fetch" function (:arguments ("table" "key")) nil [43626 44007])
            ("yas--eval-condition" function (:arguments ("condition")) nil [44042 44341])
            ("yas--filter-templates-by-condition" function (:arguments ("templates")) nil [44344 45011])
            ("yas--require-template-specific-condition-p" function nil nil [45013 45726])
            ("yas--template-can-expand-p" function (:arguments ("condition" "requirement")) nil [45728 46041])
            ("yas--table-templates" function (:arguments ("table")) nil [46043 46405])
            ("yas--templates-for-key-at-point" function nil nil [46407 47968])
            ("yas--table-all-keys" function (:arguments ("table")) nil [47970 48296])
            ("yas--table-mode" function (:arguments ("table")) nil [48298 48364])
            ("yas--handle-error" function (:arguments ("err")) nil [48404 48618])
            ("yas--eval-lisp" function (:arguments ("form")) nil [48620 49270])
            ("yas--eval-lisp-no-saves" function (:arguments ("form")) nil [49272 49402])
            ("yas--read-lisp" function (:arguments ("string" "nil-on-error")) nil [49404 49772])
            ("yas--read-keybinding" function (:arguments ("keybinding")) nil [49774 50332])
            ("yas--table-get-create" function (:arguments ("mode")) nil [50334 50773])
            ("yas--get-snippet-tables" function (:arguments ("mode")) nil [50775 51169])
            ("yas--menu-keymap-get-create" function (:arguments ("mode" "parents")) nil [51171 51752])
            ("yas--parse-template" function (:arguments ("file")) nil [51808 54932])
            ("yas--calculate-group" function (:arguments ("file")) nil [54934 55578])
            ("yas--subdirs" function (:arguments ("directory" "filep")) nil [55580 56244])
            ("yas--make-menu-binding" function (:arguments ("template")) nil [56246 56455])
            ("yas--expand-or-visit-from-menu" function (:arguments ("mode" "uuid")) nil [56457 57200])
            ("yas--key-from-desc" function (:arguments ("text")) nil [57202 57349])
            ("yas--prompt-for-template" function (:arguments ("templates" "prompt")) nil [57392 58017])
            ("yas--prompt-for-keys" function (:arguments ("keys" "prompt")) nil [58019 58318])
            ("yas--prompt-for-table" function (:arguments ("tables" "prompt")) nil [58320 58689])
            ("yas-x-prompt" function (:arguments ("prompt" "choices" "display-fn")) nil [58691 59468])
            ("yas-maybe-ido-prompt" function (:arguments ("prompt" "choices" "display-fn")) nil [59470 59620])
            ("yas-ido-prompt" function (:arguments ("prompt" "choices" "display-fn")) nil [59622 59773])
            ("yas-dropdown-prompt" function (:arguments ("_prompt" "choices" "display-fn")) nil [59775 60074])
            ("yas-completing-prompt" function (:arguments ("prompt" "choices" "display-fn" "completion-fn")) nil [60076 60567])
            ("yas-no-prompt" function (:arguments ("_prompt" "choices" "_display-fn")) nil [60569 60651])
            ("yas--creating-compiled-snippets" variable nil nil [60776 60820])
            ("yas--define-snippets-1" function (:arguments ("snippet" "snippet-table")) nil [60822 61134])
            ("yas-define-snippets" function (:arguments ("mode" "snippets")) nil [61136 62931])
            ("yas--template-get-file" function (:arguments ("template")) nil [62968 63325])
            ("yas--load-yas-setup-file" function (:arguments ("file")) nil [63327 63702])
            ("yas--define-parents" function (:arguments ("mode" "parents")) nil [63704 63944])
            ("yas-load-directory" function
               (:user-visible-flag t
                :arguments ("top-level-dir" "use-jit" "interactive"))
                nil [63946 66375])
            ("yas--load-directory-1" function (:arguments ("directory" "mode-sym")) nil [66377 67384])
            ("yas--load-directory-2" function (:arguments ("directory" "mode-sym")) nil [67386 68333])
            ("yas--load-snippet-dirs" function (:arguments ("nojit")) nil [68335 69167])
            ("yas-reload-all" function
               (:user-visible-flag t
                :arguments ("no-jit" "interactive"))
                nil [69169 71830])
            ("yas-after-reload-hook" variable nil nil [71832 71904])
            ("yas--load-pending-jits" function nil nil [71906 72285])
            ("yas-escape-text" function (:arguments ("text")) nil [72287 72414])
            ("yas-compile-directory" function
               (:user-visible-flag t
                :arguments ("top-level-dir"))
                nil [72452 72785])
            ("yas-recompile-all" function (:user-visible-flag t) nil [72787 72928])
            ("yas--scheduled-jit-loads" variable (:default-value (make-hash-table)) nil [72952 73083])
            ("yas--schedule-jit" function (:arguments ("mode" "fun")) nil [73085 73174])
            ("yas-about" function nil nil [73210 73375])
            ("yas--template-menu-binding-pair-get-create" function (:arguments ("template" "type")) nil [74781 75502])
            ("yas--template-menu-managed-by-yas-define-menu" function (:arguments ("template")) nil [75503 75697])
            ("yas--show-menu-p" function (:arguments ("mode")) nil [75700 75918])
            ("yas--delete-from-keymap" function (:arguments ("keymap" "uuid")) nil [75920 76892])
            ("yas-define-menu" function (:arguments ("mode" "menu" "omit-items")) nil [76894 78200])
            ("yas--define-menu-1" function (:arguments ("table" "menu-keymap" "menu" "uuidhash" "group-list")) nil [78202 79726])
            ("yas--define" function (:arguments ("mode" "key" "template" "name" "condition" "group")) nil [79729 80204])
            ("yas-hippie-try-expand" function (:arguments ("first-time?")) nil [80206 80497])
            ("yas--condition-cache-timestamp" variable nil nil [80545 80588])
            ("yas-define-condition-cache" function (:arguments ("func" "doc" "body")) nil [80589 81619])
            ("defalias" code nil nil [81621 81672])
            ("yas-expand-from-trigger-key" function
               (:user-visible-flag t
                :arguments ("field"))
                nil [81673 83024])
            ("yas-expand-from-keymap" function (:user-visible-flag t) nil [83026 83772])
            ("yas--expand-or-prompt-for-template" function (:arguments ("templates" "start" "end")) nil [83774 84526])
            ("yas--fallback" function nil nil [84822 86694])
            ("yas--keybinding-beyond-yasnippet" function nil nil [86696 87002])
            ("yas--fallback-translate-input" function (:arguments ("keys")) nil [87004 87974])
            ("yas--all-templates" function (:arguments ("tables")) nil [88014 88768])
            ("yas--lookup-snippet-1" function (:arguments ("name" "mode")) nil [88770 89100])
            ("yas-lookup-snippet" function (:arguments ("name" "mode" "noerror")) nil [89102 89584])
            ("yas-insert-snippet" function
               (:user-visible-flag t
                :arguments ("no-condition"))
                nil [89586 90894])
            ("yas-visit-snippet-file" function (:user-visible-flag t) nil [90896 91573])
            ("yas--visit-snippet-file-1" function (:arguments ("template")) nil [91575 93291])
            ("yas--guess-snippet-directories-1" function (:arguments ("table")) nil [93293 93553])
            ("yas--guess-snippet-directories" function (:arguments ("table")) nil [93555 94598])
            ("yas--make-directory-maybe" function (:arguments ("table-and-dirs" "main-table-string")) nil [94600 95728])
            ("yas-new-snippet" function
               (:user-visible-flag t
                :arguments ("no-template"))
                nil [95730 96728])
            ("yas--compute-major-mode-and-parents" function (:arguments ("file")) nil [96730 98340])
            ("yas--editing-template" variable nil nil [98342 98456])
            ("yas--current-template" variable nil nil [98458 98554])
            ("yas--guessed-modes" variable nil nil [98556 98651])
            ("yas--read-table" function nil nil [98653 99518])
            ("yas-load-snippet-buffer" function
               (:user-visible-flag t
                :arguments ("table" "interactive"))
                nil [99520 100944])
            ("yas-maybe-load-snippet-buffer" function nil nil [100946 101664])
            ("yas-load-snippet-buffer-and-close" function
               (:user-visible-flag t
                :arguments ("table" "kill"))
                nil [101666 102925])
            ("yas-tryout-snippet" function
               (:user-visible-flag t
                :arguments ("debug"))
                nil [102927 104947])
            ("yas-active-keys" function nil nil [104949 105218])
            ("yas--template-fine-group" function (:arguments ("template")) nil [105220 105367])
            ("yas-describe-table-by-namehash" function (:user-visible-flag t) nil [105369 106287])
            ("yas-describe-tables" function
               (:user-visible-flag t
                :arguments ("with-nonactive"))
                nil [106289 106990])
            ("yas--describe-pretty-table" function (:arguments ("table" "original-buffer")) nil [106992 109773])
            ("yas-try-key-from-whitespace" function (:arguments ("_start-point")) nil [109843 110121])
            ("yas-shortest-key-until-whitespace" function (:arguments ("_start-point")) nil [110123 110326])
            ("yas-longest-key-from-whitespace" function (:arguments ("start-point")) nil [110328 110736])
            ("yas-modified-p" variable nil nil [110807 110900])
            ("yas-moving-away-p" variable nil nil [110902 110976])
            ("yas-text" variable nil nil [110978 111032])
            ("yas-substr" function (:arguments ("str" "pattern" "subexp")) nil [111034 111401])
            ("yas-choose-value" function (:arguments ("possibilities")) nil [111403 111946])
            ("yas-key-to-value" function (:arguments ("alist")) nil [111948 112193])
            ("yas-throw" function (:arguments ("text")) nil [112195 112325])
            ("yas-verify-value" function (:arguments ("possibilities")) nil [112327 112633])
            ("yas-field-value" function (:arguments ("number")) nil [112635 112970])
            ("yas-text" function nil nil [112972 113132])
            ("yas-selected-text" function nil nil [113134 113339])
            ("yas--get-field-once" function (:arguments ("number" "transform-fn")) nil [113341 113535])
            ("yas-default-from-field" function (:arguments ("number")) nil [113537 113631])
            ("yas-inside-string" function nil nil [113633 113808])
            ("yas-unimplemented" function (:arguments ("missing-feature")) nil [113810 114231])
            ("yas--active-field-overlay" variable nil nil [114279 114358])
            ("yas--field-protection-overlays" variable nil nil [114360 114454])
            ("yas-selected-text" variable nil nil [114456 114549])
            ("yas--start-column" variable nil nil [114551 114633])
            ("make-variable-buffer-local" code nil nil [114635 114690])
            ("make-variable-buffer-local" code nil nil [114691 114751])
            ("put" code nil nil [114752 114803])
            ("put" code nil nil [114804 114860])
            ("cl-defstruct" code nil nil [114862 115216])
            ("cl-defstruct" code nil nil [115218 115777])
            ("cl-defstruct" code nil nil [115780 116239])
            ("cl-defstruct" code nil nil [116241 116322])
            ("yas--apply-transform" function (:arguments ("field-or-mirror" "field" "empty-on-nil-p")) nil [116324 117379])
            ("yas--replace-all" function (:arguments ("from" "to" "text")) nil [117381 117706])
            ("yas--snippet-find-field" function (:arguments ("snippet" "number")) nil [117708 117886])
            ("yas--snippet-sort-fields" function (:arguments ("snippet")) nil [117888 118109])
            ("yas--snippet-field-compare" function (:arguments ("field1" "field2")) nil [118111 118689])
            ("yas--field-probably-deleted-p" function (:arguments ("snippet" "field")) nil [118691 119459])
            ("yas--snippets-at-point" function (:arguments ("all-snippets")) nil [119461 119991])
            ("yas-next-field-or-maybe-expand" function (:user-visible-flag t) nil [119993 120440])
            ("yas-next-field-will-exit-p" function (:arguments ("arg")) nil [120442 120760])
            ("yas--find-next-field" function (:arguments ("n" "snippet" "active")) nil [120762 121206])
            ("yas-next-field" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [121208 121893])
            ("yas--place-overlays" function (:arguments ("snippet" "field")) nil [121895 122101])
            ("yas--move-to-field" function (:arguments ("snippet" "field")) nil [122103 123011])
            ("yas-prev-field" function (:user-visible-flag t) nil [123013 123140])
            ("yas-abort-snippet" function (:arguments ("snippet")) nil [123142 123356])
            ("yas-exit-snippet" function
               (:user-visible-flag t
                :arguments ("snippet"))
                nil [123358 123733])
            ("yas-exit-all-snippets" function (:user-visible-flag t) nil [123735 123962])
            ("yas--inhibit-overlay-hooks" variable nil nil [124004 124125])
            ("yas-snippet-beg" variable nil nil [124127 124207])
            ("yas-snippet-end" variable nil nil [124208 124282])
            ("yas--commit-snippet" function (:arguments ("snippet")) nil [124284 125930])
            ("yas--safely-run-hooks" function (:arguments ("hook-var")) nil [125932 126111])
            ("yas--check-commit-snippet" function nil nil [126114 127606])
            ("yas--markers-to-points" function (:arguments ("snippet")) nil [128083 129449])
            ("yas--points-to-markers" function (:arguments ("snippet")) nil [129451 130612])
            ("yas--field-contains-point-p" function (:arguments ("field" "point")) nil [130614 130818])
            ("yas--field-text-for-display" function (:arguments ("field")) nil [130820 130989])
            ("yas--undo-in-progress" function nil nil [130991 131153])
            ("yas--make-control-overlay" function (:arguments ("snippet" "start" "end")) nil [131155 131612])
            ("yas-skip-and-clear-or-delete-char" function
               (:user-visible-flag t
                :arguments ("field"))
                nil [131614 132321])
            ("yas--skip-and-clear" function (:arguments ("field" "from")) nil [132323 132933])
            ("yas--mark-this-and-children-modified" function (:arguments ("field")) nil [132935 133316])
            ("yas--make-move-active-field-overlay" function (:arguments ("snippet" "field")) nil [133318 134425])
            ("yas--skip-and-clear-field-p" function (:arguments ("field" "beg" "_end" "length")) nil [134427 134780])
            ("yas--on-field-overlay-modification" function (:arguments ("overlay" "after?" "beg" "end" "length")) nil [134782 135827])
            ("yas--make-move-field-protection-overlays" function (:arguments ("snippet" "field")) nil [136253 137770])
            ("yas--on-protection-overlay-modification" function (:arguments ("_overlay" "after?" "beg" "end" "length")) nil [137772 138322])
            ("add-to-list" code nil nil [138324 138387])
            ("yas-expand-snippet" function (:arguments ("content" "start" "end" "expand-env")) nil [139521 144922])
            ("yas--take-care-of-redo" function (:arguments ("_beg" "_end" "snippet")) nil [144924 145256])
            ("yas--snippet-revive" function (:arguments ("beg" "end" "snippet")) nil [145258 146305])
            ("yas--snippet-create" function (:arguments ("begin" "end")) nil [146307 146918])
            ("yas--fom-start" function (:arguments ("fom")) nil [147691 147888])
            ("yas--fom-end" function (:arguments ("fom")) nil [147890 148081])
            ("yas--fom-next" function (:arguments ("fom")) nil [148083 148275])
            ("yas--fom-parent-field" function (:arguments ("fom")) nil [148277 148476])
            ("yas--calculate-adjacencies" function (:arguments ("snippet")) nil [148478 149725])
            ("yas--calculate-mirrors-in-fields" function (:arguments ("snippet" "mirror")) nil [149727 150488])
            ("yas--advance-end-maybe" function (:arguments ("fom" "newend")) nil [150490 151225])
            ("yas--advance-start-maybe" function (:arguments ("fom" "newstart")) nil [151227 151530])
            ("yas--advance-end-of-parents-maybe" function (:arguments ("field" "newend")) nil [151532 151966])
            ("yas--dollar-regions" variable nil nil [151968 152090])
            ("yas--backquote-markers-and-strings" variable nil nil [152092 152271])
            ("yas--indent-markers" variable nil nil [152273 152349])
            ("yas--snippet-parse-create" function (:arguments ("snippet")) nil [152351 154608])
            ("yas--indent-region" function (:arguments ("from" "to" "snippet")) nil [154610 156310])
            ("yas--indent-original-column" variable nil nil [156312 156352])
            ("yas--indent" function (:arguments ("snippet")) nil [156353 157329])
            ("yas--collect-snippet-markers" function (:arguments ("snippet")) nil [157331 157956])
            ("yas--escape-string" function (:arguments ("escaped")) nil [157958 158054])
            ("yas--protect-escapes" function (:arguments ("text" "escaped")) nil [158056 158646])
            ("yas--restore-escapes" function (:arguments ("text" "escaped")) nil [158648 159228])
            ("yas--save-backquotes" function nil nil [159230 161024])
            ("yas--restore-backquotes" function nil nil [161026 161552])
            ("yas--scan-sexps" function (:arguments ("from" "count")) nil [161554 161750])
            ("yas--make-marker" function (:arguments ("pos")) nil [161752 161947])
            ("yas--indent-parse-create" function nil nil [161949 162349])
            ("yas--field-parse-create" function (:arguments ("snippet" "parent-field")) nil [162351 166231])
            ("yas--transform-mirror-parse-create" function (:arguments ("snippet")) nil [166233 167488])
            ("yas--simple-mirror-parse-create" function (:arguments ("snippet")) nil [167490 168991])
            ("yas--delete-regions" function (:arguments ("regions")) nil [168993 169269])
            ("yas--calculate-mirror-depth" function (:arguments ("mirror" "traversed")) nil [169271 169976])
            ("yas--update-mirrors" function (:arguments ("snippet")) nil [169978 172192])
            ("yas--mirror-update-display" function (:arguments ("mirror" "field" "snippet")) nil [172194 173537])
            ("yas--field-update-display" function (:arguments ("field")) nil [173539 174464])
            ("yas--post-command-handler" function nil nil [174494 175480])
            ("put" code nil nil [175597 175682])
            ("yas--expand-from-trigger-key-doc" function (:arguments ("context")) nil [175683 176687])
            ("put" code nil nil [176689 176780])
            ("yas--expand-from-keymap-doc" function (:arguments ("context")) nil [176781 177945])
            ("yas--template-pretty-list" function (:arguments ("templates")) nil [177947 178267])
            ("define-button-type" code nil nil [178269 178472])
            ("yas--snippet-description-finish-runonce" function nil nil [178474 178721])
            ("yas--create-snippet-xrefs" function nil nil [178723 179206])
            ("yas-verbosity" variable (:default-value 3) nil [179220 179323])
            ("yas--message" function (:arguments ("level" "message" "args")) nil [179325 179535])
            ("yas--warning" function (:arguments ("format-control" "format-args")) nil [179537 179723])
            ("yas--format" function (:arguments ("format-control" "format-args")) nil [179725 179843])
            ("unless" code nil nil [179981 182562])
            ("yas-initialize" function nil nil [182614 182791])
            ("yas--backported-syms" variable (:default-value (quote (yas-snippet-dirs yas-prompt-functions yas-indent-line yas-also-auto-indent-first-line yas-snippet-revival yas-triggers-in-field yas-fallback-behavior yas-choose-keys-first yas-choose-tables-first yas-use-menu yas-trigger-symbol yas-wrap-around-region yas-good-grace yas-visit-from-menu yas-expand-only-for-last-commands yas-field-highlight-face yas-keymap yas-verbosity yas-extra-modes yas-key-syntaxes yas-after-exit-snippet-hook yas-before-expand-snippet-hook yas-buffer-local-condition yas-dont-activate yas-x-prompt yas-ido-prompt yas-no-prompt yas-completing-prompt yas-dropdown-prompt yas-expand yas-minor-mode yas-global-mode yas-direct-keymaps-reload yas-minor-mode-on yas-load-directory yas-reload-all yas-compile-directory yas-recompile-all yas-about yas-expand-from-trigger-key yas-expand-from-keymap yas-insert-snippet yas-visit-snippet-file yas-new-snippet yas-load-snippet-buffer yas-tryout-snippet yas-describe-tables yas-next-field-or-maybe-expand yas-next-field yas-prev-field yas-abort-snippet yas-exit-snippet yas-exit-all-snippets yas-skip-and-clear-or-delete-char yas-initialize yas-expand-snippet yas-define-snippets yas-define-menu yas-snippet-beg yas-snippet-end yas-modified-p yas-moving-away-p yas-substr yas-choose-value yas-key-to-value yas-throw yas-verify-value yas-field-value yas-text yas-selected-text yas-default-from-field yas-inside-string yas-unimplemented yas-define-condition-cache yas-hippie-try-expand))) nil [182793 187675])
            ("when" code nil nil [187677 188212])
            ("yas--exported-syms" variable (:default-value (let (exported) (mapatoms (lambda (atom) (if (and (or (and (boundp atom) (not (get atom (quote byte-obsolete-variable)))) (and (fboundp atom) (not (get atom (quote byte-obsolete-info))))) (string-match-p "\\`yas-[^-]" (symbol-name atom))) (push atom exported)))) exported)) nil [188214 188868])
            ("yasnippet" package nil nil [188872 188892]))          
      :file "yasnippet.el"
      :pointmax 188990
      :fsize 188991
      :lastmodtime '(22437 54222 313045 776000)
      :unmatched-syntax nil))
  :file "!home!lyra!.emacs.d!elpa!yasnippet-20160801.1142!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
