;; Object find-file-in-project-20160614.2332/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "find-file-in-project-20160614.2332/"
  :tables
  (list
    (semanticdb-table "find-file-in-project.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("diff-mode" include nil nil [5264 5284])
            ("ffip-filename-rules" variable (:default-value (quote (ffip-filename-identity (ffip-filename-dashes-to-camelcase ffip-filename-camelcase-to-dashes)))) nil [5286 5464])
            ("ffip-diff-find-file-before-hook" variable nil nil [5466 5590])
            ("ffip-diff-backends" variable (:default-value (quote ((if (require (quote ivy) nil t) (let ((line (ivy-read "git log:" (split-string (shell-command-to-string "git --no-pager log --date=short --pretty=format:'%h|%ad|%s|%an'") "
" t)))) (shell-command-to-string (format "git show %s" (car (split-string line "|" t))))) "git show") "cd $(git rev-parse --show-toplevel) && git diff" "cd $(git rev-parse --show-toplevel) && git diff --cached" (car kill-ring) (if (require (quote ivy) nil t) (let ((line (ivy-read "git log:" (split-string (shell-command-to-string "hg log --template '{node|short}|{date|shortdate}|{desc|strip|firstline}|{author|user}
'
") "
" t)))) (shell-command-to-string (format "hg log -p -g -r %s" (car (split-string line "|" t))))) "hg log -p -g -r tip") "cd $(hg root) && hg diff" "svn diff"))) nil [5592 6721])
            ("ffip-find-executable" variable nil nil [6723 6825])
            ("ffip-project-file" variable (:default-value (quote (".svn" ".hg" ".git"))) nil [6827 7005])
            ("ffip-prefer-ido-mode" variable (:default-value (not (require (quote ivy) nil t))) nil [7007 7131])
            ("ffip-patterns" variable nil nil [7133 7221])
            ("ffip-match-path-instead-of-filename" variable nil nil [7223 7360])
            ("ffip-prune-patterns" variable (:default-value (quote ("*/.git/*" "*/.svn/*" "*/.cvs/*" "*/.bzr/*" "*/.hg/*" "*.log" "*/bin/*" "*/.DS_Store/*" "*/tags" "*/TAGS" "*/GTAGS" "*/GPATH" "*/GRTAGS" "*/cscope.files" "*/.npm/*" "*/.idea/*" "*min.js" "*min.css" "*/node_modules/*" "*/bower_components/*" "*.png" "*.jpg" "*.jpeg" "*.gif" "*.bmp" "*.tiff" "*.ico" "*.doc" "*.docx" "*.pdf" "*.obj" "*.o" "*.a" "*.dylib" "*.lib" "*.d" "*.dll" "*.exe" "*/.metadata*" "*/.gradle/*" "*.class" "*.war" "*.jar" "*flymake" "*/#*#" ".#*" "*.swp" "*~" "*.elc" "*/.cask/*" "*.pyc"))) nil [7362 8391])
            ("ffip-find-options" variable nil nil [8393 8573])
            ("ffip-project-root" variable nil nil [8575 8668])
            ("ffip-project-root-function" variable nil nil [8670 8835])
            ("ffip-full-paths" variable (:default-value t) nil [8837 8914])
            ("ffip-debug" variable nil nil [8916 8966])
            ("ffip-project-root" function nil nil [8983 9763])
            ("ffip--read-file-text" function (:arguments ("file")) nil [9765 10074])
            ("ffip--find-rule-to-execute" function (:arguments ("keyword" "f")) nil [10076 10652])
            ("ffip-filename-identity" function (:arguments ("keyword")) nil [10670 10750])
            ("ffip-filename-camelcase-to-dashes" function (:arguments ("keyword" "check-only")) nil [10767 11582])
            ("ffip-filename-dashes-to-camelcase" function (:arguments ("keyword" "check-only")) nil [11599 12345])
            ("ffip--create-filename-pattern-for-gnufind" function (:arguments ("keyword")) nil [12347 13377])
            ("ffip--guess-gnu-find-on-windows" function (:arguments ("driver" "path")) nil [13379 13542])
            ("ffip--guess-gnu-find" function nil nil [13544 14838])
            ("ffip--join-patterns" function (:arguments ("patterns")) nil [14840 15097])
            ("ffip--prune-patterns" function nil nil [15099 15300])
            ("ffip-completing-read" function (:arguments ("prompt" "collection" "action")) nil [15302 15683])
            ("ffip-project-search" function (:arguments ("keyword" "find-directory")) nil [15685 18078])
            ("ffip--forward-line" function (:arguments ("lnum")) nil [18080 18291])
            ("ffip-find-files" function (:arguments ("keyword" "open-another-window" "find-directory" "fn")) nil [18293 19809])
            ("ffip--prepare-root-data-for-project-file" function (:arguments ("root")) nil [19811 19899])
            ("ffip-create-project-file" function (:user-visible-flag t) nil [19916 21873])
            ("ffip-current-full-filename-match-pattern-p" function (:arguments ("regex")) nil [21890 22110])
            ("find-file-in-project" function
               (:user-visible-flag t
                :arguments ("open-another-window"))
                nil [22127 22594])
            ("ffip-get-project-root-directory" function nil nil [22611 22790])
            ("find-file-in-current-directory" function
               (:user-visible-flag t
                :arguments ("open-another-window"))
                nil [22807 23171])
            ("find-file-in-project-by-selected" function
               (:user-visible-flag t
                :arguments ("open-another-window"))
                nil [23188 24041])
            ("find-file-in-current-directory-by-selected" function
               (:user-visible-flag t
                :arguments ("open-another-window"))
                nil [24058 24458])
            ("find-directory-in-project-by-selected" function
               (:user-visible-flag t
                :arguments ("open-another-window"))
                nil [24475 25222])
            ("defalias" code nil nil [25239 25277])
            ("ffip-diff-quit" function nil nil [25295 25390])
            ("ffip-diff-find-file" function
               (:user-visible-flag t
                :arguments ("open-another-window"))
                nil [25407 26798])
            ("ffip-diff-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map diff-mode-map) (define-key map "p" (quote diff-hunk-prev)) (define-key map "n" (quote diff-hunk-next)) (define-key map "P" (quote diff-file-prev)) (define-key map "N" (quote diff-file-next)) (define-key map [remap diff-goto-source] (quote ffip-diff-find-file)) map)) nil [26800 27183])
            ("define-derived-mode" code nil nil [27185 27350])
            ("ffip-show-content-in-diff-mode" function (:arguments ("content")) nil [27352 27783])
            ("ffip-show-diff" function
               (:user-visible-flag t
                :arguments ("num"))
                nil [27800 28882])
            ("progn" code nil nil [28899 29317])
            ("find-file-in-project" package nil nil [29319 29350]))          
      :file "find-file-in-project.el"
      :pointmax 29389
      :fsize 29388
      :lastmodtime '(22379 7884 78416 789000)
      :unmatched-syntax nil))
  :file "!home!lyra!.emacs.d!elpa!find-file-in-project-20160614.2332!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
