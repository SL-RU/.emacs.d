;; Object macrostep-20151213.145/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "macrostep-20151213.145/"
  :tables
  (list
    (semanticdb-table "macrostep.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("pp" include nil nil [11074 11087])
            ("ring" include nil nil [11088 11103])
            ("cl-lib" include (:directory "lib/cl-lib") nil [11150 11180])
            ("cl-lib" include nil nil [11124 11147])
            ("macrostep-overlays" variable nil nil [11231 11324])
            ("make-variable-buffer-local" code nil nil [11325 11373])
            ("macrostep-gensym-depth" variable nil nil [11375 11484])
            ("make-variable-buffer-local" code nil nil [11485 11537])
            ("macrostep-gensyms-this-level" variable nil nil [11539 11660])
            ("make-variable-buffer-local" code nil nil [11661 11719])
            ("macrostep-saved-undo-list" variable nil nil [11721 11825])
            ("make-variable-buffer-local" code nil nil [11826 11881])
            ("macrostep-saved-read-only" variable nil nil [11883 11987])
            ("make-variable-buffer-local" code nil nil [11988 12043])
            ("macrostep-expansion-buffer" variable nil nil [12045 12147])
            ("make-variable-buffer-local" code nil nil [12148 12204])
            ("macrostep-outer-environment" variable nil nil [12206 12472])
            ("make-variable-buffer-local" code nil nil [12473 12530])
            ("macrostep" customgroup (:user-visible-flag t) nil [12568 12855])
            ("macrostep-gensym-1" variable
               (:default-value (quote ((((min-colors 16581375)) :foreground "#8080c0" :box t :bold t) (((min-colors 8)) :background "cyan") (t :inverse-video t)))
                :type "face")
                nil [12857 13108])
            ("macrostep-gensym-2" variable
               (:default-value (quote ((((min-colors 16581375)) :foreground "#8fbc8f" :box t :bold t) (((min-colors 8)) :background "#00cd00") (t :inverse-video t)))
                :type "face")
                nil [13110 13365])
            ("macrostep-gensym-3" variable
               (:default-value (quote ((((min-colors 16581375)) :foreground "#daa520" :box t :bold t) (((min-colors 8)) :background "yellow") (t :inverse-video t)))
                :type "face")
                nil [13367 13620])
            ("macrostep-gensym-4" variable
               (:default-value (quote ((((min-colors 16581375)) :foreground "#cd5c5c" :box t :bold t) (((min-colors 8)) :background "red") (t :inverse-video t)))
                :type "face")
                nil [13622 13873])
            ("macrostep-gensym-5" variable
               (:default-value (quote ((((min-colors 16581375)) :foreground "#da70d6" :box t :bold t) (((min-colors 8)) :background "magenta") (t :inverse-video t)))
                :type "face")
                nil [13875 14129])
            ("macrostep-expansion-highlight-face" variable
               (:default-value (quote ((((min-colors 16581375) (background light)) :background "#eee8d5") (((min-colors 16581375) (background dark)) :background "#222222")))
                :type "face")
                nil [14131 14377])
            ("macrostep-macro-face" variable
               (:default-value (quote ((t :underline t)))
                :type "face")
                nil [14379 14495])
            ("macrostep-compiler-macro-face" variable
               (:default-value (quote ((t :slant italic)))
                :type "face")
                nil [14497 14632])
            ("macrostep-expand-in-separate-buffer" variable nil nil [14634 14796])
            ("macrostep-expand-compiler-macros" variable (:default-value t) nil [14798 14967])
            ("macrostep-make-ring" function (:arguments ("items")) nil [15020 15242])
            ("macrostep-gensym-faces" variable (:default-value (macrostep-make-ring (quote macrostep-gensym-1) (quote macrostep-gensym-2) (quote macrostep-gensym-3) (quote macrostep-gensym-4) (quote macrostep-gensym-5))) nil [15244 15464])
            ("macrostep-sexp-bounds-function" variable (:default-value (function macrostep-sexp-bounds)) nil [15566 15997])
            ("make-variable-buffer-local" code nil nil [15998 16058])
            ("macrostep-sexp-at-point-function" variable (:default-value (function macrostep-sexp-at-point)) nil [16060 16573])
            ("make-variable-buffer-local" code nil nil [16574 16636])
            ("macrostep-environment-at-point-function" variable (:default-value (function macrostep-environment-at-point)) nil [16638 17142])
            ("make-variable-buffer-local" code nil nil [17143 17212])
            ("macrostep-expand-1-function" variable (:default-value (function macrostep-expand-1)) nil [17214 17719])
            ("make-variable-buffer-local" code nil nil [17720 17777])
            ("macrostep-print-function" variable (:default-value (function macrostep-pp)) nil [17779 18307])
            ("make-variable-buffer-local" code nil nil [18308 18362])
            ("macrostep-macro-form-p-function" variable (:default-value (function macrostep-macro-form-p)) nil [18364 18964])
            ("make-variable-buffer-local" code nil nil [18965 19026])
            ("macrostep-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd "RET") (quote macrostep-expand)) (define-key map "=" (quote macrostep-expand)) (define-key map "e" (quote macrostep-expand)) (define-key map (kbd "DEL") (quote macrostep-collapse)) (define-key map "u" (quote macrostep-collapse)) (define-key map "c" (quote macrostep-collapse)) (define-key map (kbd "TAB") (quote macrostep-next-macro)) (define-key map "n" (quote macrostep-next-macro)) (define-key map (kbd "M-TAB") (quote macrostep-prev-macro)) (define-key map "p" (quote macrostep-prev-macro)) (define-key map "q" (quote macrostep-collapse-all)) (define-key map (kbd "C-c C-c") (quote macrostep-collapse-all)) map)) nil [19063 19765])
            ("define-minor-mode" code nil nil [19782 21494])
            ("macrostep-command-hook" function nil nil [21609 21697])
            ("macrostep-expand" function
               (:user-visible-flag t
                :arguments ("toggle-separate-buffer"))
                nil [21742 25372])
            ("macrostep-collapse" function (:user-visible-flag t) nil [25374 25883])
            ("macrostep-collapse-all" function (:user-visible-flag t) nil [25885 26385])
            ("macrostep-next-macro" function (:user-visible-flag t) nil [26387 26755])
            ("macrostep-prev-macro" function (:user-visible-flag t) nil [26757 27229])
            ("macrostep-overlay-at-point" function nil nil [27280 27477])
            ("macrostep-collapse-overlay" function (:arguments ("overlay" "no-restore-p")) nil [27479 28718])
            ("macrostep-collapse-overlays-in" function (:arguments ("start" "end")) nil [28720 29112])
            ("macrostep-sexp-bounds" function nil nil [29147 30193])
            ("macrostep-sexp-at-point" function (:arguments ("ignore")) nil [30195 30665])
            ("macrostep-macro-form-p" function (:arguments ("form" "environment")) nil [30667 31127])
            ("macrostep--macro-form-info" function (:arguments ("form" "environment" "inhibit-autoload")) nil [31129 33389])
            ("macrostep-expand-1" function (:arguments ("form" "environment")) nil [33391 34007])
            ("put" code nil nil [34009 34115])
            ("macrostep-environment-at-point" function nil nil [34117 35473])
            ("macrostep-environment-at-point-1" function nil nil [35475 37257])
            ("macrostep-collect-macro-forms" function (:arguments ("form" "environment")) nil [37259 39222])
            ("macrostep-collected-macro-form-alist" variable nil nil [39224 39381])
            ("macrostep-collected-compiler-macro-forms" variable nil nil [39383 39516])
            ("macrostep-pp" function (:arguments ("sexp" "environment")) nil [39518 40411])
            ("macrostep-propertize" function (:arguments ("form" "plist")) nil [40468 40932])
            ("macrostep-print-sexp" function (:arguments ("sexp")) nil [40934 44599])
            ("macrostep-get-gensym-face" function (:arguments ("symbol")) nil [44601 45196])
            ("macrostep" package nil nil [45200 45220]))          
      :file "macrostep.el"
      :pointmax 45249
      :fsize 45249
      :lastmodtime '(22379 8377 242433 926000)
      :unmatched-syntax '((close-paren 11180 . 11181) (symbol 11105 . 11121) (open-paren 11104 . 11105)))
    (semanticdb-table "macrostep-c.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("macrostep" include nil nil [1908 1928])
            ("cmacexp" include nil nil [1929 1947])
            ("cl-lib" include nil nil [1948 1965])
            ("if" code nil nil [1987 2315])
            ("put" code nil nil [2318 2400])
            ("put" code nil nil [2401 2490])
            ("put" code nil nil [2492 2588])
            ("put" code nil nil [2589 2670])
            ("macrostep-c-warning-buffer" variable (:default-value "*Macroexpansion Warnings*") nil [2672 2735])
            ("macrostep-c-mode-hook" function nil nil [2752 3220])
            ("macrostep-c-mode-off" function (:arguments ("ignore")) nil [3222 3455])
            ("add-hook" code nil nil [3472 3519])
            ("macrostep-c-sexp-bounds" function nil nil [3521 4015])
            ("macrostep-c-sexp-bounds-1" function nil nil [4017 4373])
            ("macrostep-c-expandable-p" function (:arguments ("region")) nil [4375 4786])
            ("macrostep-c-sexp-at-point" function (:arguments ("start" "end")) nil [4788 4852])
            ("macrostep-c-expand-1" function (:arguments ("region" "_ignore")) nil [4854 5552])
            ("macrostep-c-expand-region" function (:arguments ("start" "end")) nil [5554 6244])
            ("macrostep-c-print-function" function (:arguments ("expansion" "_ignore")) nil [6246 6569])
            ("macrostep-c" package nil nil [6571 6593]))          
      :file "macrostep-c.el"
      :pointmax 6624
      :fsize 6623
      :lastmodtime '(22379 8377 210433 925000)
      :unmatched-syntax '((close-paren 2315 . 2316) (symbol 1968 . 1984) (open-paren 1967 . 1968))))
  :file "!home!lyra!.emacs.d!elpa!macrostep-20151213.145!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
