;; Object helm-core-20160617.307/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "helm-core-20160617.307/"
  :tables
  (list
    (semanticdb-table "helm.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1276 1293])
            ("advice" include nil nil [1294 1311])
            ("helm-lib" include nil nil [1356 1375])
            ("helm-multi-match" include nil nil [1376 1403])
            ("helm-source" include nil nil [1404 1426])
            ("helm-define-multi-key" function (:arguments ("keymap" "key" "functions" "delay")) nil [1466 2242])
            ("helm-multi-key-defun" function (:arguments ("name" "docstring" "funs" "delay")) nil [2259 2684])
            ("helm-make-multi-command" function (:arguments ("functions" "delay")) nil [2686 3117])
            ("helm-run-multi-key-command" function (:arguments ("functions" "iterator" "delay")) nil [3119 3936])
            ("helm-multi-key-defun" code nil nil [3938 4207])
            ("put" code nil nil [4208 4264])
            ("helm-define-key-with-subkeys" function (:arguments ("map" "key" "subkey" "command" "other-subkeys" "menu" "exit-fn")) nil [4281 6482])
            ("helm-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map (kbd "<down>") (quote helm-next-line)) (define-key map (kbd "<up>") (quote helm-previous-line)) (define-key map (kbd "C-n") (quote helm-next-line)) (define-key map (kbd "C-p") (quote helm-previous-line)) (define-key map (kbd "<C-down>") (quote helm-follow-action-forward)) (define-key map (kbd "<C-up>") (quote helm-follow-action-backward)) (define-key map (kbd "<prior>") (quote helm-previous-page)) (define-key map (kbd "<next>") (quote helm-next-page)) (define-key map (kbd "M-v") (quote helm-previous-page)) (define-key map (kbd "C-v") (quote helm-next-page)) (define-key map (kbd "M-<") (quote helm-beginning-of-buffer)) (define-key map (kbd "M->") (quote helm-end-of-buffer)) (define-key map (kbd "C-g") (quote helm-keyboard-quit)) (define-key map (kbd "<right>") (quote helm-next-source)) (define-key map (kbd "<left>") (quote helm-previous-source)) (define-key map (kbd "<RET>") (quote helm-maybe-exit-minibuffer)) (define-key map (kbd "C-i") (quote helm-select-action)) (define-key map (kbd "C-z") (quote helm-execute-persistent-action)) (define-key map (kbd "C-j") (quote helm-execute-persistent-action)) (define-key map (kbd "C-o") (quote helm-next-source)) (define-key map (kbd "C-l") (quote helm-recenter-top-bottom-other-window)) (define-key map (kbd "M-C-l") (quote helm-reposition-window-other-window)) (define-key map (kbd "C-M-v") (quote helm-scroll-other-window)) (define-key map (kbd "M-<next>") (quote helm-scroll-other-window)) (define-key map (kbd "C-M-y") (quote helm-scroll-other-window-down)) (define-key map (kbd "C-M-S-v") (quote helm-scroll-other-window-down)) (define-key map (kbd "M-<prior>") (quote helm-scroll-other-window-down)) (define-key map (kbd "<C-M-down>") (quote helm-scroll-other-window)) (define-key map (kbd "<C-M-up>") (quote helm-scroll-other-window-down)) (define-key map (kbd "C-@") (quote helm-toggle-visible-mark)) (define-key map (kbd "C-SPC") (quote helm-toggle-visible-mark)) (define-key map (kbd "M-SPC") (quote helm-toggle-visible-mark)) (define-key map (kbd "M-[") nil) (define-key map (kbd "M-(") (quote helm-prev-visible-mark)) (define-key map (kbd "M-)") (quote helm-next-visible-mark)) (define-key map (kbd "C-k") (quote helm-delete-minibuffer-contents)) (define-key map (kbd "C-x C-f") (quote helm-quit-and-find-file)) (define-key map (kbd "M-m") (quote helm-toggle-all-marks)) (define-key map (kbd "M-a") (quote helm-mark-all)) (define-key map (kbd "M-U") (quote helm-unmark-all)) (define-key map (kbd "C-w") (quote helm-yank-text-at-point)) (define-key map (kbd "C-M-a") (quote helm-show-all-in-this-source-only)) (define-key map (kbd "C-M-e") (quote helm-display-all-sources)) (define-key map (kbd "C-r") (quote undefined)) (define-key map (kbd "C-s") (quote undefined)) (define-key map (kbd "M-s") (quote undefined)) (define-key map (kbd "C-}") (quote helm-narrow-window)) (define-key map (kbd "C-{") (quote helm-enlarge-window)) (define-key map (kbd "C-c -") (quote helm-swap-windows)) (define-key map (kbd "C-c C-y") (quote helm-yank-selection)) (define-key map (kbd "C-c C-k") (quote helm-kill-selection-and-quit)) (define-key map (kbd "C-c C-i") (quote helm-copy-to-buffer)) (define-key map (kbd "C-c C-f") (quote helm-follow-mode)) (define-key map (kbd "C-c C-u") (quote helm-refresh)) (define-key map (kbd "C-c >") (quote helm-toggle-truncate-line)) (define-key map (kbd "M-p") (quote previous-history-element)) (define-key map (kbd "M-n") (quote next-history-element)) (define-key map (kbd "C-!") (quote helm-toggle-suspend-update)) (define-key map (kbd "C-x b") (quote helm-resume-previous-session-after-quit)) (define-key map (kbd "C-x C-b") (quote helm-resume-list-buffers-after-quit)) (define-key map (kbd "<C-tab>") (quote undefined)) (define-key map (kbd "C-t") (quote helm-toggle-resplit-and-swap-windows)) (define-key map (kbd "C-h C-d") (quote undefined)) (define-key map (kbd "C-h C-d") (quote helm-enable-or-switch-to-debug)) (define-key map [f1] nil) (define-key map (kbd "C-h C-h") (quote undefined)) (define-key map (kbd "C-h h") (quote undefined)) (cl-dolist (k (where-is-internal (quote describe-mode) global-map)) (define-key map k (quote helm-help))) (define-key map (kbd "C-c ?") (quote helm-help)) (cl-loop for n from 0 to 12 do (define-key map (kbd (format "<f%s>" (1+ n))) (\` (lambda nil (interactive) (helm-select-nth-action (\, n)))))) (cl-loop for n from 1 to 9 for key = (format "C-c %d" n) for key- = (format "C-x %d" n) for fn = (\` (lambda nil (interactive) (helm-execute-selection-action-at-nth (\, n)))) for fn- = (\` (lambda nil (interactive) (helm-execute-selection-action-at-nth (\, (- n))))) do (progn (define-key map (kbd key) fn) (define-key map (kbd key-) fn-))) map)) nil [6502 12088])
            ("helm" customgroup (:user-visible-flag t) nil [12092 12164])
            ("helm-completion-window-scroll-margin" variable (:default-value 5) nil [12166 12409])
            ("helm-display-source-at-screen-top" variable (:default-value t) nil [12411 12680])
            ("helm-candidate-number-limit" variable (:default-value 100) nil [12682 13150])
            ("helm-input-idle-delay" variable (:default-value 0.01) nil [13152 13273])
            ("helm-exit-idle-delay" variable nil nil [13275 13494])
            ("helm-full-frame" variable nil nil [13496 13650])
            ("defvaralias" code nil nil [13652 13699])
            ("make-obsolete-variable" code nil nil [13700 13768])
            ("helm-candidate-separator" variable (:default-value "--------------------") nil [13770 13910])
            ("helm-save-configuration-functions" variable (:default-value (quote (set-window-configuration . current-window-configuration))) nil [13912 14518])
            ("helm-persistent-action-use-special-display" variable nil nil [14520 14681])
            ("helm-display-function" variable (:default-value (quote helm-default-display-buffer)) nil [14683 14897])
            ("helm-case-fold-search" variable (:default-value (quote smart)) nil [14899 15534])
            ("helm-file-name-case-fold-search" variable (:default-value (if (memq system-type (quote (cygwin windows-nt ms-dos darwin))) t helm-case-fold-search)) nil [15536 15829])
            ("helm-reuse-last-window-split-state" variable nil nil [15831 16148])
            ("helm-split-window-preferred-function" variable (:default-value (quote helm-split-window-default-fn)) nil [16150 16309])
            ("helm-split-window-default-side" variable (:default-value (quote below)) nil [16311 17104])
            ("helm-display-buffer-default-size" variable nil nil [17106 17434])
            ("helm-split-window-in-side-p" variable nil nil [17436 17758])
            ("helm-always-two-windows" variable nil nil [17760 18278])
            ("helm-sources-using-default-as-input" variable (:default-value (quote (helm-source-imenu helm-source-imenu-all helm-source-info-elisp helm-source-etags-select helm-source-man-pages helm-source-occur helm-source-moccur))) nil [18280 18986])
            ("helm-delete-minibuffer-contents-from-point" variable (:default-value t) nil [18988 19256])
            ("helm-follow-mode-persistent" variable nil nil [19258 19526])
            ("helm-prevent-escaping-from-minibuffer" variable (:default-value t) nil [19528 19671])
            ("helm-move-to-line-cycle-in-source" variable nil nil [19673 19886])
            ("helm-fuzzy-match-fn" variable (:default-value (quote helm-fuzzy-match)) nil [19888 20043])
            ("helm-fuzzy-search-fn" variable (:default-value (quote helm-fuzzy-search)) nil [20045 20207])
            ("helm-fuzzy-sort-fn" variable (:default-value (quote helm-fuzzy-matching-default-sort-fn)) nil [20209 20399])
            ("helm-fuzzy-matching-highlight-fn" variable (:default-value (quote helm-fuzzy-default-highlight-match)) nil [20401 20594])
            ("helm-autoresize-max-height" variable (:default-value 40) nil [20596 20797])
            ("helm-autoresize-min-height" variable (:default-value 10) nil [20799 21034])
            ("helm-input-method-verbose-flag" variable nil nil [21036 21740])
            ("helm-display-header-line" variable (:default-value t) nil [21742 21850])
            ("helm-inherit-input-method" variable (:default-value t) nil [21852 22076])
            ("helm-echo-input-in-header-line" variable nil nil [22078 22195])
            ("helm-tramp-connection-min-time-diff" variable (:default-value 5) nil [22197 22807])
            ("helm-debug-root-directory" variable nil nil [22809 23160])
            ("helm-faces" customgroup (:user-visible-flag t) nil [23180 23292])
            ("helm-source-header" variable
               (:default-value (quote ((((background dark)) :background "#22083397778B" :foreground "white" :weight bold :height 1.3 :family "Sans Serif") (((background light)) :background "#abd7f0" :foreground "black" :weight bold :height 1.3 :family "Sans Serif")))
                :type "face")
                nil [23294 23656])
            ("helm-visible-mark" variable
               (:default-value (quote ((((min-colors 88) (background dark)) (:background "green1" :foreground "black")) (((background dark)) (:background "green" :foreground "black")) (((background light)) :background "#d1f5ea") (((min-colors 88)) (:background "green1")) (t (:background "green"))))
                :type "face")
                nil [23658 24028])
            ("helm-header" variable
               (:default-value (quote ((t (:inherit header-line))))
                :type "face")
                nil [24030 24150])
            ("helm-candidate-number" variable
               (:default-value (quote ((((background dark)) :background "Yellow" :foreground "black") (((background light)) :background "#faffb5" :foreground "black")))
                :type "face")
                nil [24152 24383])
            ("helm-selection" variable
               (:default-value (quote ((((background dark)) :background "ForestGreen" :distant-foreground "black") (((background light)) :background "#b5ffd1" :distant-foreground "black")))
                :type "face")
                nil [24385 24655])
            ("helm-separator" variable
               (:default-value (quote ((((background dark)) :foreground "red") (((background light)) :foreground "#ffbfb5")))
                :type "face")
                nil [24657 24837])
            ("helm-action" variable
               (:default-value (quote ((t (:underline t))))
                :type "face")
                nil [24839 24958])
            ("helm-prefarg" variable
               (:default-value (quote ((((background dark)) :foreground "green") (((background light)) :foreground "red")))
                :type "face")
                nil [24960 25141])
            ("helm-match" variable
               (:default-value (quote ((((background light)) :foreground "#b00000") (((background dark)) :foreground "gold1")))
                :type "face")
                nil [25143 25317])
            ("helm-header-line-left-margin" variable
               (:default-value (quote ((t (:foreground "black" :background "yellow"))))
                :type "face")
                nil [25319 25490])
            ("helm-type-attributes" variable nil nil [25515 25930])
            ("helm-source-filter" variable nil nil [25932 26122])
            ("helm-selection-overlay" variable nil nil [26124 26218])
            ("helm-async-processes" variable nil nil [26220 26323])
            ("helm-before-initialize-hook" variable nil nil [26325 26611])
            ("helm-after-initialize-hook" variable nil nil [26613 26812])
            ("helm-update-hook" variable nil nil [26814 27020])
            ("helm-after-update-hook" variable nil nil [27022 27278])
            ("helm-cleanup-hook" variable nil nil [27280 27475])
            ("helm-select-action-hook" variable nil nil [27477 27554])
            ("helm-before-action-hook" variable nil nil [27556 27741])
            ("helm-after-action-hook" variable nil nil [27743 27811])
            ("helm-exit-minibuffer-hook" variable nil nil [27813 28074])
            ("helm-after-persistent-action-hook" variable nil nil [28076 28166])
            ("helm-move-selection-before-hook" variable nil nil [28168 28263])
            ("helm-move-selection-after-hook" variable nil nil [28265 28358])
            ("helm-after-preselection-hook" variable nil nil [28360 28448])
            ("helm-window-configuration-hook" variable nil nil [28450 28548])
            ("helm-restored-variables" variable
               (:constant-flag t
                :default-value (quote (helm-candidate-number-limit helm-source-filter helm-map helm-sources)))
                nil [28550 28721])
            ("helm-execute-action-at-once-if-one" variable nil nil [28723 28928])
            ("helm-quit-if-no-candidate" variable nil nil [28930 29056])
            ("helm-debug-variables" variable nil nil [29058 29232])
            ("helm-debug-buffer" variable (:default-value "*Debug Helm Log*") nil [29234 29279])
            ("helm-debug" variable nil nil [29281 29473])
            ("helm-compile-source-functions" variable (:default-value (quote (helm-compile-source--type helm-compile-source--dummy helm-compile-source--candidates-in-buffer))) nil [29475 29684])
            ("helm-mode-line-string" variable (:default-value "\\<helm-map>\\[helm-help]:Help \\[helm-select-action]:Act \\[helm-maybe-exit-minibuffer]/f1/f2/f-n:NthAct \\[helm-toggle-suspend-update]:Tog.suspend") nil [29686 30120])
            ("helm-minibuffer-set-up-hook" variable nil nil [30122 30561])
            ("helm-help-message" variable (:default-value "* Helm Generic Help

\\<helm-map>`helm' is an Emacs framework for incremental
completions and narrowing selections.

Helm narrows the list of candidates as the pattern is typed and
updates the list in a live feedback. Helm accepts multiple
patterns (entered with a space between patterns). Helm uses
familiar Emacs navigation keys to move up and down the list.
`RET' selects the candidate from the list.

** Helm Help

C-h m		Shows this generic Helm help.

** Helm's Basic Operations and Default Key Bindings

| Key     | Alternative Keys | Command                                                   |
|---------+------------------+-----------------------------------------------------------|
| C-p     | Up               | Previous Line                                             |
| C-n     | Down             | Next Line                                                 |
| M-v     | PageUp           | Previous Page                                             |
| C-v     | PageDown         | Next Page                                                 |
| Enter   |                  | Execute first (default) action / Select                   |
| M-<     |                  | First Line                                                |
| M->     |                  | Last Line                                                 |
| C-M-S-v | M-PageUp, C-M-y  | Previous Page (other-window)                              |
| C-M-v   | M-PageDown       | Next Page (other-window)                                  |
| Tab     | C-i              | Show action list                                          |
| Left    |                  | Previous Source                                           |
| Right   | C-o              | Next Source                                               |
| C-k     |                  | Delete pattern (with prefix arg delete from point to end) |
| C-j     | C-z              | Persistent Action (Execute and keep helm session)         |

** Shortcuts For nth Action

f1-12: Execute nth Action where n is 1 to 12.

** Shortcuts for executing Default Action on the nth candidate

C-x <n> => executes default action on number <n> candidate before currently selected candidate.

C-c <n> => executes default action on number <n> candidate after current selected candidate.

n is limited only to 1 through 9. For larger jumps use other
navigation keys. Also note that Helm candidates list by default
do not display line numbers. Line numbers can be enabled with the
linum-relative package.

** Visible Marks

Visible marks are displayed next to selected candidates, if any.
Some Helm actions operate on marked candidates.

** Frequently Used Commands

\\[helm-toggle-resplit-and-swap-windows]		Toggle vertical/horizontal split on first hit and swap helm window on second hit.
\\[helm-quit-and-find-file]		Drop into `helm-find-files'.
\\[helm-kill-selection-and-quit]		Kill display value of candidate and quit (with prefix arg, kill the real value).
\\[helm-yank-selection]		Yank current selection into pattern.
\\[helm-follow-mode]		Toggle automatic execution of persistent action.
\\[helm-follow-action-forward]	Run persistent action and then select next line.
\\[helm-follow-action-backward]		Run persistent action and then select previous line.
\\[helm-refresh]		Recalculate and redisplay candidates.
\\[helm-toggle-suspend-update]		Suspend/reenable updates to candidates list.

** Global Commands

\\<global-map>\\[helm-resume] revives the last `helm' session.
Very useful for resuming previous Helm. Binding a key to this
command will greatly improve `helm' interactivity especially
after an accidental exit.

** Debugging helm

helm have a special variable called `helm-debug', setting it to non-nil
will allow helm logging in a special outline-mode buffer.
Helm is resetting the variable to nil at end of each session.

A convenient command is bound to \\<helm-map>\\[helm-enable-or-switch-to-debug]
and allow turning debugging to this session only.
To avoid accumulating log while you are typing your pattern, you can use
\\<helm-map>\\[helm-toggle-suspend-update] to turn off updating, then when you
are ready turn it on again to start updating.

Once you exit your helm session you can access the debug buffer with `helm-debug-open-last-log'.
It is possible to save logs to dated files when `helm-debug-root-directory'
is set to a valid directory.

NOTE: Be aware that helm log buffers grow really fast, so use `helm-debug' only when needed.

** Helm Map
\\{helm-map}") nil [30563 35214])
            ("helm-autoresize-mode" variable nil nil [35216 35245])
            ("helm-current-prefix-arg" variable nil nil [35325 35418])
            ("helm-saved-action" variable nil nil [35419 35506])
            ("helm-saved-current-source" variable nil nil [35507 35608])
            ("helm-compiled-sources" variable nil nil [35609 35683])
            ("helm-in-persistent-action" variable nil nil [35684 35768])
            ("helm-last-buffer" variable nil nil [35769 35846])
            ("helm-saved-selection" variable nil nil [35847 35954])
            ("helm-sources" variable nil nil [35955 36036])
            ("helm-buffer-file-name" variable nil nil [36037 36127])
            ("helm-candidate-cache" variable (:default-value (make-hash-table :test (quote equal))) nil [36128 36255])
            ("helm-input" variable nil nil [36256 36323])
            ("helm-input-local" variable nil nil [36324 36434])
            ("helm-source-name" variable nil nil [36435 36464])
            ("helm-current-source" variable nil nil [36465 36497])
            ("helm-candidate-buffer-alist" variable nil nil [36498 36538])
            ("helm-tick-hash" variable (:default-value (make-hash-table :test (quote equal))) nil [36539 36593])
            ("helm-issued-errors" variable nil nil [36594 36625])
            ("helm--last-log-file" variable nil nil [36626 36713])
            ("helm-follow-mode" variable nil nil [36714 36743])
            ("helm--local-variables" variable nil nil [36744 36778])
            ("helm-split-window-state" variable nil nil [36779 36815])
            ("helm--window-side-state" variable nil nil [36816 36852])
            ("helm-selection-point" variable nil nil [36853 36886])
            ("helm-alive-p" variable nil nil [36887 36912])
            ("helm-visible-mark-overlays" variable nil nil [36913 36952])
            ("helm-update-blacklist-regexps" variable (:default-value (quote ("^" "^ *" "$" "!" " " "\\b" "\\<" "\\>" "\\_<" "\\_>" ".*"))) nil [36953 37093])
            ("helm-force-updating-p" variable nil nil [37094 37128])
            ("helm-exit-status" variable nil nil [37129 37456])
            ("helm-minibuffer-confirm-state" variable nil nil [37457 37499])
            ("helm-quit" variable nil nil [37500 37522])
            ("helm-attributes" variable nil nil [37523 37584])
            ("helm-buffers" variable nil nil [37585 37666])
            ("helm-current-position" variable nil nil [37667 37842])
            ("helm-last-frame-or-window-configuration" variable nil nil [37843 37958])
            ("helm-onewindow-p" variable nil nil [37959 37988])
            ("helm-types" variable nil nil [37989 38012])
            ("helm--mode-line-string-real" variable nil nil [38013 38053])
            ("helm-persistent-action-display-window" variable nil nil [38092 38142])
            ("helm-marked-candidates" variable nil nil [38143 38234])
            ("helm--mode-line-display-prefarg" variable nil nil [38235 38279])
            ("helm--temp-follow-flag" variable nil nil [38280 38390])
            ("helm--reading-passwd-or-string" variable nil nil [38391 38434])
            ("helm--in-update" variable nil nil [38435 38463])
            ("helm--in-fuzzy" variable nil nil [38464 38491])
            ("helm--maybe-use-default-as-input" variable nil nil [38492 38760])
            ("helm--temp-hooks" variable nil nil [38761 38848])
            ("helm-truncate-lines" variable nil nil [38849 38948])
            ("helm--prompt" variable nil nil [38949 38974])
            ("helm--file-completion-sources" variable (:default-value (quote ("Find Files" "Read File Name" "Read File Name History"))) nil [38975 39312])
            ("helm--url-regexp" variable (:default-value "\\(news\\(post\\)?:\\|mailto:\\|file:\\|\\(ftp\\|https?\\|telnet\\|gopher\\|www\\|wais\\)://\\)") nil [39399 39522])
            ("helm--ignore-errors" variable nil nil [39523 39708])
            ("helm-log" function (:arguments ("format-string" "args")) nil [39731 40640])
            ("helm-log-run-hook" function (:arguments ("hook")) nil [40642 40945])
            ("helm-log-get-current-function" function nil nil [40947 41442])
            ("helm-log-error" function (:arguments ("args")) nil [41444 41815])
            ("helm-log-save-maybe" function nil nil [41817 42763])
            ("helm-debug-open-last-log" function (:user-visible-flag t) nil [42780 43105])
            ("helm-print-error-messages" function nil nil [43107 43334])
            ("helm-this-command" function nil nil [43360 44266])
            ("with-helm-time-after-update" function (:arguments ("body")) nil [44284 44860])
            ("with-helm-restore-variables" function (:arguments ("body")) nil [44877 45384])
            ("with-helm-default-directory" function (:arguments ("directory" "body")) nil [45386 45668])
            ("helm-default-directory" function nil nil [45670 45838])
            ("with-helm-temp-hook" function (:arguments ("hook" "body")) nil [45840 46303])
            ("with-helm-after-update-hook" function (:arguments ("body")) nil [46305 46487])
            ("with-helm-alive-p" function (:arguments ("body")) nil [46489 46731])
            ("helm-attr" function (:arguments ("attribute-name" "source" "compute")) nil [46733 47411])
            ("cl-defun" code nil nil [47413 47667])
            ("cl-defun" code nil nil [47669 48571])
            ("helm-get-attribute-from-source-type" function (:arguments ("attribute" "source")) nil [48573 48814])
            ("helm-get-attribute-from-type" function (:arguments ("attribute" "type")) nil [48816 49014])
            ("helm-get-actions-from-type" function (:arguments ("source")) nil [49016 49197])
            ("helm-inherit-attribute-from-source" function (:arguments ("attribute" "source")) nil [49199 49398])
            ("helm-append-at-nth" function (:arguments ("seq" "elm" "index")) nil [49400 49814])
            ("helm-add-action-to-source" function (:arguments ("name" "fn" "source" "index")) nil [49816 50709])
            ("helm-delete-action-from-source" function (:arguments ("action-or-name" "source")) nil [50711 51189])
            ("cl-defun" code nil nil [51191 53510])
            ("helm-set-source-filter" function (:arguments ("sources")) nil [53512 54859])
            ("helm--normalize-filter-sources" function (:arguments ("sources")) nil [54861 55104])
            ("helm-set-sources" function (:arguments ("sources" "no-init" "no-update")) nil [55106 55635])
            ("helm-get-sources" function nil nil [55637 56211])
            ("helm-get-selection" function (:arguments ("buffer" "force-display-part")) nil [56213 57925])
            ("helm-get-actions-from-current-source" function nil nil [57927 58993])
            ("helm-get-current-source" function nil nil [58995 59995])
            ("helm-buffer-is-modified" function (:arguments ("buffer")) nil [59997 60505])
            ("helm-current-buffer-is-modified" function nil nil [60507 60670])
            ("helm-run-after-exit" function (:arguments ("function" "args")) nil [60672 61278])
            ("helm-exit-and-execute-action" function (:arguments ("action")) nil [61280 61746])
            ("defalias" code nil nil [61748 61800])
            ("make-obsolete" code nil nil [61801 61866])
            ("defalias" code nil nil [61867 61937])
            ("make-obsolete" code nil nil [61938 62021])
            ("helm-interpret-value" function (:arguments ("value" "source" "compute")) nil [62023 62910])
            ("helm-set-local-variable" function (:arguments ("args")) nil [62912 63773])
            ("cl-defun" code nil nil [63797 63997])
            ("helm-empty-source-p" function nil nil [63999 64514])
            ("helm-funcall-with-source" function (:arguments ("source" "functions" "args")) nil [64536 65658])
            ("helm-funcall-foreach" function (:arguments ("sym" "sources")) nil [65660 65955])
            ("helm-normalize-sources" function (:arguments ("sources")) nil [65957 66231])
            ("helm-get-candidate-number" function (:arguments ("in-current-source")) nil [66233 67813])
            ("with-helm-quittable" function (:arguments ("body")) nil [67815 68229])
            ("helm-argument-keys" variable
               (:constant-flag t
                :default-value (quote (:sources :input :prompt :resume :preselect :buffer :keymap :default :history)))
                nil [68320 68435])
            ("helm" function (:arguments ("plist")) nil [68452 73084])
            ("helm-alive-p" function nil nil [73113 73467])
            ("helm-parse-keys" function (:arguments ("keys")) nil [73469 74449])
            ("helm-internal" function (:arguments ("any-sources" "any-input" "any-prompt" "any-resume" "any-preselect" "any-buffer" "any-keymap" "any-default" "any-history")) nil [74480 78645])
            ("helm-resume" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [78671 80324])
            ("helm-resume-previous-session-after-quit" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [80326 80665])
            ("put" code nil nil [80666 80725])
            ("helm-resume-list-buffers-after-quit" function (:user-visible-flag t) nil [80727 81027])
            ("put" code nil nil [81028 81083])
            ("helm-resume-p" function (:arguments ("any-resume")) nil [81085 81191])
            ("helm-resume-select-buffer" function nil nil [81193 81582])
            ("helm-other-buffer" function (:arguments ("any-sources" "any-buffer")) nil [81601 81816])
            ("helm-nest" function (:arguments ("same-as-helm")) nil [81818 84403])
            ("helm-current-position" function (:arguments ("save-or-restore")) nil [84430 85457])
            ("helm-frame-or-window-configuration" function (:arguments ("save-or-restore")) nil [85460 86692])
            ("helm-split-window-default-fn" function (:arguments ("window")) nil [86694 88183])
            ("helm-window-in-direction" function (:arguments ("direction")) nil [88185 88387])
            ("helm-display-buffer" function (:arguments ("buffer")) nil [88421 89353])
            ("cl-defun" code nil nil [89355 89677])
            ("helm-default-display-buffer" function (:arguments ("buffer")) nil [89679 90877])
            ("helm-initialize" function (:arguments ("any-resume" "any-input" "any-default" "any-sources")) nil [90905 92421])
            ("helm-initialize-overlays" function (:arguments ("buffer")) nil [92423 92980])
            ("helm-restore-position-on-quit" function nil nil [92982 93118])
            ("helm--recent-push" function (:arguments ("elm" "sym")) nil [93120 93344])
            ("helm--current-buffer" function nil nil [93346 94351])
            ("helm--run-init-hooks" function (:arguments ("hook")) nil [94353 94942])
            ("helm-initial-setup" function (:arguments ("any-default")) nil [94944 97112])
            ("define-derived-mode" code nil nil [97114 97283])
            ("put" code nil nil [97284 97327])
            ("put" code nil nil [97328 97363])
            ("helm-create-helm-buffer" function nil nil [97365 98954])
            ("define-minor-mode" code nil nil [98956 99258])
            ("put" code nil nil [99259 99295])
            ("helm--reset-default-pattern" function nil nil [99297 99406])
            ("helm-read-pattern-maybe" function (:arguments ("any-prompt" "any-input" "any-preselect" "any-resume" "any-keymap" "any-default" "any-history")) nil [99408 105166])
            ("helm-toggle-suspend-update" function (:user-visible-flag t) nil [105168 105625])
            ("put" code nil nil [105626 105672])
            ("tramp-read-passwd" function (:arguments ("around" "disable-helm-update")) nil [105674 106164])
            ("helm--advice-tramp-read-passwd" function (:arguments ("old--fn" "args")) nil [106166 106617])
            ("helm--advice-ange-ftp-get-passwd" function (:arguments ("old--fn" "args")) nil [106619 106990])
            ("ange-ftp-get-passwd" function (:arguments ("around" "disable-helm-update")) nil [106992 107350])
            ("helm--maybe-update-keymap" function (:arguments ("map")) nil [107352 108327])
            ("helm--remap-mouse-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (cl-loop for k in (quote ([mouse-1] [mouse-2] [mouse-3] [down-mouse-1] [down-mouse-2] [down-mouse-3] [drag-mouse-1] [drag-mouse-2] [drag-mouse-3] [double-mouse-1] [double-mouse-2] [double-mouse-3] [triple-mouse-1] [triple-mouse-2] [triple-mouse-3])) do (define-key map k (quote ignore))) map)) nil [108376 108843])
            ("define-minor-mode" code nil nil [108845 109197])
            ("put" code nil nil [109198 109240])
            ("helm-cleanup" function nil nil [109262 110646])
            ("helm-clean-up-minibuffer" function nil nil [110648 110988])
            ("helm-check-minibuffer-input" function nil nil [111023 111275])
            ("helm-check-new-input" function (:arguments ("input")) nil [111277 111655])
            ("helm--reset-update-flag" function nil nil [111657 111785])
            ("add-hook" code nil nil [111787 111847])
            ("helm-compile-sources" function (:arguments ("sources" "funcs")) nil [111883 112376])
            ("helm-get-candidates" function (:arguments ("source")) nil [112405 114869])
            ("helm-while-no-input" function (:arguments ("body")) nil [114871 115174])
            ("helm-get-cached-candidates" function (:arguments ("source")) nil [115176 116167])
            ("helm-process-candidate-transformer" function (:arguments ("candidates" "source")) nil [116205 116468])
            ("helm-process-filtered-candidate-transformer" function (:arguments ("candidates" "source")) nil [116470 116767])
            ("helm--maybe-process-filter-one-by-one-candidate" function (:arguments ("candidate" "source")) nil [116769 117274])
            ("helm--initialize-one-by-one-candidates" function (:arguments ("candidates" "source")) nil [117276 117702])
            ("helm-process-filtered-candidate-transformer-maybe" function (:arguments ("candidates" "source" "process-p")) nil [117704 118150])
            ("helm-process-real-to-display" function (:arguments ("candidates" "source")) nil [118152 118764])
            ("helm-transform-candidates" function (:arguments ("candidates" "source" "process-p")) nil [118766 119389])
            ("helm-candidate-number-limit" function (:arguments ("source")) nil [119423 119852])
            ("helm-candidate-get-display" function (:arguments ("candidate")) nil [119854 120206])
            ("helm-process-pattern-transformer" function (:arguments ("pattern" "source")) nil [120208 120461])
            ("helm-default-match-function" function (:arguments ("candidate")) nil [120463 120661])
            ("helm--fuzzy-regexp-cache" variable (:default-value (make-hash-table :test (quote eq))) nil [120690 120751])
            ("helm--fuzzy-match-maybe-set-pattern" function nil nil [120752 121939])
            ("helm-fuzzy-match" function (:arguments ("candidate")) nil [121941 122459])
            ("helm-fuzzy-search" function (:arguments ("pattern")) nil [122461 124170])
            ("helm-score-candidate-for-pattern" function (:arguments ("candidate" "pattern")) nil [124172 125378])
            ("helm-fuzzy-matching-default-sort-fn" function (:arguments ("candidates" "_source" "use-real")) nil [125380 127440])
            ("helm--maybe-get-migemo-pattern" function (:arguments ("pattern")) nil [127442 127599])
            ("helm-fuzzy-default-highlight-match" function (:arguments ("candidate")) nil [127601 130798])
            ("helm-fuzzy-highlight-matches" function (:arguments ("candidates" "_source")) nil [130800 131071])
            ("helm-match-functions" function (:arguments ("source")) nil [131073 131369])
            ("helm-search-functions" function (:arguments ("source")) nil [131371 131558])
            ("helm-take-first-elements" function (:arguments ("seq" "n")) nil [131560 131796])
            ("cl-defun" code nil nil [131798 132530])
            ("helm-set-case-fold-search-1" function (:arguments ("pattern")) nil [132532 132745])
            ("helm-match-from-candidates" function (:arguments ("cands" "matchfns" "match-part-fn" "limit" "source")) nil [132747 135313])
            ("helm-compute-matches" function (:arguments ("source")) nil [135315 136585])
            ("helm--candidates-in-buffer-p" function (:arguments ("matchfns")) nil [136587 136665])
            ("helm-render-source" function (:arguments ("source" "matches")) nil [136667 137403])
            ("helm--maybe-use-while-no-input" function (:arguments ("body")) nil [137405 137827])
            ("helm--collect-matches" function (:arguments ("src-list")) nil [137829 138068])
            ("helm-update" function (:arguments ("preselect" "source")) nil [138097 140231])
            ("helm-update-source-p" function (:arguments ("source")) nil [140233 141121])
            ("helm-update-move-first-line" function (:arguments ("without-hook")) nil [141123 141349])
            ("helm-force-update" function (:arguments ("preselect")) nil [141351 142120])
            ("helm-refresh" function (:user-visible-flag t) nil [142122 142257])
            ("put" code nil nil [142258 142290])
            ("helm-force-update--reinit" function (:arguments ("source")) nil [142292 142663])
            ("helm-remove-candidate-cache" function (:arguments ("source")) nil [142665 142818])
            ("helm-insert-match" function (:arguments ("match" "insert-function" "num")) nil [142820 143762])
            ("helm-insert-header-from-source" function (:arguments ("source")) nil [143764 144144])
            ("helm-insert-header" function (:arguments ("name" "display-string")) nil [144146 144860])
            ("helm-insert-candidate-separator" function nil nil [144862 145149])
            ("helm-output-filter" function (:arguments ("process" "output-string")) nil [145180 145390])
            ("helm-output-filter-1" function (:arguments ("process-assoc" "output-string")) nil [145392 146056])
            ("helm-output-filter--process-source" function (:arguments ("process" "output-string" "source" "limit")) nil [146058 147097])
            ("helm-output-filter--collect-candidates" function (:arguments ("lines" "incomplete-line-info")) nil [147099 148568])
            ("helm-output-filter--post-process" function nil nil [148570 148961])
            ("helm-process-deferred-sentinel-hook" function (:arguments ("process" "event" "file")) nil [148963 150465])
            ("helm-kill-async-processes" function nil nil [150467 150725])
            ("helm-kill-async-process" function (:arguments ("process")) nil [150727 150901])
            ("helm-execute-selection-action" function nil nil [150925 151287])
            ("helm-execute-selection-action-1" function (:arguments ("selection" "action" "preserve-saved-action")) nil [151289 152458])
            ("helm-coerce-selection" function (:arguments ("selection" "source")) nil [152460 152715])
            ("helm-get-default-action" function (:arguments ("action")) nil [152717 152898])
            ("helm-select-action" function (:user-visible-flag t) nil [152900 154444])
            ("put" code nil nil [154445 154483])
            ("helm-show-action-buffer" function (:arguments ("actions")) nil [154485 155821])
            ("helm-display-source-at-screen-top-maybe" function (:arguments ("unit")) nil [155845 156181])
            ("helm-skip-noncandidate-line" function (:arguments ("direction")) nil [156183 156593])
            ("helm-skip-header-and-separator-line" function (:arguments ("direction")) nil [156622 157180])
            ("helm-display-mode-line" function (:arguments ("source" "force")) nil [157182 160493])
            ("helm--set-header-line" function (:arguments ("update")) nil [160495 161707])
            ("helm--update-header-line" function nil nil [161709 161901])
            ("helm-hide-minibuffer-maybe" function nil nil [161903 162475])
            ("helm-show-candidate-number" function (:arguments ("name")) nil [162477 163174])
            ("cl-defun" code nil nil [163176 165100])
            ("helm-move--beginning-of-multiline-candidate" function nil nil [165102 165493])
            ("helm-move--previous-multi-line-fn" function nil nil [165495 165697])
            ("helm-move--previous-line-fn" function nil nil [165699 166229])
            ("helm-move--next-multi-line-fn" function nil nil [166231 166580])
            ("helm-move--next-line-fn" function nil nil [166582 167103])
            ("helm-move--previous-page-fn" function nil nil [167105 167236])
            ("helm-move--next-page-fn" function nil nil [167238 167357])
            ("helm-move--beginning-of-buffer-fn" function nil nil [167359 167429])
            ("helm-move--end-of-buffer-fn" function nil nil [167431 167495])
            ("helm-move--end-of-source" function nil nil [167497 167642])
            ("helm-move--beginning-of-source" function nil nil [167644 167749])
            ("helm-move--previous-source-fn" function nil nil [167751 167971])
            ("helm-move--next-source-fn" function nil nil [167973 168342])
            ("helm-move--goto-source-fn" function (:arguments ("source-or-name")) nil [168344 168709])
            ("helm-candidate-number-at-point" function nil nil [168711 168911])
            ("helm--next-or-previous-line" function (:arguments ("direction" "arg")) nil [168913 169713])
            ("helm-previous-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [169715 169968])
            ("put" code nil nil [169969 170007])
            ("helm-next-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [170009 170321])
            ("put" code nil nil [170322 170356])
            ("helm-previous-page" function (:user-visible-flag t) nil [170358 170532])
            ("put" code nil nil [170533 170571])
            ("helm-next-page" function (:user-visible-flag t) nil [170573 170742])
            ("put" code nil nil [170743 170777])
            ("helm-beginning-of-buffer" function (:user-visible-flag t) nil [170779 170950])
            ("put" code nil nil [170951 170995])
            ("helm-end-of-buffer" function (:user-visible-flag t) nil [170997 171161])
            ("put" code nil nil [171162 171200])
            ("helm-previous-source" function (:user-visible-flag t) nil [171202 171383])
            ("put" code nil nil [171384 171424])
            ("helm-next-source" function (:user-visible-flag t) nil [171426 171595])
            ("put" code nil nil [171596 171632])
            ("helm-goto-source" function (:arguments ("source-or-name")) nil [171634 171800])
            ("helm--follow-action" function (:arguments ("arg")) nil [171802 172177])
            ("helm-follow-action-forward" function (:user-visible-flag t) nil [172179 172329])
            ("put" code nil nil [172330 172376])
            ("helm-follow-action-backward" function (:user-visible-flag t) nil [172378 172534])
            ("put" code nil nil [172535 172582])
            ("helm-mark-current-line" function (:arguments ("resumep")) nil [172584 173443])
            ("helm-confirm-and-exit-minibuffer" function (:user-visible-flag t) nil [173445 175764])
            ("put" code nil nil [175765 175817])
            ("add-hook" code nil nil [175819 175881])
            ("helm-confirm-and-exit-hook" function nil nil [175883 176166])
            ("helm-read-string" function (:arguments ("prompt" "initial-input" "history" "default-value" "inherit-input-method")) nil [176168 176504])
            ("helm--updating-p" function nil nil [176506 176809])
            ("helm-maybe-exit-minibuffer" function nil nil [176811 177093])
            ("put" code nil nil [177094 177140])
            ("helm-exit-minibuffer" function nil nil [177142 177419])
            ("helm-keyboard-quit" function (:user-visible-flag t) nil [177421 177712])
            ("put" code nil nil [177713 177751])
            ("helm-get-next-header-pos" function nil nil [177753 177896])
            ("helm-get-previous-header-pos" function nil nil [177898 178053])
            ("helm-pos-multiline-p" function nil nil [178055 178212])
            ("helm-get-next-candidate-separator-pos" function nil nil [178214 178775])
            ("helm-get-previous-candidate-separator-pos" function nil nil [178777 178971])
            ("helm-pos-header-line-p" function nil nil [178973 179176])
            ("helm-pos-candidate-separator-p" function nil nil [179178 179341])
            ("helm-debug-output" function (:user-visible-flag t) nil [179365 179550])
            ("put" code nil nil [179551 179588])
            ("helm-debug-output-function" function (:arguments ("vars")) nil [179590 180106])
            ("helm-debug-toggle" function (:user-visible-flag t) nil [180123 180351])
            ("helm-enable-or-switch-to-debug" function (:user-visible-flag t) nil [180353 180709])
            ("put" code nil nil [180710 180760])
            ("helm-kill-buffer-hook" function nil nil [180778 181146])
            ("add-hook" code nil nil [181147 181198])
            ("helm-preselect" function (:arguments ("candidate-or-regexp" "source")) nil [181200 182788])
            ("helm-delete-current-selection" function nil nil [182790 183833])
            ("helm-end-of-source-p" function (:arguments ("at-point")) nil [183835 184205])
            ("helm-beginning-of-source-p" function (:arguments ("at-point")) nil [184207 184594])
            ("helm-edit-current-selection-internal" function (:arguments ("func")) nil [184596 185162])
            ("helm-edit-current-selection" function (:arguments ("forms")) nil [185164 185419])
            ("helm--delete-minibuffer-contents-from" function (:arguments ("from-str")) nil [185421 185847])
            ("helm-delete-minibuffer-contents" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [185849 186486])
            ("helm-compile-source--multi-match" function (:arguments ("source")) nil [186804 188069])
            ("add-to-list" code nil nil [188071 188149])
            ("helm-compile-source--type" function (:arguments ("source")) nil [188151 188312])
            ("define-helm-type-attribute" function (:arguments ("type" "definition" "doc")) nil [188314 188807])
            ("helm-document-attribute" function (:arguments ("attribute" "short-doc" "long-doc")) nil [188809 189369])
            ("helm-add-type-attribute" function (:arguments ("type" "definition")) nil [189371 189586])
            ("helm-document-type-attribute" function (:arguments ("type" "doc")) nil [189588 189757])
            ("helm-dummy-candidate" function (:arguments ("_candidate" "_source")) nil [189786 189963])
            ("helm-compile-source--dummy" function (:arguments ("source")) nil [189965 190426])
            ("helm-candidates-in-buffer" function (:arguments ("source")) nil [190470 193694])
            ("helm-candidates-in-buffer-search-default-fn" function (:arguments ("pattern")) nil [193696 193919])
            ("helm-candidates-in-buffer-1" function (:arguments ("buffer" "pattern" "get-line-fn" "search-fns" "limit" "match-part-fn" "source")) nil [193921 194656])
            ("helm-search-from-candidate-buffer" function (:arguments ("pattern" "get-line-fn" "search-fns" "limit" "start-point" "match-part-fn" "source")) nil [194659 197798])
            ("helm-search-match-part" function (:arguments ("candidate" "pattern")) nil [197800 199019])
            ("helm-initial-candidates-from-candidate-buffer" function (:arguments ("get-line-fn" "limit")) nil [199021 199333])
            ("helm--search-from-candidate-buffer-1" function (:arguments ("search-fn")) nil [199335 199949])
            ("helm-candidate-buffer" function (:arguments ("create-or-buffer")) nil [199951 202399])
            ("helm-init-candidates-in-buffer" function (:arguments ("buffer" "data")) nil [202401 203355])
            ("helm-compile-source--candidates-in-buffer" function (:arguments ("source")) nil [203357 203708])
            ("helm-toggle-resplit-window" function (:user-visible-flag t) nil [203742 205689])
            ("put" code nil nil [205690 205736])
            ("helm-enlarge-window-1" function (:arguments ("n")) nil [205770 206044])
            ("helm-narrow-window" function (:user-visible-flag t) nil [206046 206168])
            ("put" code nil nil [206169 206207])
            ("helm-enlarge-window" function (:user-visible-flag t) nil [206209 206332])
            ("put" code nil nil [206333 206372])
            ("helm-swap-windows" function (:user-visible-flag t) nil [206374 208496])
            ("put" code nil nil [208497 208534])
            ("helm--get-window-side-state" function nil nil [208536 209015])
            ("helm-replace-buffer-in-window" function (:arguments ("window" "buffer1" "buffer2")) nil [209017 209261])
            ("helm-select-nth-action" function (:arguments ("n")) nil [209304 209801])
            ("helm-get-nth-action" function (:arguments ("n" "action")) nil [209803 210140])
            ("helm-execute-selection-action-at-nth" function (:arguments ("linum")) nil [210142 210459])
            ("with-helm-display-same-window" function (:arguments ("body")) nil [210491 210794])
            ("helm-initialize-persistent-action" function nil nil [210796 210913])
            ("cl-defun" code nil nil [210915 213276])
            ("put" code nil nil [213277 213327])
            ("helm-persistent-action-display-window" function (:arguments ("split-onewindow")) nil [213329 214047])
            ("helm-select-persistent-action-window" function (:arguments ("split-onewindow")) nil [214049 214434])
            ("helm-persistent-action-display-buffer" function (:arguments ("buf" "action")) nil [214436 216575])
            ("helm-other-window-base" function (:arguments ("command" "scroll-amount")) nil [216630 216899])
            ("helm-scroll-other-window" function (:user-visible-flag t) nil [216901 217062])
            ("put" code nil nil [217063 217107])
            ("helm-scroll-other-window-down" function (:user-visible-flag t) nil [217109 217279])
            ("put" code nil nil [217280 217329])
            ("helm-recenter-top-bottom-other-window" function (:user-visible-flag t) nil [217331 217536])
            ("put" code nil nil [217537 217594])
            ("helm-reposition-window-other-window" function (:user-visible-flag t) nil [217596 217800])
            ("put" code nil nil [217801 217856])
            ("helm-clear-visible-mark" function nil nil [217887 218081])
            ("helm-this-visible-mark" function nil nil [218083 218235])
            ("helm-delete-visible-mark" function (:arguments ("overlay")) nil [218237 218536])
            ("helm-make-visible-mark" function nil nil [218538 219265])
            ("helm-toggle-visible-mark" function (:user-visible-flag t) nil [219267 219818])
            ("put" code nil nil [219819 219863])
            ("helm-file-completion-source-p" function nil nil [219865 220190])
            ("helm-mark-all" function (:user-visible-flag t) nil [220192 223218])
            ("put" code nil nil [223219 223252])
            ("helm-unmark-all" function (:user-visible-flag t) nil [223254 223592])
            ("put" code nil nil [223593 223628])
            ("helm-toggle-all-marks" function (:user-visible-flag t) nil [223630 224054])
            ("put" code nil nil [224055 224096])
            ("helm--compute-marked" function (:arguments ("real" "source" "wildcard")) nil [224098 224873])
            ("cl-defun" code nil nil [224875 225894])
            ("helm-current-source-name=" function (:arguments ("name")) nil [225896 226048])
            ("helm-revive-visible-mark" function nil nil [226050 227512])
            ("add-hook" code nil nil [227513 227567])
            ("helm-next-point-in-list" function (:arguments ("curpos" "points" "prev")) nil [227569 228227])
            ("helm-next-visible-mark" function
               (:user-visible-flag t
                :arguments ("prev"))
                nil [228229 228643])
            ("put" code nil nil [228644 228686])
            ("helm-prev-visible-mark" function (:user-visible-flag t) nil [228688 228827])
            ("put" code nil nil [228828 228870])
            ("helm-yank-selection" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [228904 229212])
            ("put" code nil nil [229213 229252])
            ("helm-kill-selection-and-quit" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [229254 229914])
            ("put" code nil nil [229915 229963])
            ("helm-copy-to-buffer" function (:user-visible-flag t) nil [229965 230418])
            ("put" code nil nil [230419 230458])
            ("helm-follow-mode" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [230526 233435])
            ("put" code nil nil [233436 233472])
            ("helm-follow-input-idle-delay" variable nil nil [233474 233685])
            ("helm-follow-execute-persistent-action-maybe" function nil nil [233686 234338])
            ("helm--autoresize-hook" function (:arguments ("max-height" "min-height")) nil [234366 234795])
            ("define-minor-mode" code nil nil [234797 235467])
            ("helm-help" function (:user-visible-flag t) nil [235469 236069])
            ("put" code nil nil [236070 236099])
            ("helm-toggle-truncate-line" function (:user-visible-flag t) nil [236101 236360])
            ("put" code nil nil [236361 236406])
            ("helm" package nil nil [236408 236423]))          
      :file "helm.el"
      :pointmax 236572
      :fsize 236571
      :lastmodtime '(22375 612 435310 539000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-lib.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [992 1009])
            ("dired" include nil nil [1010 1026])
            ("helm-file-globstar" variable (:default-value t) nil [1048 1270])
            ("helm-yank-text-at-point-function" variable nil nil [1272 1665])
            ("helm-scroll-amount" variable nil nil [1667 1936])
            ("helm-help-full-frame" variable (:default-value t) nil [1938 2231])
            ("helm-yank-point" variable nil nil [2256 2284])
            ("helm-pattern" variable nil nil [2285 2363])
            ("helm-buffer" variable (:default-value "*helm*") nil [2364 2425])
            ("helm-current-buffer" variable nil nil [2426 2501])
            ("helm-suspend-update-flag" variable nil nil [2502 2539])
            ("helm-action-buffer" variable (:default-value "*helm action*") nil [2540 2611])
            ("helm-add-face-text-properties" function (:arguments ("beg" "end" "face" "append" "object")) nil [2636 3122])
            ("helm-with-gensyms" function (:arguments ("symbols" "body")) nil [3147 3726])
            ("helm-iter-list" function (:arguments ("seq")) nil [3746 3921])
            ("helm-iter-next" function (:arguments ("iterator")) nil [3923 4010])
            ("helm-make-actions" function (:arguments ("args")) nil [4012 4476])
            ("helm-aif" function (:arguments ("test-form" "then-form" "else-forms")) nil [4504 4830])
            ("helm-awhile" function (:arguments ("sexp" "body")) nil [4832 5319])
            ("helm-acond" function (:arguments ("clauses")) nil [5321 5624])
            ("helm-current-line-contents" function nil nil [5626 5772])
            ("helm--mapconcat-pattern" function (:arguments ("pattern")) nil [5806 6605])
            ("helm--collect-pairs-in-string" function (:arguments ("string")) nil [6607 6787])
            ("helm-help-internal" function (:arguments ("bufname" "insert-content-fn")) nil [6812 7577])
            ("helm-help-scroll-up" function (:arguments ("amount")) nil [7579 7726])
            ("helm-help-scroll-down" function (:arguments ("amount")) nil [7728 7879])
            ("helm-help-next-line" function nil nil [7881 8028])
            ("helm-help-previous-line" function nil nil [8030 8185])
            ("helm-help-toggle-mark" function nil nil [8187 8296])
            ("helm-help-event-loop" function nil nil [8430 9656])
            ("helm-flatten-list" function (:arguments ("seq" "omit-nulls")) nil [9683 10406])
            ("helm-mklist" function (:arguments ("obj")) nil [10408 10601])
            ("cl-defmacro" code nil nil [10603 11174])
            ("cl-defun" code nil nil [11176 11600])
            ("helm-skip-entries" function (:arguments ("seq" "black-regexp-list" "white-regexp-list")) nil [11602 12191])
            ("helm-boring-directory-p" function (:arguments ("directory" "black-list")) nil [12193 12649])
            ("helm-shadow-entries" function (:arguments ("seq" "regexp-list")) nil [12651 13043])
            ("helm-remove-if-not-match" function (:arguments ("regexp" "seq")) nil [13045 13430])
            ("helm-remove-if-match" function (:arguments ("regexp" "seq")) nil [13432 13809])
            ("helm-transform-mapcar" function (:arguments ("function" "args")) nil [13811 14325])
            ("helm-stringify" function (:arguments ("elm")) nil [14355 14580])
            ("helm-substring" function (:arguments ("str" "width")) nil [14582 14856])
            ("helm-substring-by-width" function (:arguments ("str" "width" "endstr")) nil [14858 15339])
            ("helm-string-multibyte-p" function (:arguments ("str")) nil [15341 15499])
            ("helm-get-pid-from-process-name" function (:arguments ("process-name")) nil [15501 15840])
            ("helm-ff-find-printers" function nil nil [15842 16280])
            ("helm-region-active-p" function nil nil [16282 16373])
            ("helm-quote-whitespace" function (:arguments ("candidate")) nil [16375 16519])
            ("helm-symbolify" function (:arguments ("str-or-sym")) nil [16547 16681])
            ("helm-symbol-name" function (:arguments ("obj")) nil [16683 16838])
            ("helm-describe-function" function (:arguments ("func")) nil [16840 16967])
            ("helm-describe-variable" function (:arguments ("var")) nil [16969 17093])
            ("helm-describe-face" function (:arguments ("face")) nil [17095 17213])
            ("helm-find-function" function (:arguments ("func")) nil [17215 17318])
            ("helm-find-variable" function (:arguments ("var")) nil [17320 17420])
            ("helm-find-face-definition" function (:arguments ("face")) nil [17422 17539])
            ("helm-kill-new" function (:arguments ("candidate" "replace")) nil [17541 17712])
            ("helm-same-major-mode-p" function (:arguments ("start-buffer" "alist")) nil [17729 19555])
            ("helm-file-name-sans-extension" function (:arguments ("filename")) nil [19580 19930])
            ("helm-basename" function (:arguments ("fname" "ext")) nil [19932 20690])
            ("helm-basedir" function (:arguments ("fname")) nil [20692 20941])
            ("helm-current-directory" function nil nil [20943 21191])
            ("helm-w32-prepare-filename" function (:arguments ("file")) nil [21193 21472])
            ("helm-w32-shell-execute-open-file" function (:arguments ("file")) nil [21474 21606])
            ("helm-walk-ignore-directories" variable (:default-value (quote ("SCCS/" "RCS/" "CVS/" "MCVS/" ".svn/" ".git/" ".hg/" ".bzr/" "_MTN/" "_darcs/" "{arch}/" ".gvfs/"))) nil [21650 21794])
            ("helm--dir-file-name" function (:arguments ("file" "dir")) nil [21796 21903])
            ("helm--dir-name-p" function (:arguments ("str")) nil [21905 21985])
            ("cl-defun" code nil nil [21987 24507])
            ("helm-file-expand-wildcards" function (:arguments ("pattern" "full")) nil [24509 25395])
            ("helm-set-pattern" function (:arguments ("pattern" "noupdate")) nil [25420 25755])
            ("helm-minibuffer-completion-contents" function nil nil [25757 25963])
            ("with-helm-buffer" function (:arguments ("body")) nil [25965 26129])
            ("with-helm-current-buffer" function (:arguments ("body")) nil [26131 26499])
            ("helm-buffer-get" function nil nil [26501 26662])
            ("helm-window" function nil nil [26664 26757])
            ("helm-action-window" function nil nil [26759 26874])
            ("with-helm-window" function (:arguments ("body")) nil [26876 27049])
            ("helm-yank-text-at-point" function (:user-visible-flag t) nil [27082 27783])
            ("helm-reset-yank-point" function nil nil [27785 27846])
            ("add-hook" code nil nil [27848 27900])
            ("add-hook" code nil nil [27901 27962])
            ("helm--ansi-color-regexp" variable (:default-value "\\[\\(K\\|[0-9;]*m\\)") nil [27979 28041])
            ("helm--ansi-color-drop-regexp" variable (:default-value "\\[\\([ABCDsuK]\\|[12][JK]\\|=[0-9]+[hI]\\|[0-9;]*[Hf]\\)") nil [28042 28145])
            ("helm--ansi-color-apply" function (:arguments ("string")) nil [28146 29973])
            ("helm-lib" package nil nil [29975 29994]))          
      :file "helm-lib.el"
      :pointmax 30144
      :fsize 30143
      :lastmodtime '(22375 612 375310 538000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-multi-match.el"
      :file "helm-multi-match.el"
      :fsize 13644
      :lastmodtime '(22375 612 471310 539000))
    (semanticdb-table "helm-source.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1239 1256])
            ("eieio" include nil nil [1257 1273])
            ("helm-lib" include nil nil [1274 1293])
            ("helm-fuzzy-sort-fn" variable nil nil [1295 1322])
            ("helm-fuzzy-match-fn" variable nil nil [1323 1351])
            ("helm-fuzzy-search-fn" variable nil nil [1352 1381])
            ("declare-function" code nil nil [1383 1442])
            ("declare-function" code nil nil [1443 1492])
            ("declare-function" code nil nil [1493 1550])
            ("helm--setup-source" function nil nil [1554 1666])
            ("helm-setup-user-source" function nil nil [1668 1776])
            ("helm-source" type
               (:members 
                  ( ("name" variable
                       (:documentation "  The name of the source.
  A string which is also the heading which appears
  above the list of matches from the source. Must be unique."
                        :default-value "nil")
                        nil nil)
                    ("header-name" variable
                       (:documentation "  A function returning the display string of the header.
  Its argument is the name of the source. This attribute is useful to
  add an additional information with the source name.
  It doesn't modify the name of the source."
                        :default-value "nil")
                        nil nil)
                    ("init" variable
                       (:documentation "  Function called with no parameters when helm is started.
  It is useful for collecting current state information which can be
  used to create the list of candidates later.
  Initialization of `candidates-in-buffer' is done here
  with `helm-init-candidates-in-buffer'."
                        :default-value "nil")
                        nil nil)
                    ("candidates" variable
                       (:documentation "  Specifies how to retrieve candidates from the source.
  It can either be a variable name, a function called with no parameters
  or the actual list of candidates.

  The list must be a list whose members are strings, symbols
  or (DISPLAY . REAL) pairs.

  In case of (DISPLAY . REAL) pairs, the DISPLAY string is shown
  in the Helm buffer, but the REAL one is used as action
  argument when the candidate is selected. This allows a more
  readable presentation for candidates which would otherwise be,
  for example, too long or have a common part shared with other
  candidates which can be safely replaced with an abbreviated
  string for display purposes.

  Note that if the (DISPLAY . REAL) form is used then pattern
  matching is done on the displayed string, not on the real
  value."
                        :default-value "nil")
                        nil nil)
                    ("update" variable
                       (:documentation "  Function called with no parameters at before \"init\" function
  when `helm-force-update' is called."
                        :default-value "nil")
                        nil nil)
                    ("cleanup" variable
                       (:documentation "  Function called with no parameters when *helm* buffer is
  closed. It is useful for killing unneeded candidates buffer.

  Note that the function is executed BEFORE performing action."
                        :default-value "nil")
                        nil nil)
                    ("keymap" variable
                       (:documentation "  Specific keymap for this source.
  It is useful to have a keymap per source when using more than
  one source.  Otherwise, a keymap can be set per command with
  `helm' argument KEYMAP.  NOTE: when a source have `helm-map' as
  keymap attr, the global value of `helm-map' will override the
  actual local one."
                        :default-value "nil")
                        nil nil)
                    ("action" variable
                       (:documentation "  An alist of (DISPLAY . FUNCTION) pairs, a variable name  or a function.
  FUNCTION is called with one parameter: the selected candidate.

  An action other than the default can be chosen from this list
  of actions for the currently selected candidate (by default
  with TAB). The DISPLAY string is shown in the completions
  buffer and the FUNCTION is invoked when an action is
  selected. The first action of the list is the default.

  You should use `helm-make-actions' to build this alist easily."
                        :default-value "(quote identity)")
                        nil nil)
                    ("persistent-action" variable
                       (:documentation "  Can be a either a Function called with one parameter (the
  selected candidate) or a cons cell where first element is this
  same function and second element a symbol (e.g never-split)
  that inform `helm-execute-persistent-action'to not split his
  window to execute this persistent action."
                        :default-value "nil")
                        nil nil)
                    ("persistent-help" variable
                       (:documentation "  A string to explain persistent-action of this source. It also
  accepts a function or a variable name.
  It will be displayed in `header-line'.
  Have no effect when `helm-echo-input-in-header-line' is non--nil."
                        :default-value "nil")
                        nil nil)
                    ("help-message" variable
                       (:documentation "  Help message for this source.
  If not present, `helm-help-message' value will be used."
                        :default-value "nil")
                        nil nil)
                    ("multiline" variable
                       (:documentation "  Enable to selection multiline candidates."
                        :default-value "nil")
                        nil nil)
                    ("requires-pattern" variable
                       (:documentation "  If present matches from the source are shown only if the
  pattern is not empty. Optionally, it can have an integer
  parameter specifying the required length of input which is
  useful in case of sources with lots of candidates."
                        :default-value "nil")
                        nil nil)
                    ("candidate-transformer" variable
                       (:documentation "  It's a function or a list of functions called with one argument
  when the completion list from the source is built. The argument
  is the list of candidates retrieved from the source. The
  function should return a transformed list of candidates which
  will be used for the actual completion.  If it is a list of
  functions, it calls each function sequentially.

  This can be used to transform or remove items from the list of
  candidates.

  Note that `candidates' is run already, so the given transformer
  function should also be able to handle candidates with (DISPLAY
  . REAL) format."
                        :default-value "nil")
                        nil nil)
                    ("filtered-candidate-transformer" variable
                       (:documentation "  It has the same format as `candidate-transformer', except the
  function is called with two parameters: the candidate list and
  the source.

  This transformer is run on the candidate list which is already
  filtered by the current pattern. While `candidate-transformer'
  is run only once, it is run every time the input pattern is
  changed.

  It can be used to transform the candidate list dynamically, for
  example, based on the current pattern.

  In some cases it may also be more efficent to perform candidate
  transformation here, instead of with `candidate-transformer'
  even if this transformation is done every time the pattern is
  changed.  For example, if a candidate set is very large then
  `candidate-transformer' transforms every candidate while only
  some of them will actually be displayed due to the limit
  imposed by `helm-candidate-number-limit'.

  Note that `candidates' and `candidate-transformer' is run
  already, so the given transformer function should also be able
  to handle candidates with (DISPLAY . REAL) format."
                        :default-value "nil")
                        nil nil)
                    ("filter-one-by-one" variable
                       (:documentation "  A transformer function that treat candidates one by one.
  It is called with one arg the candidate.
  It is faster than `filtered-candidate-transformer' or
  `candidates-transformer', but should be used only in sources
  that recompute constantly their candidates, e.g `helm-source-find-files'.
  Filtering happen early and candidates are treated
  one by one instead of re-looping on the whole list.
  If used with `filtered-candidate-transformer' or `candidates-transformer'
  these functions should treat the candidates transformed by the
  `filter-one-by-one' function in consequence."
                        :default-value "nil")
                        nil nil)
                    ("display-to-real" variable
                       (:documentation "  Function called with one parameter; the selected candidate.

  The function transforms the selected candidate, and the result
  is passed to the action function.  The display-to-real
  attribute provides another way to pass to action other string than
  the one shown in Helm buffer.

  Traditionally, it is possible to make candidates,
  candidate-transformer or filtered-candidate-transformer
  function return a list with (DISPLAY . REAL) pairs. But if REAL
  can be generated from DISPLAY, display-to-real is more
  convenient and faster.

  NOTE: This is deprecated and you have better time using `filter-one-by-one'."
                        :default-value "nil")
                        nil nil)
                    ("real-to-display" variable
                       (:documentation "  Function called with one parameter; the selected candidate.
  The real value of candidates will be shown in display.
  See `display-to-real'."
                        :default-value "nil")
                        nil nil)
                    ("action-transformer" variable
                       (:documentation "  It's a function or a list of functions called with two
  arguments when the action list from the source is
  assembled. The first argument is the list of actions, the
  second is the current selection.  If it is a list of functions,
  it calls each function sequentially.

  The function should return a transformed action list.

  This can be used to customize the list of actions based on the
  currently selected candidate."
                        :default-value "nil")
                        nil nil)
                    ("pattern-transformer" variable
                       (:documentation "  It's a function or a list of functions called with one argument
  before computing matches. Its argument is `helm-pattern'.
  Functions should return transformed `helm-pattern'.

  It is useful to change interpretation of `helm-pattern'."
                        :default-value "nil")
                        nil nil)
                    ("candidate-number-limit" variable
                       (:documentation "  Override `helm-candidate-number-limit' only for this source."
                        :default-value "nil")
                        nil nil)
                    ("volatile" variable
                       (:documentation "  Indicates the source assembles the candidate list dynamically,
  so it shouldn't be cached within a single Helm
  invocation. It is only applicable to synchronous sources,
  because asynchronous sources are not cached."
                        :default-value "nil")
                        nil nil)
                    ("match" variable
                       (:documentation "  List of functions called with one parameter: a candidate. The
  function should return non-nil if the candidate matches the
  current pattern (see variable `helm-pattern').

  When using `candidates-in-buffer' its default value is `identity' and
  don't have to be changed, use the `search' slot instead.

  This attribute allows the source to override the default
  pattern matching based on `string-match'. It can be used, for
  example, to implement a source for file names and do the
  pattern matching on the basename of files, since it's more
  likely one is typing part of the basename when searching for a
  file, instead of some string anywhere else in its path.

  If the list contains more than one function then the list of
  matching candidates from the source is constructed by appending
  the results after invoking the first function on all the
  potential candidates, then the next function, and so on. The
  matching candidates supplied by the first function appear first
  in the list of results and then results from the other
  functions, respectively.

  This attribute has no effect for asynchronous sources (see
  attribute `candidates'), since they perform pattern matching
  themselves.

  Note that FUZZY-MATCH slot will overhide value of this slot."
                        :default-value "nil")
                        nil nil)
                    ("fuzzy-match" variable
                       (:documentation "  Enable fuzzy matching in this source.
  This will overwrite settings in MATCH slot, and for
  sources built with child class `helm-source-in-buffer' the SEARCH slot.
  This is an easy way of enabling fuzzy matching, but you can use the MATCH
  or SEARCH slots yourself if you want something more elaborated, mixing
  different type of match (See `helm-source-buffers' class for example)."
                        :default-value "nil")
                        nil nil)
                    ("nomark" variable
                       (:documentation "  Don't allow marking candidates when this attribute is present."
                        :default-value "nil")
                        nil nil)
                    ("nohighlight" variable
                       (:documentation "  Disable highlighting matches in this source.
  This will disable generic highlighting of matches,
  but some specialized highlighting can be done from elsewhere,
  i.e from `filtered-candidate-transformer' or `filter-one-by-one' slots.
  So use this to either disable completely highlighting in your source,
  or to disable highlighting and use a specialized highlighting matches
  function for this source.
  Remember that this function should run AFTER all filter functions if those
  filter functions are modifying face properties, though it is possible to
  avoid this by using new `add-face-text-property' in your filter functions."
                        :default-value "nil")
                        nil nil)
                    ("allow-dups" variable
                       (:documentation "  Allow helm collecting duplicates candidates."
                        :default-value "nil")
                        nil nil)
                    ("history" variable
                       (:documentation "  Allow passing history variable to helm from source.
  It should be a quoted symbol."
                        :default-value "nil")
                        nil nil)
                    ("coerce" variable
                       (:documentation "  It's a function called with one argument: the selected candidate.
  This function is intended for type convertion. In normal case,
  the selected candidate (string) is passed to action
  function. If coerce function is specified, it is called just
  before action function.

  Example: converting string to symbol
    (coerce . intern)"
                        :default-value "nil")
                        nil nil)
                    ("mode-line" variable
                       (:documentation "  Source local `helm-mode-line-string' (included in
  `mode-line-format'). It accepts also variable/function name."
                        :default-value "nil")
                        nil nil)
                    ("header-line" variable
                       (:documentation "  Source local `header-line-format'.
  Have no effect when `helm-echo-input-in-header-line' is non--nil.
  It accepts also variable/function name."
                        :default-value "nil")
                        nil nil)
                    ("resume" variable
                       (:documentation "  Function called with no parameters at end of initialization
  when `helm-resume' is started.
  If this function try to do something against `helm-buffer', (e.g updating,
  searching etc...) probably you should run it in a timer to ensure
  `helm-buffer' is ready."
                        :default-value "nil")
                        nil nil)
                    ("follow" variable
                       (:documentation "  Enable `helm-follow-mode' for this source only.
  You must give it a value of 1 or -1, though giving a -1 value
  is surely not what you want, e.g: (follow . 1)

  See `helm-follow-mode' for more infos."
                        :default-value "nil")
                        nil nil)
                    ("follow-delay" variable
                       (:documentation "  `helm-follow-mode' will execute persistent-action after this delay.
  Otherwise value of `helm-follow-input-idle-delay' is used if non--nil,
  If none of these are found fallback to `helm-input-idle-delay'."
                        :default-value "nil")
                        nil nil)
                    ("dont-plug" variable
                       (:documentation "  A list of compile functions plugin to ignore."
                        :default-value "(quote (helm-compile-source--persistent-help))")
                        nil nil)
                    ("matchplugin" variable (:default-value "t") nil nil)
                    ("match-part" variable
                       (:documentation "  Allow matching only one part of candidate.
  If source contain match-part attribute, match is computed only
  on part of candidate returned by the call of function provided
  by this attribute. The function should have one arg, candidate,
  and return only a specific part of candidate."
                        :default-value "nil")
                        nil nil)
                    ("before-init-hook" variable
                       (:documentation "  A local hook that run at beginning of initilization of this source.
  i.e Before the creation of `helm-buffer'.

  Should be a variable (defined with defvar).
  Can be also an anonymous function or a list of functions
  directly added to slot, this is not recommended though."
                        :default-value "nil")
                        nil nil)
                    ("after-init-hook" variable
                       (:documentation "  A local hook that run at end of initilization of this source.
  i.e After the creation of `helm-buffer'.

  Should be a variable.
  Can be also an anonymous function or a list of functions
  directly added to slot, this is not recommended though."
                        :default-value "nil")
                        nil nil)
                    ("delayed" variable
                       (:documentation "  This slot have no more effect and is just kept for backward compatibility.
  Please don't use it."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [1810 18572])
            ("helm-source-sync" type
               (:superclasses "helm-source"
                :members 
                  ( ("candidates" variable (:default-value "(quote (\"ERROR: You must specify the `candidates' slot, either with a list or a function\"))") nil nil)
                    ("dont-plug" variable (:default-value "(quote (helm-compile-source--multi-match helm-compile-source--persistent-help helm-compile-source--migemo))") nil nil)
                    ("migemo" variable
                       (:documentation "  Enable migemo.
  When multimatch is disabled, you can give the symbol 'nomultimatch as value
  to force not using generic migemo matching function.
  In this case you have to provide your own migemo matching funtion
  that kick in when `helm-migemo-mode' is enabled.
  Otherwise it will be available for this source once `helm-migemo-mode'
  is enabled when non-nil."
                        :default-value "nil")
                        nil nil)
                    ("match-strict" variable
                       (:documentation "  When specifying a match function within a source and
  helm-multi-match is enabled, the result of all matching
  functions will be concatened, which in some cases is not what
  is wanted. When using `match-strict' only this or these
  functions will be used. You can specify those functions as a
  list of functions or a single symbol function.

  NOTE: This have the same effect as using :MATCHPLUGIN nil."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [18574 20235])
            ("helm-source-async" type
               (:superclasses "helm-source"
                :members 
                  ( ("candidates-process" variable
                       (:documentation "  This attribute is used to define a process as candidate.
  The value must be a process.

  NOTE:
  When building the source at runtime you can give directly a process
  as value, otherwise wrap the process call into a function.
  The process buffer should be nil, otherwise, if you use
  `helm-buffer' give to the process a sentinel."
                        :default-value "nil")
                        nil nil)
                    ("matchplugin" variable (:default-value "nil") nil nil)
                    ("dont-plug" variable (:default-value "(quote (helm-compile-source--multi-match helm-compile-source--persistent-help))") nil nil))                  
                :type "class")
                nil [20237 21067])
            ("helm-source-in-buffer" type
               (:superclasses "helm-source"
                :members 
                  ( ("init" variable (:default-value "(quote helm-default-init-source-in-buffer-function)") nil nil)
                    ("data" variable
                       (:documentation "  A string or a list that will be used to feed the `helm-candidates-buffer'.
  This data will be passed in a function added to the init slot and
  the buffer will be build with `helm-init-candidates-in-buffer'.
  This is an easy and fast method to build a `candidates-in-buffer' source."
                        :default-value "nil")
                        nil nil)
                    ("dont-plug" variable (:default-value "(quote (helm-compile-source--candidates-in-buffer helm-compile-source--multi-match helm-compile-source--persistent-help helm-compile-source--migemo))") nil nil)
                    ("migemo" variable
                       (:documentation "  Enable migemo.
  When multimatch is disabled, you can give the symbol 'nomultimatch as value
  to force not using generic migemo matching function.
  In this case you have to provide your own migemo matching funtion
  that kick in when `helm-migemo-mode' is enabled.
  Otherwise it will be available for this source once `helm-migemo-mode'
  is enabled when non-nil."
                        :default-value "nil")
                        nil nil)
                    ("candidates" variable (:default-value "(quote helm-candidates-in-buffer)") nil nil)
                    ("volatile" variable (:default-value "t") nil nil)
                    ("match" variable (:default-value "(quote (identity))") nil nil)
                    ("get-line" variable
                       (:documentation "  A function like `buffer-substring-no-properties' or `buffer-substring'.
  This function converts point of line-beginning and point of line-end,
  which represents a candidate computed by `helm-candidates-in-buffer'.
  By default, `helm-candidates-in-buffer' uses
  `buffer-substring-no-properties'."
                        :default-value "(quote buffer-substring-no-properties)")
                        nil nil)
                    ("search" variable
                       (:documentation "  List of functions like `re-search-forward' or `search-forward'.
  Buffer search function used by `helm-candidates-in-buffer'.
  By default, `helm-candidates-in-buffer' uses `re-search-forward'.
  The function should take one arg PATTERN.
  If your search function needs to handle negation like matchplugin,
  this function should returns in such case a cons cell of two integers defining
  the beg and end positions to match in the line previously matched by
  `re-search-forward' or similar, and move point to next line
  (See how the `helm-mm-3-search-base' and `helm-fuzzy-search' functions are working).

  NOTE: FUZZY-MATCH slot will overhide value of this slot."
                        :default-value "(quote (helm-candidates-in-buffer-search-default-fn))")
                        nil nil)
                    ("search-strict" variable
                       (:documentation "  When specifying a search function within a source and
  helm-multi-match is enabled, the result of all searching
  functions will be concatened, which in some cases is not what
  is wanted. When using `search-strict' only this or these
  functions will be used. You can specify those functions as a
  list of functions or a single symbol function.

  NOTE: This have the same effect as using a nil value for
        :MATCHPLUGIN slot."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [21069 24415])
            ("helm-source-dummy" type
               (:superclasses "helm-source"
                :members 
                  ( ("candidates" variable (:default-value "(quote (\"dummy\"))") nil nil)
                    ("filtered-candidate-transformer" variable (:default-value "(quote helm-dummy-candidate)") nil nil)
                    ("matchplugin" variable (:default-value "nil") nil nil)
                    ("accept-empty" variable
                       (:documentation "  Allow exiting with an empty string.
  You should keep the default value."
                        :default-value "t")
                        nil nil)
                    ("match" variable (:default-value "(quote identity)") nil nil)
                    ("volatile" variable (:default-value "t") nil nil))                  
                :type "class")
                nil [24417 24859])
            ("helm-source-in-file" type
               (:superclasses "helm-source-in-buffer"
                :members 
                  ( ("init" variable (:default-value "(lambda nil (let ((file (helm-attr (quote candidates-file)))) (with-current-buffer (helm-candidate-buffer (quote global)) (insert-file-contents file))))") nil nil)
                    ("candidates-file" variable
                       (:documentation "A filename."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [24861 25332])
            ("helm-default-init-source-in-buffer-function" function nil nil [25362 25552])
            ("helm--create-source" function (:arguments ("object")) nil [25594 25903])
            ("helm-make-source" function (:arguments ("name" "class" "args")) nil [25905 26472])
            ("helm-make-type" function (:arguments ("class" "args")) nil [26474 26675])
            ("helm-mm-default-search-functions" variable nil nil [26677 26718])
            ("helm-mm-default-match-functions" variable nil nil [26719 26759])
            ("helm-source-mm-get-search-or-match-fns" function (:arguments ("source" "method")) nil [26761 28279])
            ("cl-defun" code nil nil [28300 29531])
            ("helm-source--persistent-help-string" function (:arguments ("string" "source")) nil [29571 29824])
            ("helm-source--header-line" function (:arguments ("source")) nil [29826 31206])
            ("helm--setup-source" function
               (:parent "helm-source"
                :arguments ("_source"))
                nil [31208 31271])
            ("helm--setup-source" function
               (:parent "helm-source"
                :arguments ("source"))
                nil [31273 32662])
            ("helm-setup-user-source" function
               (:parent "helm-source"
                :arguments ("_source"))
                nil [32664 32722])
            ("helm--setup-source" function
               (:parent "helm-source-sync"
                :arguments ("source"))
                nil [32724 33518])
            ("helm--setup-source" function
               (:parent "helm-source-in-buffer"
                :arguments ("source"))
                nil [33520 35106])
            ("helm--setup-source" function
               (:parent "helm-source-async"
                :arguments ("source"))
                nil [35108 35419])
            ("helm--setup-source" function
               (:parent "helm-source-dummy"
                :arguments ("source"))
                nil [35421 36006])
            ("helm-build-sync-source" function (:arguments ("name" "args")) nil [36044 36278])
            ("helm-build-async-source" function (:arguments ("name" "args")) nil [36280 36518])
            ("helm-build-in-buffer-source" function (:arguments ("name" "args")) nil [36520 36793])
            ("helm-build-dummy-source" function (:arguments ("name" "args")) nil [36795 37041])
            ("helm-build-in-file-source" function (:arguments ("name" "file" "args")) nil [37043 37430])
            ("helm-source" package nil nil [37433 37455]))          
      :file "helm-source.el"
      :pointmax 37608
      :fsize 37607
      :lastmodtime '(22375 612 503310 540000)
      :unmatched-syntax nil))
  :file "!home!lyra!.emacs.d!elpa!helm-core-20160617.307!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
