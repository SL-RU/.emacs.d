;; Object analyze/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "analyze/"
  :tables
  (list
    (semanticdb-table "fcn.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [902 921])
            ("semantic/find" include nil nil [941 965])
            ("declare-function" code nil nil [968 1045])
            ("declare-function" code nil nil [1046 1101])
            ("declare-function" code nil nil [1102 1166])
            ("declare-function" code nil nil [1167 1231])
            ("semantic-analyze-split-name" function
               (:overloadable t
                :arguments ("name"))
                nil [1345 1666])
            ("semantic-analyze-split-name-default" function (:arguments ("name")) nil [1668 1761])
            ("semantic-analyze-unsplit-name" function
               (:overloadable t
                :arguments ("namelist"))
                nil [1763 1952])
            ("semantic-analyze-unsplit-name-default" function (:arguments ("namelist")) nil [1954 2103])
            ("semantic-analyze-select-best-tag" function (:arguments ("sequence" "tagclass")) nil [2245 3993])
            ("semantic-analyze-find-tags-by-prefix" function (:arguments ("prefix")) nil [4058 4719])
            ("semantic-analyze-dereference-metatype" function
               (:overloadable t
                :arguments ("type" "scope" "type-declaration"))
                nil [4747 5840])
            ("semantic-analyze-type-to-name" function (:arguments ("type")) nil [5894 6333])
            ("semantic-analyze-tag-type" function (:arguments ("tag" "scope" "nometaderef")) nil [6335 7281])
            ("semantic-analyze-type" function (:arguments ("type-declaration" "scope" "nometaderef")) nil [7283 9540])
            ("semantic-tag-similar-p" function (:prototype-flag t) nil [9542 9594])
            ("semantic-analyze-dereference-metatype-stack" function (:arguments ("type" "scope" "type-declaration")) nil [9596 10563])
            ("semantic-analyze-dereference-metatype-1" function (:arguments ("ans" "scope")) nil [10632 12131])
            ("semantic/analyze/fcn" package nil nil [12133 12164]))          
      :file "fcn.el"
      :pointmax 12204
      :fsize 12203
      :lastmodtime '(22436 31432 254422 178000)
      :unmatched-syntax '((close-paren 965 . 966) (symbol 923 . 940) (open-paren 922 . 923)))
    (semanticdb-table "refs.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1411 1430])
            ("semantic/analyze" include nil nil [1431 1458])
            ("semantic/db-find" include nil nil [1459 1486])
            ("semantic/find" include nil nil [1506 1530])
            ("declare-function" code nil nil [1533 1586])
            ("declare-function" code nil nil [1587 1654])
            ("declare-function" code nil nil [1655 1726])
            ("semantic-analyze-references" type
               (:members 
                  ( ("tag" variable
                       (:documentation "The starting TAG we are providing references analysis for."
                        :type "semantic-tag")
                        nil nil)
                    ("tagdb" variable (:documentation "The database that tag can be found in.") nil nil)
                    ("scope" variable (:documentation "A Scope object.") nil nil)
                    ("rawsearchdata" variable (:documentation "The raw search data for TAG's name across all databases.") nil nil))                  
                :type "class")
                nil [1738 2368])
            ("semantic-analyze-tag-references" function
               (:overloadable t
                :arguments ("tag" "db"))
                nil [2370 2660])
            ("semantic-analyze-tag-references-default" function (:arguments ("tag" "db")) nil [2662 3397])
            ("semantic-analyze-refs-impl" function
               (:parent "semantic-analyze-references"
                :arguments ("refs" "in-buffer"))
                nil [3527 4372])
            ("semantic-analyze-refs-proto" function
               (:parent "semantic-analyze-references"
                :arguments ("refs" "in-buffer"))
                nil [4374 5210])
            ("semantic--analyze-refs-full-lookup" function (:arguments ("tag" "scope" "noerror")) nil [5226 5951])
            ("semantic--analyze-refs-find-child-in-find-results" function (:arguments ("find-results" "name" "class")) nil [5953 6805])
            ("semantic--analyze-refs-find-tags-with-parent" function (:arguments ("find-results" "parents")) nil [6807 8027])
            ("semantic--analyze-refs-full-lookup-with-parents" function (:arguments ("tag" "scope")) nil [8029 9812])
            ("semantic--analyze-refs-full-lookup-simple" function (:arguments ("tag" "noerror")) nil [9814 11068])
            ("semantic-analyze-current-tag" function (:user-visible-flag t) nil [11107 11609])
            ("semantic-analyze-proto-impl-toggle" function (:user-visible-flag t) nil [11626 12381])
            ("semantic/analyze/refs" package nil nil [12383 12415]))          
      :file "refs.el"
      :pointmax 12587
      :fsize 12586
      :lastmodtime '(22436 31432 254422 178000)
      :unmatched-syntax '((close-paren 1530 . 1531) (symbol 1488 . 1505) (open-paren 1487 . 1488)))
    (semanticdb-table "complete.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/analyze" include nil nil [1043 1070])
            ("semantic/find" include nil nil [1122 1146])
            ("semantic-analyze-type-constants" function
               (:overloadable t
                :arguments ("type"))
                nil [1197 1358])
            ("semantic-analyze-type-constants-default" function (:arguments ("type")) nil [1360 1446])
            ("semantic-analyze-tags-of-class-list" function (:arguments ("tags" "classlist")) nil [1448 1857])
            ("semantic-analyze-possible-completions" function
               (:overloadable t
                :user-visible-flag t
                :arguments ("context" "flags"))
                nil [1908 3818])
            ("semantic-analyze-possible-completions-default" function (:arguments ("context" "flags")) nil [3820 9428])
            ("semantic/analyze/complete" package nil nil [9430 9466]))          
      :file "complete.el"
      :pointmax 9646
      :fsize 9645
      :lastmodtime '(22436 31432 254422 178000)
      :unmatched-syntax '((close-paren 1146 . 1147) (symbol 1104 . 1121) (open-paren 1103 . 1104))))
  :file "!home!lyra!.emacs.d!cedet!lisp!cedet!semantic!analyze!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
