;; Object multiple-cursors-20160719.216/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "multiple-cursors-20160719.216/"
  :tables
  (list
    (semanticdb-table "multiple-cursors-core.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [988 1005])
            ("rect" include nil nil [1006 1021])
            ("mc--read-char" variable nil nil [1023 1045])
            ("mc/cursor-face" variable
               (:default-value (quote ((t (:inverse-video t))))
                :type "face")
                nil [1047 1161])
            ("mc/cursor-bar-face" variable
               (:default-value (\` ((t (:height 1 :background (\, (face-attribute (quote cursor) :background))))))
                :type "face")
                nil [1163 1350])
            ("mc/region-face" variable
               (:default-value (quote ((t :inherit region)))
                :type "face")
                nil [1352 1463])
            ("mc/add-fake-cursor-to-undo-list" function (:arguments ("forms")) nil [1465 2143])
            ("mc/all-fake-cursors" function (:arguments ("start" "end")) nil [2145 2346])
            ("mc/for-each-fake-cursor" function (:arguments ("forms")) nil [2348 2530])
            ("mc/save-excursion" function (:arguments ("forms")) nil [2532 2923])
            ("mc--compare-by-overlay-start" function (:arguments ("o1" "o2")) nil [2925 3013])
            ("mc/for-each-cursor-ordered" function (:arguments ("forms")) nil [3015 3521])
            ("mc/save-window-scroll" function (:arguments ("forms")) nil [3523 4026])
            ("mc/cursor-is-bar" function nil nil [4028 4194])
            ("mc/make-cursor-overlay-at-eol" function (:arguments ("pos")) nil [4196 4551])
            ("mc/make-cursor-overlay-inline" function (:arguments ("pos")) nil [4553 4879])
            ("mc/make-cursor-overlay-at-point" function nil nil [4881 5171])
            ("mc/make-region-overlay-between-point-and-mark" function nil nil [5173 5447])
            ("mc/cursor-specific-vars" variable (:default-value (quote (transient-mark-mode kill-ring kill-ring-yank-pointer mark-ring mark-active yank-undo-function autopair-action autopair-wrap-action er/history))) nil [5449 5964])
            ("mc/store-current-state-in-overlay" function (:arguments ("o")) nil [5966 6304])
            ("mc/restore-state-from-overlay" function (:arguments ("o")) nil [6306 6596])
            ("mc/remove-fake-cursor" function (:arguments ("o")) nil [6598 6839])
            ("mc/pop-state-from-overlay" function (:arguments ("o")) nil [6841 7017])
            ("mc/delete-region-overlay" function (:arguments ("o")) nil [7019 7194])
            ("mc--current-cursor-id" variable nil nil [7196 7313])
            ("mc/create-cursor-id" function nil nil [7315 7410])
            ("mc--max-cursors-original" variable nil nil [7412 7745])
            ("mc/max-cursors" variable nil nil [7747 8167])
            ("mc/create-fake-cursor-at-point" function (:arguments ("id")) nil [8169 9172])
            ("mc/execute-command" function (:arguments ("cmd")) nil [9174 9499])
            ("mc--executing-command-for-fake-cursor" variable nil nil [9501 9551])
            ("mc/execute-command-for-fake-cursor" function (:arguments ("cmd" "cursor")) nil [9553 9943])
            ("mc/execute-command-for-all-fake-cursors" function (:arguments ("cmd")) nil [9945 10413])
            ("mc/execute-command-for-all-cursors" function (:arguments ("cmd")) nil [10415 10601])
            ("mc--read-char" variable nil nil [10699 10725])
            ("multiple-cursors-mode" variable nil nil [10726 10760])
            ("read-char" function (:arguments ("around" "mc-support" "activate")) nil [10761 10965])
            ("mc--read-quoted-char" variable nil nil [10967 11000])
            ("read-quoted-char" function (:arguments ("around" "mc-support" "activate")) nil [11001 11233])
            ("mc--reset-read-prompts" function nil nil [11235 11329])
            ("mc--reset-read-prompts" code nil nil [11331 11355])
            ("mc/fake-cursor-p" function (:arguments ("o")) nil [11357 11481])
            ("mc/cursor-with-id" function (:arguments ("id")) nil [11483 11732])
            ("mc--stored-state-for-undo" variable nil nil [11734 11847])
            ("activate-cursor-for-undo" function (:arguments ("id")) nil [11849 12236])
            ("deactivate-cursor-after-undo" function (:arguments ("id")) nil [12238 12532])
            ("mc/always-run-for-all" variable nil nil [12534 12695])
            ("mc/prompt-for-inclusion-in-whitelist" function (:arguments ("original-command")) nil [12697 13088])
            ("mc/num-cursors" function nil nil [13090 13268])
            ("mc--this-command" variable nil nil [13270 13349])
            ("make-variable-buffer-local" code nil nil [13350 13396])
            ("mc/make-a-note-of-the-command-being-run" function nil nil [13398 14137])
            ("mc/execute-this-command-for-all-cursors" function nil nil [14139 14475])
            ("execute-kbd-macro" function (:arguments ("around" "skip-fake-cursors" "activate")) nil [14689 14816])
            ("mc/execute-this-command-for-all-cursors-1" function nil nil [14818 17468])
            ("mc/remove-fake-cursors" function nil nil [17470 17822])
            ("mc/keyboard-quit" function (:user-visible-flag t) nil [17824 18032])
            ("mc/keymap" variable nil nil [18034 18194])
            ("unless" code nil nil [18195 18555])
            ("mc--all-equal" function (:arguments ("list")) nil [18557 18797])
            ("mc--kill-ring-entries" function nil nil [18799 19100])
            ("mc--maybe-set-killed-rectangle" function nil nil [19102 19409])
            ("mc/unsupported-minor-modes" variable (:default-value (quote (company-mode auto-complete-mode flyspell-mode jedi-mode))) nil [19411 19640])
            ("mc/temporarily-disabled-minor-modes" variable nil nil [19642 19740])
            ("make-variable-buffer-local" code nil nil [19741 19806])
            ("mc/temporarily-disable-minor-mode" function (:arguments ("mode")) nil [19808 20050])
            ("mc/temporarily-disable-unsupported-minor-modes" function nil nil [20052 20180])
            ("mc/enable-minor-mode" function (:arguments ("mode")) nil [20182 20236])
            ("mc/enable-temporarily-disabled-minor-modes" function nil nil [20238 20407])
            ("mc/mode-line" variable (:default-value (\` (" mc:" (:eval (format (\, (propertize "%d" (quote face) (quote font-lock-warning-face))) (mc/num-cursors)))))) nil [20409 20657])
            ("put" code nil nil [20658 20701])
            ("define-minor-mode" code nil nil [20718 21514])
            ("add-hook" code nil nil [21516 21585])
            ("mc/maybe-multiple-cursors-mode" function nil nil [21587 21804])
            ("unsupported-cmd" function (:arguments ("cmd" "msg")) nil [21806 22219])
            ("unsupported-cmd" code nil nil [22274 22350])
            ("unsupported-cmd" code nil nil [22351 22428])
            ("current-kill" function (:arguments ("before" "interprogram-paste-for-all-cursors" "activate")) nil [22511 23779])
            ("mc/list-file" variable (:default-value (locate-user-emacs-file ".mc-lists.el")) nil [23781 23952])
            ("mc/dump-list" function (:arguments ("list-symbol")) nil [23954 24484])
            ("mc/save-lists" function nil nil [24486 24973])
            ("mc/cmds-to-run-once" variable nil nil [24975 25063])
            ("mc--default-cmds-to-run-once" variable nil nil [25065 25177])
            ("setq" code nil nil [25179 29938])
            ("mc--default-cmds-to-run-for-all" variable nil nil [29940 30051])
            ("setq" code nil nil [30053 34341])
            ("mc/cmds-to-run-for-all" variable nil nil [34343 34439])
            ("load" code nil nil [34441 34462])
            ("multiple-cursors-core" package nil nil [34519 34551]))          
      :file "multiple-cursors-core.el"
      :pointmax 34638
      :fsize 34637
      :lastmodtime '(22433 55331 887198 871000)
      :unmatched-syntax nil)
    (semanticdb-table "multiple-cursors.el"
      :file "multiple-cursors.el"
      :fsize 8866
      :lastmodtime '(22433 55331 971198 875000))
    (semanticdb-table "mc-mark-more.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("multiple-cursors-core" include nil nil [981 1013])
            ("thingatpt" include nil nil [1014 1034])
            ("mc/cursor-end" function (:arguments ("cursor")) nil [1036 1217])
            ("mc/cursor-beg" function (:arguments ("cursor")) nil [1219 1400])
            ("mc/furthest-region-end" function nil nil [1402 1559])
            ("mc/first-region-start" function nil nil [1561 1717])
            ("mc/furthest-cursor-before-point" function nil nil [1719 1990])
            ("mc/furthest-cursor-after-point" function nil nil [1992 2262])
            ("mc/fake-cursor-at-point" function (:arguments ("point")) nil [2264 2661])
            ("mc/region-strings" function nil nil [2663 2971])
            ("mc/enclose-search-term" variable nil nil [2973 3217])
            ("mc/mark-more-like-this" function (:arguments ("skip-last" "direction")) nil [3219 4749])
            ("mc/mark-next-like-this" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4766 5366])
            ("mc/mark-next-like-this-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [5383 6065])
            ("mc/mark-next-like-this-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [6067 6755])
            ("mc/mark-next-word-like-this" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [6773 7220])
            ("mc/mark-next-symbol-like-this" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [7237 7692])
            ("mc/mark-previous-like-this" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [7709 8324])
            ("mc/mark-previous-like-this-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [8341 9041])
            ("mc/mark-previous-like-this-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [9043 9749])
            ("mc/mark-previous-word-like-this" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [9767 10206])
            ("mc/mark-previous-symbol-like-this" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10223 10668])
            ("mc/mark-lines" function (:arguments ("num-lines" "direction")) nil [10670 11286])
            ("mc/mark-next-lines" function (:arguments ("arg")) nil [11303 11422])
            ("mc/mark-previous-lines" function (:arguments ("arg")) nil [11439 11563])
            ("mc/unmark-next-like-this" function (:user-visible-flag t) nil [11580 11736])
            ("mc/unmark-previous-like-this" function (:user-visible-flag t) nil [11753 11917])
            ("mc/skip-to-next-like-this" function (:user-visible-flag t) nil [11934 12117])
            ("mc/skip-to-previous-like-this" function (:user-visible-flag t) nil [12134 12325])
            ("mc/mark-all-like-this" function (:user-visible-flag t) nil [12342 13142])
            ("mc--select-thing-at-point" function (:arguments ("thing")) nil [13144 13324])
            ("mc--select-thing-at-point-or-bark" function (:arguments ("thing")) nil [13326 13500])
            ("mc/mark-all-words-like-this" function nil nil [13517 13685])
            ("mc/mark-all-symbols-like-this" function nil nil [13702 13876])
            ("mc/mark-all-in-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "search"))
                nil [13893 14706])
            ("mc/mark-all-in-region-regexp" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [14723 15873])
            ("when" code nil nil [15875 17548])
            ("mc/mark-more-like-this-extended" function (:user-visible-flag t) nil [17565 18253])
            ("mc/mark-more-like-this-extended-direction" variable nil nil [18255 18404])
            ("make-variable-buffer-local" code nil nil [18406 18467])
            ("mc/mmlte--message" function nil nil [18469 18745])
            ("mc/mmlte--up" function nil nil [18747 18896])
            ("mc/mmlte--down" function nil nil [18898 19047])
            ("mc/mmlte--left" function nil nil [19049 19241])
            ("mc/mmlte--right" function nil nil [19243 19434])
            ("mc/mark-more-like-this-extended-keymap" variable (:default-value (make-sparse-keymap)) nil [19436 19504])
            ("define-key" code nil nil [19506 19584])
            ("define-key" code nil nil [19585 19667])
            ("define-key" code nil nil [19668 19750])
            ("define-key" code nil nil [19751 19835])
            ("mc--restrict-mark-all-to-symbols" variable nil nil [19837 19882])
            ("mc/mark-all-like-this-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19899 20986])
            ("mc/mark-all-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [21003 21767])
            ("mc--in-defun" function nil nil [21769 21828])
            ("mc/mark-all-like-this-in-defun" function (:user-visible-flag t) nil [21845 22084])
            ("mc/mark-all-words-like-this-in-defun" function (:user-visible-flag t) nil [22101 22408])
            ("mc/mark-all-symbols-like-this-in-defun" function (:user-visible-flag t) nil [22425 22742])
            ("mc--mark-symbol-at-point" function (:user-visible-flag t) nil [22744 22962])
            ("mc--get-nice-sgml-context" function nil nil [22964 23152])
            ("mc--on-tag-name-p" function nil nil [23154 23473])
            ("mc/toggle-cursor-on-click" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [23490 24400])
            ("defalias" code nil nil [24417 24478])
            ("mc/mark-sgml-tag-pair" function (:user-visible-flag t) nil [24495 25307])
            ("mc--inside-tag-p" function nil nil [25309 25391])
            ("mc-mark-more" package nil nil [25393 25416]))          
      :file "mc-mark-more.el"
      :pointmax 25448
      :fsize 25447
      :lastmodtime '(22433 55332 175198 885000)
      :unmatched-syntax nil)
    (semanticdb-table "mc-separate-operations.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("multiple-cursors-core" include nil nil [1039 1071])
            ("mc/insert-numbers" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [1088 1485])
            ("mc/insert-numbers-default" variable nil nil [1487 1644])
            ("mc--insert-numbers-number" variable nil nil [1646 1682])
            ("mc--insert-number-and-increase" function nil nil [1684 1863])
            ("mc--ordered-region-strings" function nil nil [1865 2171])
            ("mc/insert-letters" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [2188 2584])
            ("mc--number-to-letters" function (:arguments ("number")) nil [2586 2804])
            ("mc--insert-letters-number" variable nil nil [2806 2842])
            ("mc--insert-letter-and-increase" function nil nil [2844 3028])
            ("mc--strings-to-replace" variable nil nil [3030 3065])
            ("mc--replace-region-strings-1" function nil nil [3067 3290])
            ("mc--replace-region-strings" function nil nil [3292 3437])
            ("mc/reverse-regions" function nil nil [3454 3831])
            ("mc/sort-regions" function nil nil [3848 4076])
            ("mc/vertical-align" function
               (:user-visible-flag t
                :arguments ("character"))
                nil [4094 4838])
            ("mc/vertical-align-with-space" function (:user-visible-flag t) nil [4855 5007])
            ("mc-separate-operations" package nil nil [5009 5042]))          
      :file "mc-separate-operations.el"
      :pointmax 5083
      :fsize 5082
      :lastmodtime '(22433 55332 107198 881000)
      :unmatched-syntax nil)
    (semanticdb-table "mc-cycle-cursors.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("multiple-cursors-core" include nil nil [982 1014])
            ("mc/next-fake-cursor-after-point" function nil nil [1016 1369])
            ("mc/prev-fake-cursor-before-point" function nil nil [1371 1725])
            ("mc/cycle-looping-behaviour" variable (:default-value (quote continue)) nil [1727 2134])
            ("mc/handle-loop-condition" function (:arguments ("error-message")) nil [2136 2336])
            ("mc/first-fake-cursor-after" function (:arguments ("point")) nil [2338 2811])
            ("mc/last-fake-cursor-before" function (:arguments ("point")) nil [2813 3290])
            ("cl-defun" code nil nil [3292 3607])
            ("mc/cycle-forward" function nil nil [3609 3801])
            ("mc/cycle-backward" function nil nil [3803 3995])
            ("define-key" code nil nil [3997 4049])
            ("define-key" code nil nil [4050 4103])
            ("mc-cycle-cursors" package nil nil [4105 4132]))          
      :file "mc-cycle-cursors.el"
      :pointmax 4215
      :fsize 4214
      :lastmodtime '(22433 55332 215198 887000)
      :unmatched-syntax nil)
    (semanticdb-table "mc-edit-lines.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("multiple-cursors-core" include nil nil [970 1002])
            ("mc/edit-lines-empty-lines" variable nil nil [1004 1389])
            ("mc/edit-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [1406 3453])
            ("mc/edit-ends-of-lines" function (:user-visible-flag t) nil [3470 3653])
            ("mc/edit-beginnings-of-lines" function (:user-visible-flag t) nil [3670 3871])
            ("mc-edit-lines" package nil nil [3873 3897]))          
      :file "mc-edit-lines.el"
      :pointmax 3930
      :fsize 3929
      :lastmodtime '(22433 55331 939198 873000)
      :unmatched-syntax nil)
    (semanticdb-table "mc-hide-unmatched-lines-mode.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("multiple-cursors-core" include nil nil [1137 1169])
            ("mc-mark-more" include nil nil [1170 1193])
            ("hum/hide-unmatched-lines-mode-map" variable (:default-value (make-sparse-keymap)) nil [1195 1322])
            ("define-key" code nil nil [1324 1401])
            ("define-key" code nil nil [1402 1484])
            ("hum/keyboard-quit" function (:user-visible-flag t) nil [1486 1601])
            ("hum/disable-hum-mode" function nil nil [1658 1724])
            ("define-minor-mode" code nil nil [1741 2518])
            ("hum/invisible-overlay-name" variable
               (:constant-flag t
                :default-value (quote hum/invisible-overlay-name))
                nil [2520 2585])
            ("hum/lines-to-expand" variable (:default-value 2) nil [2587 2716])
            ("hum/placeholder" variable (:default-value "...") nil [2718 2854])
            ("hum/add-invisible-overlay" function (:arguments ("begin" "end")) nil [2856 3354])
            ("hum/hide-unmatched-lines" function nil nil [3356 3801])
            ("hum/unhide-unmatched-lines" function nil nil [3803 3897])
            ("mc-hide-unmatched-lines-mode" package nil nil [3899 3938])
            ("define-key" code nil nil [3939 4003]))          
      :file "mc-hide-unmatched-lines-mode.el"
      :pointmax 4004
      :fsize 4003
      :lastmodtime '(22433 55332 75198 880000)
      :unmatched-syntax nil)
    (semanticdb-table "mc-mark-pop.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("multiple-cursors-core" include nil nil [59 91])
            ("mc/mark-pop" function (:user-visible-flag t) nil [108 465])
            ("mc-mark-pop" package nil nil [541 563]))          
      :file "mc-mark-pop.el"
      :pointmax 594
      :fsize 593
      :lastmodtime '(22433 55332 39198 878000)
      :unmatched-syntax nil)
    (semanticdb-table "rectangular-region-mode.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("multiple-cursors-core" include nil nil [1045 1077])
            ("rrm/anchor" variable (:default-value (make-marker)) nil [1079 1180])
            ("rectangular-region-mode-map" variable (:default-value (make-sparse-keymap)) nil [1182 1301])
            ("define-key" code nil nil [1303 1374])
            ("define-key" code nil nil [1375 1464])
            ("rectangular-region-mode" variable nil nil [1466 1502])
            ("rrm/keyboard-quit" function (:user-visible-flag t) nil [1504 1675])
            ("set-rectangular-region-anchor" function (:user-visible-flag t) nil [1768 2109])
            ("rrm/remove-rectangular-region-overlays" function nil nil [2111 2399])
            ("rrm/repaint" function nil nil [2401 3663])
            ("rrm/switch-to-multiple-cursors" function
               (:user-visible-flag t
                :arguments ("forms"))
                nil [3665 3857])
            ("er/expand-region" function (:arguments ("before" "switch-from-rrm-to-mc" "activate")) nil [3859 3997])
            ("kill-ring-save" function (:arguments ("before" "switch-from-rrm-to-mc" "activate")) nil [3999 4135])
            ("define-minor-mode" code nil nil [4152 4627])
            ("rectangular-region-mode" package nil nil [4629 4663]))          
      :file "rectangular-region-mode.el"
      :pointmax 4706
      :fsize 4705
      :lastmodtime '(22433 55332 7198 877000)
      :unmatched-syntax nil))
  :file "!home!lyra!.emacs.d!elpa!multiple-cursors-20160719.216!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
