;; Object cedet/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "cedet/"
  :tables
  (list
    (semanticdb-table "mode-local.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [1786 1799])
            ("mode-local-map-file-buffers" function (:arguments ("function" "predicate" "buffers")) nil [1824 2498])
            ("get-mode-local-parent" function (:arguments ("mode")) nil [2500 2699])
            ("mode-local-equivalent-mode-p" function (:arguments ("mode")) nil [2835 3079])
            ("mode-local-map-mode-buffers" function (:arguments ("function" "modes")) nil [3081 3551])
            ("mode-local-init-hook" variable nil nil [3576 3711])
            ("mode-local-changed-mode-buffers" variable nil nil [3713 3818])
            ("mode-local--init-mode" variable nil nil [3820 3854])
            ("mode-local-initialized-p" function nil nil [3856 4116])
            ("mode-local-post-major-mode-change" function nil nil [4118 4724])
            ("mode-local-on-major-mode-change" function nil nil [4726 4956])
            ("set-mode-local-parent" function (:arguments ("mode" "parent")) nil [4979 5474])
            ("define-child-mode" function (:arguments ("mode" "parent" "docstring")) nil [5476 5760])
            ("mode-local-use-bindings-p" function (:arguments ("this-mode" "desired-mode")) nil [5762 6054])
            ("mode-local-symbol-table" variable nil nil [6083 6290])
            ("make-variable-buffer-local" code nil nil [6291 6344])
            ("mode-local-active-mode" variable nil nil [6346 6426])
            ("new-mode-local-bindings" function nil nil [6428 6537])
            ("mode-local-bind" function (:arguments ("bindings" "plist" "mode")) nil [6539 9652])
            ("mode-local-symbol" function (:arguments ("symbol" "mode")) nil [9654 10538])
            ("mode-local-symbol-value" function (:arguments ("symbol" "mode" "property")) nil [10540 11114])
            ("activate-mode-local-bindings" function (:arguments ("mode")) nil [11145 12889])
            ("deactivate-mode-local-bindings" function (:arguments ("mode")) nil [12891 13567])
            ("with-mode-local-symbol" function (:arguments ("mode" "body")) nil [13569 14965])
            ("put" code nil nil [14966 15019])
            ("with-mode-local" function (:arguments ("mode" "body")) nil [15021 15404])
            ("put" code nil nil [15405 15451])
            ("mode-local-value" function (:arguments ("mode" "sym")) nil [15454 15650])
            ("setq-mode-local" function (:arguments ("mode" "args")) nil [15652 16817])
            ("defvar-mode-local" function (:arguments ("mode" "sym" "val" "docstring")) nil [16819 17106])
            ("put" code nil nil [17107 17160])
            ("defconst-mode-local" function (:arguments ("mode" "sym" "val" "docstring")) nil [17162 17549])
            ("put" code nil nil [17550 17605])
            ("make-obsolete-overload" function (:arguments ("old" "new" "when")) nil [17636 17959])
            ("overload-obsoleted-by" function (:arguments ("overload")) nil [17961 18139])
            ("overload-that-obsolete" function (:arguments ("overload")) nil [18141 18341])
            ("fetch-overload" function (:arguments ("overload")) nil [18343 18832])
            ("mode-local--override" function (:arguments ("name" "args" "body")) nil [18834 19512])
            ("mode-local--expand-overrides" function (:arguments ("name" "args" "body")) nil [19514 20413])
            ("mode-local--overload-body" function (:arguments ("name" "args" "body")) nil [20415 20808])
            ("put" code nil nil [20825 20878])
            ("define-overloadable-function" function (:arguments ("name" "args" "docstring" "body")) nil [20880 22190])
            ("put" code nil nil [22191 22240])
            ("defalias" code nil nil [22242 22299])
            ("function-overload-p" function (:arguments ("symbol")) nil [22301 22474])
            ("define-mode-local-override" function (:arguments ("name" "mode" "args" "docstring" "body")) nil [22476 23432])
            ("mode-local-read-function" function (:arguments ("prompt" "initial" "hist" "default")) nil [23458 23744])
            ("overload-docstring-extension" function (:arguments ("overload")) nil [23767 24416])
            ("mode-local-augment-function-help" function (:arguments ("symbol")) nil [24418 24949])
            ("mode-local-print-binding" function (:arguments ("symbol")) nil [24984 25379])
            ("mode-local-print-bindings" function (:arguments ("table")) nil [25381 26610])
            ("mode-local-describe-bindings-2" function (:arguments ("buffer-or-mode")) nil [26612 27532])
            ("mode-local-describe-bindings-1" function (:arguments ("buffer-or-mode" "interactive-p")) nil [27534 28451])
            ("describe-mode-local-bindings" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [28453 28685])
            ("describe-mode-local-bindings-in-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [28687 29074])
            ("mode-local-setup-edebug-specs" function nil nil [29699 30306])
            ("add-hook" code nil nil [30308 30368])
            ("add-hook" code nil nil [30370 30431])
            ("add-hook" code nil nil [30432 30499])
            ("mode-local" package nil nil [30501 30522]))          
      :file "mode-local.el"
      :pointmax 30552
      :fsize 30551
      :lastmodtime '(22436 31432 254422 178000)
      :unmatched-syntax '((close-paren 1799 . 1800) (symbol 1768 . 1785) (open-paren 1767 . 1768)))
    (semanticdb-table "semantic.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cedet" include nil nil [1379 1395])
            ("semantic/tag" include nil nil [1396 1419])
            ("semantic/lex" include nil nil [1420 1443])
            ("semantic-version" variable (:default-value "2.2") nil [1445 1509])
            ("declare-function" code nil nil [1511 1556])
            ("declare-function" code nil nil [1557 1628])
            ("semantic-require-version" function (:arguments ("major" "minor" "beta")) nil [1630 2208])
            ("semantic" customgroup (:user-visible-flag t) nil [2210 2292])
            ("semantic-faces" customgroup (:user-visible-flag t) nil [2294 2385])
            ("semantic/fw" include nil nil [2387 2409])
            ("semantic--parse-table" variable nil nil [2460 2655])
            ("make-variable-buffer-local" code nil nil [2656 2707])
            ("semantic-varalias-obsolete" code nil nil [2708 2805])
            ("semantic-symbol->name-assoc-list" variable (:default-value (quote ((type . "Types") (variable . "Variables") (function . "Functions") (include . "Dependencies") (package . "Provides")))) nil [2807 3346])
            ("make-variable-buffer-local" code nil nil [3347 3409])
            ("semantic-symbol->name-assoc-list-for-type-parts" variable nil nil [3411 3845])
            ("make-variable-buffer-local" code nil nil [3846 3923])
            ("semantic-case-fold" variable nil nil [3925 4003])
            ("make-variable-buffer-local" code nil nil [4004 4052])
            ("semantic-expand-nonterminal" variable nil nil [4054 4546])
            ("make-variable-buffer-local" code nil nil [4547 4604])
            ("semantic--buffer-cache" variable nil nil [4606 5019])
            ("make-variable-buffer-local" code nil nil [5020 5072])
            ("semantic-varalias-obsolete" code nil nil [5073 5171])
            ("semantic-unmatched-syntax-cache" variable nil nil [5173 5263])
            ("make-variable-buffer-local" code nil nil [5264 5325])
            ("semantic-unmatched-syntax-cache-check" variable nil nil [5327 5484])
            ("make-variable-buffer-local" code nil nil [5485 5552])
            ("semantic-edits-are-safe" variable nil nil [5554 5904])
            ("semantic-unmatched-syntax-hook" variable nil nil [5906 6531])
            ("semantic--before-fetch-tags-hook" variable nil nil [6533 6831])
            ("semantic-varalias-obsolete" code nil nil [6832 6950])
            ("semantic-after-toplevel-bovinate-hook" variable nil nil [6952 7311])
            ("make-obsolete-variable" code nil nil [7312 7386])
            ("semantic-after-toplevel-cache-change-hook" variable nil nil [7388 7828])
            ("semantic-before-toplevel-cache-flush-hook" variable nil nil [7830 8180])
            ("semantic-dump-parse" variable nil nil [8182 8297])
            ("semantic-parser-name" variable (:default-value "LL") nil [8299 8393])
            ("make-variable-buffer-local" code nil nil [8394 8444])
            ("semantic--completion-cache" variable nil nil [8446 8543])
            ("make-variable-buffer-local" code nil nil [8544 8600])
            ("semantic-parse-tree-state" variable (:default-value (quote needs-rebuild)) nil [8642 8728])
            ("make-variable-buffer-local" code nil nil [8729 8784])
            ("semantic-parse-tree-unparseable" function nil nil [8786 9069])
            ("semantic-parse-tree-unparseable-p" function nil nil [9071 9235])
            ("semantic-parse-tree-set-needs-update" function nil nil [9237 9458])
            ("semantic-parse-tree-needs-update-p" function nil nil [9460 9622])
            ("semantic-parse-tree-set-needs-rebuild" function nil nil [9624 9847])
            ("semantic-parse-tree-needs-rebuild-p" function nil nil [9849 10013])
            ("semantic-parse-tree-set-up-to-date" function nil nil [10015 10159])
            ("semantic-parse-tree-up-to-date-p" function nil nil [10161 10303])
            ("semantic-inhibit-functions" variable nil nil [10340 10581])
            ("semantic-new-buffer-setup-functions" variable (:default-value (quote ((emacs-lisp-mode . semantic-default-elisp-setup) (c-mode . semantic-default-c-setup) (c++-mode . semantic-default-c-setup) (arduino-mode . semantic-default-c-setup) (html-mode . semantic-default-html-setup) (java-mode . wisent-java-default-setup) (js-mode . wisent-javascript-setup-parser) (python-mode . wisent-python-default-setup) (scheme-mode . semantic-default-scheme-setup) (f90-mode . semantic-default-f90-setup) (srecode-template-mode . srecode-template-setup-parser) (texinfo-mode . semantic-default-texi-setup) (makefile-automake-mode . semantic-default-make-setup) (makefile-gmake-mode . semantic-default-make-setup) (makefile-makepp-mode . semantic-default-make-setup) (makefile-bsdmake-mode . semantic-default-make-setup) (makefile-imake-mode . semantic-default-make-setup) (makefile-mode . semantic-default-make-setup)))) nil [10583 11957])
            ("semantic-init-hook" variable nil nil [11959 12054])
            ("semantic-init-mode-hook" variable nil nil [12056 12156])
            ("make-variable-buffer-local" code nil nil [12157 12210])
            ("semantic-init-db-hook" variable nil nil [12212 12482])
            ("semantic-varalias-obsolete" code nil nil [12484 12567])
            ("semantic-varalias-obsolete" code nil nil [12568 12661])
            ("semantic-varalias-obsolete" code nil nil [12662 12751])
            ("semantic-error-if-unparsed" function nil nil [12753 12950])
            ("semantic--umatched-syntax-needs-refresh-p" function nil nil [12952 13237])
            ("semantic-new-buffer-fcn" function nil nil [13239 14863])
            ("semantic-fetch-tags-fast" function nil nil [14865 15109])
            ("condition-case" code nil nil [15157 15203])
            ("semantic-edebug" variable nil nil [15206 15345])
            ("semantic-elapsed-time" function (:arguments ("start" "end")) nil [15347 15538])
            ("bovinate" function
               (:user-visible-flag t
                :arguments ("clear"))
                nil [15540 16296])
            ("semantic-parse-stream" function
               (:overloadable t
                :arguments ("stream" "nonterminal"))
                nil [16405 16991])
            ("semantic-parse-changes" function (:overloadable t) nil [16993 17240])
            ("semantic-parse-region" function
               (:overloadable t
                :arguments ("start" "end" "nonterminal" "depth" "returnonerror"))
                nil [17242 18072])
            ("semantic-parse-region-default" function (:arguments ("start" "end" "nonterminal" "depth" "returnonerror")) nil [18074 19126])
            ("semantic-set-unmatched-syntax-cache" function (:arguments ("unmatched-syntax")) nil [19154 19701])
            ("semantic-clear-unmatched-syntax-cache" function nil nil [19703 19892])
            ("semantic-unmatched-syntax-tokens" function nil nil [19894 20517])
            ("semantic-clear-toplevel-cache" function (:user-visible-flag t) nil [20519 21533])
            ("semantic-bovinate-nonterminal-check-obarray" variable nil nil [21535 21587])
            ("semantic--set-buffer-cache" function (:arguments ("tagtable")) nil [21589 22480])
            ("semantic-working-type" variable (:default-value (quote percent)) nil [22482 22684])
            ("semantic-varalias-obsolete" code nil nil [22685 22784])
            ("semantic-minimum-working-buffer-size" variable (:default-value (* 1024 5)) nil [22786 23025])
            ("semantic-parser-working-message" function (:arguments ("arg")) nil [23027 23342])
            ("semantic-fetch-tags" function nil nil [23565 26527])
            ("semantic-refresh-tags-safe" function nil nil [26529 27838])
            ("semantic-bovinate-toplevel" function (:arguments ("ignored")) nil [27840 27955])
            ("make-obsolete" code nil nil [27956 28027])
            ("semantic-fetch-available-tags" function nil nil [28288 28728])
            ("semantic-repeat-parse-whole-stream" function (:arguments ("stream" "nonterm" "returnonerror")) nil [29001 31214])
            ("semantic-parser-warnings" variable nil nil [31490 31586])
            ("make-variable-buffer-local" code nil nil [31587 31641])
            ("semantic-clear-parser-warnings" function nil nil [31643 31785])
            ("semantic-push-parser-warning" function (:arguments ("warning" "start" "end")) nil [31787 32010])
            ("semantic-dump-parser-warnings" function (:user-visible-flag t) nil [32012 32331])
            ("semantic-bovinate-region-until-error" function (:arguments ("start" "end" "nonterm" "depth")) nil [32523 33132])
            ("make-obsolete" code nil nil [33133 33231])
            ("semantic-bovinate-from-nonterminal" function (:arguments ("start" "end" "nonterm" "depth" "length")) nil [33233 33778])
            ("semantic-bovinate-from-nonterminal-full" function (:arguments ("start" "end" "nonterm" "depth")) nil [33780 34356])
            ("make-obsolete" code nil nil [34357 34458])
            ("semantic-force-refresh" function (:user-visible-flag t) nil [34480 34733])
            ("semantic-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map ",j" (quote semantic-complete-jump-local)) (define-key map ",J" (quote semantic-complete-jump)) (define-key map ",m" (quote semantic-complete-jump-local-members)) (define-key map ",g" (quote semantic-symref-symbol)) (define-key map ",G" (quote semantic-symref)) (define-key map ",p" (quote senator-previous-tag)) (define-key map ",n" (quote senator-next-tag)) (define-key map ",u" (quote senator-go-to-up-reference)) (define-key map ", " (quote semantic-complete-analyze-inline)) (define-key map "," (quote senator-kill-tag)) (define-key map ",\367" (quote senator-copy-tag)) (define-key map "," (quote senator-yank-tag)) (define-key map ",r" (quote senator-copy-tag-to-register)) (define-key map ",," (quote semantic-force-refresh)) (define-key map [3 44 up] (quote senator-transpose-tags-up)) (define-key map [3 44 down] (quote senator-transpose-tags-down)) (define-key map ",l" (quote semantic-analyze-possible-completions)) (define-key map [menu-bar cedet-menu] (list (quote menu-item) "Development" cedet-menu-map :enable (quote (not (and menu-bar-mode (bound-and-true-p global-ede-mode)))))) map)) nil [34735 36349])
            ("let" code nil nil [36400 42887])
            ("semantic-load-system-cache-loaded" variable nil nil [43039 43201])
            ("semantic-submode-list" variable
               (:constant-flag t
                :default-value (quote (global-semantic-highlight-func-mode global-semantic-decoration-mode global-semantic-stickyfunc-mode global-semantic-idle-completions-mode global-semantic-idle-scheduler-mode global-semanticdb-minor-mode global-semantic-idle-summary-mode global-semantic-mru-bookmark-mode global-cedet-m3-minor-mode global-semantic-idle-local-symbol-highlight-mode global-semantic-highlight-edits-mode global-semantic-show-unmatched-syntax-mode global-semantic-show-parser-state-mode)))
                nil [43203 43813])
            ("semantic-default-submodes" variable (:default-value (quote (global-semantic-idle-scheduler-mode global-semanticdb-minor-mode))) nil [43830 45483])
            ("define-minor-mode" code nil nil [45500 48657])
            ("semantic-analyze-completion-at-point-function" function nil nil [48693 49344])
            ("semantic-analyze-notc-completion-at-point-function" function nil nil [49346 49994])
            ("semantic-analyze-nolongprefix-completion-at-point-function" function nil nil [49996 50711])
            ("global-semantic-idle-completions-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [50776 50990])
            ("semantic-idle-completions-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [50992 51402])
            ("global-semantic-idle-summary-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [51404 51610])
            ("semantic-idle-summary-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [51612 52127])
            ("global-semantic-idle-local-symbol-highlight-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [52129 52417])
            ("srecode-template-setup-parser" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [52419 52547])
            ("semantic" package nil nil [52549 52568])
            ("semantic/util" include nil nil [52670 52694]))          
      :file "semantic.el"
      :pointmax 52751
      :fsize 52750
      :lastmodtime '(22436 31432 254422 178000)
      :unmatched-syntax '((close-paren 15203 . 15204) (symbol 15137 . 15154) (open-paren 15136 . 15137)))
    (semanticdb-table "ede.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cedet" include nil nil [1479 1495])
            ("eieio" include nil nil [1496 1512])
            ("eieio-speedbar" include nil nil [1513 1538])
            ("ede/source" include nil nil [1539 1560])
            ("ede/base" include nil nil [1561 1580])
            ("ede/auto" include nil nil [1581 1600])
            ("ede/detect" include nil nil [1601 1622])
            ("load" code nil nil [1644 1680])
            ("declare-function" code nil nil [1683 1733])
            ("declare-function" code nil nil [1734 1781])
            ("declare-function" code nil nil [1782 1843])
            ("declare-function" code nil nil [1844 1914])
            ("declare-function" code nil nil [1915 1969])
            ("declare-function" code nil nil [1970 2034])
            ("declare-function" code nil nil [2035 2099])
            ("declare-function" code nil nil [2100 2142])
            ("declare-function" code nil nil [2143 2194])
            ("declare-function" code nil nil [2195 2242])
            ("declare-function" code nil nil [2243 2308])
            ("declare-function" code nil nil [2309 2367])
            ("ede-version" variable
               (:constant-flag t
                :default-value "2.0")
                nil [2369 2435])
            ("ede-version" function (:user-visible-flag t) nil [2447 2564])
            ("ede" customgroup (:user-visible-flag t) nil [2566 2656])
            ("ede-auto-add-method" variable (:default-value (quote ask)) nil [2658 3407])
            ("ede-debug-program-function" variable (:default-value (quote gdb)) nil [3409 3530])
            ("ede-project-directories" variable nil nil [3574 4395])
            ("ede-directory-safe-p" function (:arguments ("dir")) nil [4397 5061])
            ("ede-projects" variable nil nil [5091 5177])
            ("ede-object-root-project" variable nil nil [5179 5358])
            ("make-variable-buffer-local" code nil nil [5359 5412])
            ("ede-object-project" variable nil nil [5414 5592])
            ("make-variable-buffer-local" code nil nil [5593 5641])
            ("ede-object" variable nil nil [5643 5777])
            ("make-variable-buffer-local" code nil nil [5778 5818])
            ("ede-selected-object" variable nil nil [5820 5970])
            ("ede-constructing" variable nil nil [5972 6156])
            ("ede-deep-rescan" variable nil nil [6158 6321])
            ("ede-singular-object" function (:arguments ("prompt")) nil [6342 6529])
            ("ede-choose-object" function (:arguments ("prompt" "list-o-o")) nil [6531 6844])
            ("ede-minor-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (pmap (make-sparse-keymap))) (define-key pmap "e" (quote ede-edit-file-target)) (define-key pmap "a" (quote ede-add-file)) (define-key pmap "d" (quote ede-remove-file)) (define-key pmap "t" (quote ede-new-target)) (define-key pmap "g" (quote ede-rescan-toplevel)) (define-key pmap "s" (quote ede-speedbar)) (define-key pmap "f" (quote ede-find-file)) (define-key pmap "C" (quote ede-compile-project)) (define-key pmap "c" (quote ede-compile-target)) (define-key pmap "" (quote ede-compile-selected)) (define-key pmap "D" (quote ede-debug-target)) (define-key pmap "R" (quote ede-run-target)) (define-key map "." pmap) map)) nil [6868 7605])
            ("global-ede-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [menu-bar cedet-menu] (cons "Development" cedet-menu-map)) map)) nil [7607 7803])
            ("define-key" code nil nil [7850 7999])
            ("define-key" code nil nil [8000 8141])
            ("define-key" code nil nil [8142 8241])
            ("define-key" code nil nil [8242 8383])
            ("define-key" code nil nil [8384 8552])
            ("define-key" code nil nil [8553 8725])
            ("define-key" code nil nil [8726 8922])
            ("ede-buffer-belongs-to-target-p" function nil nil [8924 9147])
            ("ede-buffer-belongs-to-project-p" function nil nil [9149 9363])
            ("ede-menu-obj-of-class-p" function (:arguments ("class")) nil [9365 9621])
            ("ede-build-forms-menu" function (:arguments ("menu-def")) nil [9623 11069])
            ("ede-target-forms-menu" function (:arguments ("menu-def")) nil [11071 11724])
            ("ede-project-forms-menu" function (:arguments ("menu-def")) nil [11726 12572])
            ("ede-configuration-forms-menu" function (:arguments ("menu-def")) nil [12574 13294])
            ("ede-project-configurations-set" function
               (:user-visible-flag t
                :arguments ("newconfig"))
                nil [13296 13895])
            ("ede-customize-forms-menu" function (:arguments ("menu-def")) nil [13897 14614])
            ("ede-apply-object-keymap" function (:arguments ("default")) nil [14617 15313])
            ("ede-menu-items-build" function
               (:parent "ede-project"
                :arguments ("obj" "current"))
                nil [15357 15740])
            ("ede-menu-items-build" function
               (:parent "ede-target"
                :arguments ("obj" "current"))
                nil [15742 16112])
            ("ede-apply-target-options" function nil nil [16141 16392])
            ("ede-turn-on-hook" function nil nil [16394 16784])
            ("define-minor-mode" code nil nil [16786 17527])
            ("ede-initialize-state-current-buffer" function nil nil [17529 19643])
            ("ede-reset-all-buffers" function (:user-visible-flag t) nil [19645 20073])
            ("define-minor-mode" code nil nil [20090 21672])
            ("ede-ignored-file-alist" variable (:default-value (quote ("\\.cvsignore$" "\\.#" "~$"))) nil [21674 21816])
            ("ede-ignore-file" function (:arguments ("filename")) nil [21818 22051])
            ("ede-auto-add-to-target" function nil nil [22053 23674])
            ("ede" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [23716 25532])
            ("ede-check-project-query-fcn" variable (:default-value (quote y-or-n-p)) nil [25534 25719])
            ("ede-check-project-directory" function (:arguments ("dir")) nil [25721 26823])
            ("ede-new" function
               (:user-visible-flag t
                :arguments ("type" "name"))
                nil [26825 29721])
            ("ede-add-subproject" function
               (:parent "ede-project"
                :arguments ("proj-a" "proj-b"))
                nil [29723 29887])
            ("ede-invoke-method" function (:arguments ("sym" "args")) nil [29889 30294])
            ("ede-rescan-toplevel" function (:user-visible-flag t) nil [30296 30637])
            ("ede-new-target" function
               (:user-visible-flag t
                :arguments ("args"))
                nil [30639 31209])
            ("ede-new-target-custom" function (:user-visible-flag t) nil [31211 31374])
            ("ede-delete-target" function
               (:user-visible-flag t
                :arguments ("target"))
                nil [31376 32024])
            ("ede-add-file" function
               (:user-visible-flag t
                :arguments ("target"))
                nil [32026 32851])
            ("ede-remove-file" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [32853 33515])
            ("ede-edit-file-target" function (:user-visible-flag t) nil [33517 33681])
            ("ede-compile-project" function (:user-visible-flag t) nil [33716 34057])
            ("ede-compile-selected" function
               (:user-visible-flag t
                :arguments ("target"))
                nil [34059 34288])
            ("ede-compile-target" function (:user-visible-flag t) nil [34290 34433])
            ("ede-debug-target" function (:user-visible-flag t) nil [34435 34572])
            ("ede-run-target" function (:user-visible-flag t) nil [34574 34705])
            ("ede-make-dist" function (:user-visible-flag t) nil [34707 34880])
            ("project-interactive-select-target" function
               (:parent "ede-project-placeholder"
                :arguments ("this" "prompt"))
                nil [35272 35522])
            ("project-interactive-select-target" function
               (:parent "ede-project"
                :arguments ("this" "prompt"))
                nil [35524 35853])
            ("project-add-file" function
               (:parent "ede-project-placeholder"
                :arguments ("this" "file"))
                nil [35855 36065])
            ("project-add-file" function
               (:parent "ede-target"
                :arguments ("ot" "file"))
                nil [36067 36275])
            ("project-remove-file" function
               (:parent "ede-target"
                :arguments ("ot" "fnnd"))
                nil [36277 36482])
            ("project-edit-file-target" function
               (:parent "ede-target"
                :arguments ("ot"))
                nil [36484 36636])
            ("project-new-target" function
               (:parent "ede-project"
                :arguments ("proj" "args"))
                nil [36638 36840])
            ("project-new-target-custom" function
               (:parent "ede-project"
                :arguments ("proj"))
                nil [36842 37047])
            ("project-delete-target" function
               (:parent "ede-target"
                :arguments ("ot"))
                nil [37049 37222])
            ("project-compile-project" function
               (:parent "ede-project"
                :arguments ("obj" "command"))
                nil [37224 37468])
            ("project-compile-target" function
               (:parent "ede-target"
                :arguments ("obj" "command"))
                nil [37470 37713])
            ("project-debug-target" function
               (:parent "ede-target"
                :arguments ("obj"))
                nil [37715 37889])
            ("project-run-target" function
               (:parent "ede-target"
                :arguments ("obj"))
                nil [37891 38047])
            ("project-make-dist" function
               (:parent "ede-project"
                :arguments ("this"))
                nil [38049 38230])
            ("project-dist-files" function
               (:parent "ede-project"
                :arguments ("this"))
                nil [38232 38429])
            ("project-rescan" function
               (:parent "ede-project"
                :arguments ("this"))
                nil [38431 38592])
            ("ede-ecb-project-paths" function nil nil [38594 38871])
            ("ede-add-project-to-global-list" function (:arguments ("proj")) nil [38905 39391])
            ("ede-delete-project-from-global-list" function (:arguments ("proj")) nil [39393 39550])
            ("ede-flush-deleted-projects" function (:user-visible-flag t) nil [39552 39913])
            ("ede-load-project-file" function (:arguments ("dir" "detectin" "rootreturn")) nil [39915 41751])
            ("ede-parent-project" function (:arguments ("obj")) nil [41864 42943])
            ("ede-current-project" function (:arguments ("dir")) nil [42945 43426])
            ("ede-buffer-object" function (:arguments ("buffer" "projsym")) nil [43428 44689])
            ("ede-target-in-project-p" function
               (:parent "ede-project"
                :arguments ("proj" "target"))
                nil [44691 45101])
            ("ede-target-parent" function (:arguments ("target")) nil [45103 45553])
            ("ede-find-target" function
               (:parent "ede-project"
                :arguments ("proj" "buffer"))
                nil [45555 46355])
            ("ede-target-buffer-in-sourcelist" function
               (:parent "ede-target"
                :arguments ("this" "buffer" "source"))
                nil [46357 46596])
            ("ede-buffer-mine" function
               (:parent "ede-project"
                :arguments ("this" "buffer"))
                nil [46598 46727])
            ("ede-buffer-mine" function
               (:parent "ede-target"
                :arguments ("this" "buffer"))
                nil [46729 46998])
            ("ede-project-buffers" function (:arguments ("project")) nil [47025 47406])
            ("ede-target-buffers" function (:arguments ("target")) nil [47408 47747])
            ("ede-buffers" function nil nil [47749 48007])
            ("ede-map-buffers" function (:arguments ("proc")) nil [48009 48120])
            ("ede-map-project-buffers" function
               (:parent "ede-project"
                :arguments ("this" "proc"))
                nil [48122 48287])
            ("ede-map-target-buffers" function
               (:parent "ede-target"
                :arguments ("this" "proc"))
                nil [48289 48451])
            ("ede-map-subprojects" function
               (:parent "ede-project"
                :arguments ("this" "proc"))
                nil [48479 48724])
            ("ede-map-all-subprojects" function
               (:parent "ede-project"
                :arguments ("this" "allproc"))
                nil [48726 49083])
            ("ede-map-targets" function
               (:parent "ede-project"
                :arguments ("this" "proc"))
                nil [49183 49322])
            ("ede-map-any-target-p" function
               (:parent "ede-project"
                :arguments ("this" "proc"))
                nil [49324 49552])
            ("ede-system-include-path" function
               (:parent "ede-project"
                :arguments ("this"))
                nil [49716 49832])
            ("ede-system-include-path" function
               (:parent "ede-target"
                :arguments ("this"))
                nil [49834 49949])
            ("ede-source-paths" function
               (:parent "ede-project"
                :arguments ("this" "mode"))
                nil [49951 50170])
            ("ede-apply-preprocessor-map" function nil nil [50181 51005])
            ("ede-system-include-path" function
               (:parent "ede-project"
                :arguments ("this"))
                nil [51007 51123])
            ("ede-preprocessor-map" function
               (:parent "ede-project"
                :arguments ("this"))
                nil [51125 51232])
            ("ede-preprocessor-map" function
               (:parent "ede-target"
                :arguments ("this"))
                nil [51234 51340])
            ("ede-java-classpath" function
               (:parent "ede-project"
                :arguments ("this"))
                nil [51350 51492])
            ("ede-set" function
               (:user-visible-flag t
                :arguments ("variable" "value" "proj"))
                nil [51525 52194])
            ("ede-apply-project-local-variables" function (:arguments ("buffer")) nil [52196 52644])
            ("ede-make-project-local-variable" function (:arguments ("variable" "project")) nil [52646 52968])
            ("ede-set-project-local-variable" function (:arguments ("variable" "value" "project")) nil [52970 53492])
            ("ede-set-project-variables" function
               (:parent "ede-project"
                :arguments ("project" "buffer"))
                nil [53494 53812])
            ("ede-commit-local-variables" function
               (:parent "ede-project"
                :arguments ("proj"))
                nil [53814 53925])
            ("ede" package nil nil [53927 53941])
            ("ede/files" include nil nil [53991 54011])
            ("if" code nil nil [54097 54210]))          
      :file "ede.el"
      :pointmax 54233
      :fsize 54232
      :lastmodtime '(22436 31432 246422 178000)
      :unmatched-syntax '((close-paren 1680 . 1681) (symbol 1625 . 1641) (open-paren 1624 . 1625)))
    (semanticdb-table "cedet.el"
      :file "cedet.el"
      :fsize 5049
      :lastmodtime '(22436 31432 246422 178000))
    (semanticdb-table "working.el"
      :file "working.el"
      :fsize 23671
      :lastmodtime '(22436 31432 282422 179000))
    (semanticdb-table "fame.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("fame-valid-levels" variable
               (:constant-flag t
                :default-value (quote (:error :warning :info :debug)))
                nil [2596 2684])
            ("fame-valid-level-values" variable
               (:constant-flag t
                :default-value (quote (t nolog temp temp-nolog log none)))
                nil [2686 2790])
            ("fame-default-level-values" variable
               (:constant-flag t
                :default-value (quote (:debug log :info temp :warning t :error t)))
                nil [2792 2920])
            ("define-widget" code nil nil [2922 3298])
            ("define-widget" code nil nil [3300 3397])
            ("define-widget" code nil nil [3399 3887])
            ("fame" customgroup (:user-visible-flag t) nil [3889 3982])
            ("fame-temp-message-delay" variable
               (:user-visible-flag t
                :default-value 1)
                nil [3984 4102])
            ("if" code nil nil [6365 7595])
            ("condition-case" code nil nil [6250 6309])
            ("fame-log-message" function (:arguments ("args")) nil [5509 6188])
            ("if" code nil nil [4926 5401])
            ("if" code nil nil [4377 4866])
            ("defalias" code nil nil [4216 4316])
            ("fame-temp-message" function (:arguments ("args")) nil [7601 7878])
            ("fame-temp-message-nolog" function (:arguments ("args")) nil [7880 8182])
            ("fame-check-level" function (:arguments ("level")) nil [8219 8470])
            ("fame-check-level-value" function (:arguments ("value")) nil [8472 8747])
            ("fame-check-channel" function (:arguments ("channel")) nil [8749 8999])
            ("fame-check-channel-levels" function (:arguments ("levels")) nil [9001 9465])
            ("fame-channel-symbol" function (:arguments ("channel")) nil [9467 9628])
            ("fame-channel-levels" function (:arguments ("channel")) nil [9630 9944])
            ("fame-level-display" function (:arguments ("channel" "level")) nil [9946 10155])
            ("fame-send-functions-alist" variable
               (:constant-flag t
                :default-value (quote ((none) (log . fame-log-message) (temp . fame-temp-message) (temp-nolog . fame-temp-message-nolog) (nolog . fame-message-nolog) (t . message))))
                nil [10194 10440])
            ("fame-send" function (:arguments ("channel" "level" "args")) nil [10442 10819])
            ("fame-send-debug" function (:arguments ("channel" "args")) nil [10821 11029])
            ("fame-send-info" function (:arguments ("channel" "args")) nil [11031 11246])
            ("fame-send-warning" function (:arguments ("channel" "args")) nil [11248 11462])
            ("fame-send-error" function (:arguments ("channel" "args")) nil [11464 11673])
            ("define-fame-channel" function (:arguments ("channel" "default" "docstring")) nil [11719 14554])
            ("fame" package nil nil [14556 14571]))          
      :file "fame.el"
      :pointmax 14595
      :fsize 14594
      :lastmodtime '(22436 31432 254422 178000)
      :unmatched-syntax '((close-paren 7598 . 7599) (punctuation 5508 . 5509) (symbol 4136 . 4152) (open-paren 4135 . 4136)))
    (semanticdb-table "cedet-m3.el"
      :file "cedet-m3.el"
      :fsize 6633
      :lastmodtime '(22436 31432 246422 178000))
    (semanticdb-table "cedet-android.el"
      :file "cedet-android.el"
      :fsize 10111
      :lastmodtime '(22436 31432 246422 178000))
    (semanticdb-table "cedet-files.el"
      :file "cedet-files.el"
      :fsize 4175
      :lastmodtime '(22436 31432 246422 178000))
    (semanticdb-table "inversion.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("inversion-version" variable (:default-value "1.3") nil [2257 2323])
            ("inversion-incompatible-version" variable (:default-value "0.1alpha1") nil [2325 2440])
            ("inversion-decoders" variable
               (:constant-flag t
                :default-value (quote ((alpha "^\\([0-9]+\\)\\.\\([0-9]+\\)\\.?\\([0-9]*\\)?\\s-*\\.?alpha\\([0-9]+\\)?$" 4) (beta "^\\([0-9]+\\)\\.\\([0-9]+\\)\\.?\\([0-9]*\\)?\\s-*\\.?beta\\([0-9]+\\)?$" 4) (beta "^\\([0-9]+\\)\\.\\([0-9]+\\)\\.?\\([0-9]*\\)?\\s-*\\.?(beta\\([0-9]+\\)?)$" 4) (beta "^[^/]+/\\w+--\\w+--\\([0-9]+\\)\\.\\([0-9]+\\)\\.\\([0-9]+\\)--patch-\\([0-9]+\\)" 4) (beta "^\\w+: v\\([0-9]+\\)\\.\\([0-9]+\\)\\.\\([0-9]+\\)-\\([0-9]+\\)-\\(.*\\)" 5) (prerelease "^\\([0-9]+\\)\\.\\([0-9]+\\)\\s-*\\.?pre\\([0-9]+\\)?$" 3) (full "^\\([0-9]+\\)\\.\\([0-9]+\\)\\.?\\([0-9]+\\)?$" 3) (fullsingle "^\\([0-9]+\\)$" 1) (patch "^\\([0-9]+\\)\\.\\([0-9]+\\)\\.?\\([0-9]+\\)?\\s-*(patch \\([0-9]+\\))" 4) (point "^\\([0-9]+\\)\\.\\([0-9]+\\)\\.\\([0-9]+\\)$" 3) (point "^\\w+: v\\([0-9]+\\)\\.\\([0-9]+\\)\\.\\([0-9]+\\)-\\(0\\)-\\(.*\\)" 5) (build "^\\([0-9]+\\)\\.\\([0-9]+\\)\\.\\([0-9]+\\).\\([0-9]+\\)$" 4) (full "^[^/]+/\\w+--\\w+--\\([0-9]+\\)\\.\\([0-9]+\\)\\.\\([0-9]+\\)--version-\\([0-9]+\\)" 4) (full "^\\w+: v\\([0-9]+\\)\\.\\([0-9]+\\)\\.\\([0-9]+\\)" 5))))
                nil [2442 3978])
            ("inversion-decode-version" function (:arguments ("version-string")) nil [4004 4792])
            ("inversion-package-version" function (:arguments ("package")) nil [4794 5256])
            ("inversion-package-incompatibility-version" function (:arguments ("package")) nil [5258 5757])
            ("inversion-recode" function (:arguments ("code")) nil [5759 6100])
            ("inversion-release-to-number" function (:arguments ("release-symbol")) nil [6102 6342])
            ("inversion-=" function (:arguments ("ver1" "ver2")) nil [6344 6440])
            ("inversion-<" function (:arguments ("ver1" "ver2")) nil [6442 7276])
            ("inversion-check-version" function (:arguments ("version" "incompatible-version" "minimum" "reserved")) nil [7278 8718])
            ("inversion-test" function (:arguments ("package" "minimum" "reserved")) nil [8720 9937])
            ("inversion-reverse-test" function (:arguments ("package" "oldversion" "reserved")) nil [9939 11350])
            ("inversion-require" function (:arguments ("package" "version" "file" "directory" "reserved")) nil [11352 12113])
            ("inversion-require-emacs" function (:arguments ("emacs-ver" "xemacs-ver" "sxemacs-ver")) nil [12130 12559])
            ("inversion-find-data" variable
               (:constant-flag t
                :default-value (quote ("(def\\(var\\|const\\)\\s-+%s-%s\\s-+\"\\([^\"]+\\)" 2)))
                nil [12561 12713])
            ("inversion-find-version" function (:arguments ("package")) nil [12715 13992])
            ("inversion-add-to-load-path" function (:arguments ("package" "minimum" "installdir" "subdirs")) nil [13994 15954])
            ("inversion-locate-package-files" function (:arguments ("package" "directory" "version")) nil [15988 16701])
            ("inversion-package-common-tails" variable (:default-value (quote (".tar.gz" ".tar" ".zip" ".gz"))) nil [16703 16861])
            ("inversion-locate-package-files-and-split" function (:arguments ("package" "directory" "version")) nil [16863 17922])
            ("inversion-download-package-ask" function (:arguments ("err" "package" "directory" "version")) nil [17924 18772])
            ("inversion" package nil nil [19662 19682]))          
      :file "inversion.el"
      :pointmax 19711
      :fsize 19710
      :lastmodtime '(22436 31432 254422 178000)
      :unmatched-syntax nil)
    (semanticdb-table "data-debug.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("font-lock" include nil nil [1558 1578])
            ("ring" include nil nil [1579 1594])
            ("if" code nil nil [1628 2253])
            ("data-debug-insert-property-list" function (:arguments ("proplist" "prefix" "parent")) nil [2276 2691])
            ("data-debug-insert-overlay-props" function (:arguments ("overlay" "prefix")) nil [2709 3054])
            ("data-debug-insert-overlay-from-point" function (:arguments ("point")) nil [3056 3477])
            ("data-debug-insert-overlay-button" function (:arguments ("overlay" "prefix" "prebuttontext")) nil [3479 4263])
            ("data-debug-insert-overlay-list" function (:arguments ("overlaylist" "prefix")) nil [4285 4594])
            ("data-debug-insert-overlay-list-from-point" function (:arguments ("point")) nil [4596 5032])
            ("data-debug-insert-overlay-list-button" function (:arguments ("overlaylist" "prefix" "prebuttontext")) nil [5034 5905])
            ("data-debug-insert-buffer-props" function (:arguments ("buffer" "prefix")) nil [5922 6491])
            ("data-debug-insert-buffer-from-point" function (:arguments ("point")) nil [6493 6908])
            ("data-debug-insert-buffer-button" function (:arguments ("buffer" "prefix" "prebuttontext")) nil [6910 7687])
            ("data-debug-insert-buffer-list" function (:arguments ("bufferlist" "prefix")) nil [7708 8009])
            ("data-debug-insert-buffer-list-from-point" function (:arguments ("point")) nil [8011 8441])
            ("data-debug-insert-buffer-list-button" function (:arguments ("bufferlist" "prefix" "prebuttontext")) nil [8443 9306])
            ("data-debug-insert-process-props" function (:arguments ("process" "prefix")) nil [9325 9863])
            ("data-debug-insert-process-from-point" function (:arguments ("point")) nil [9865 10286])
            ("data-debug-insert-process-button" function (:arguments ("process" "prefix" "prebuttontext")) nil [10288 11102])
            ("data-debug-insert-ring-contents" function (:arguments ("ring" "prefix")) nil [11158 11469])
            ("data-debug-insert-ring-items-from-point" function (:arguments ("point")) nil [11471 11883])
            ("data-debug-insert-ring-button" function (:arguments ("ring" "prefix" "prebuttontext")) nil [11885 12905])
            ("data-debug-insert-hash-table" function (:arguments ("hash-table" "prefix")) nil [12928 13324])
            ("data-debug-insert-hash-table-from-point" function (:arguments ("point")) nil [13326 13742])
            ("data-debug-insert-hash-table-button" function (:arguments ("hash-table" "prefix" "prebuttontext")) nil [13744 14669])
            ("data-debug-insert-widget-properties" function (:arguments ("widget" "prefix")) nil [14727 15147])
            ("data-debug-insert-widget-from-point" function (:arguments ("point")) nil [15149 15547])
            ("data-debug-insert-widget" function (:arguments ("widget" "prefix" "prebuttontext")) nil [15549 16286])
            ("data-debug-insert-stuff-list" function (:arguments ("stufflist" "prefix")) nil [16347 16754])
            ("data-debug-insert-stuff-list-from-point" function (:arguments ("point")) nil [16756 17176])
            ("data-debug-insert-stuff-list-button" function (:arguments ("stufflist" "prefix" "prebuttontext")) nil [17178 18205])
            ("data-debug-insert-stuff-vector" function (:arguments ("stuffvector" "prefix")) nil [18270 18650])
            ("data-debug-insert-stuff-vector-from-point" function (:arguments ("point")) nil [18652 19082])
            ("data-debug-insert-stuff-vector-button" function (:arguments ("stuffvector" "prefix" "prebuttontext")) nil [19084 19965])
            ("data-debug-insert-symbol-from-point" function (:arguments ("point")) nil [19982 20659])
            ("data-debug-insert-symbol-button" function (:arguments ("symbol" "prefix" "prebuttontext")) nil [20661 21455])
            ("data-debug-insert-string" function (:arguments ("thing" "prefix" "prebuttontext")) nil [21468 22065])
            ("data-debug-insert-number" function (:arguments ("thing" "prefix" "prebuttontext")) nil [22078 22455])
            ("data-debug-insert-lambda-expression" function (:arguments ("thing" "prefix" "prebuttontext")) nil [22479 22901])
            ("data-debug-insert-nil" function (:arguments ("thing" "prefix" "prebuttontext")) nil [22917 23364])
            ("data-debug-insert-simple-thing" function (:arguments ("thing" "prefix" "prebuttontext" "face")) nil [23383 23817])
            ("data-debug-insert-custom" function (:arguments ("thingstring" "prefix" "prebuttontext" "face")) nil [23836 24316])
            ("data-debug-thing-alist" variable (:default-value (quote ((null . data-debug-insert-nil) (data-debug-overlay-p . data-debug-insert-overlay-button) ((lambda (thing) (and (consp thing) (data-debug-overlay-p (car thing)))) . data-debug-insert-overlay-list-button) (bufferp . data-debug-insert-buffer-button) ((lambda (thing) (and (consp thing) (bufferp (car thing)))) . data-debug-insert-buffer-list-button) (processp . data-debug-insert-process-button) (stringp . data-debug-insert-string) (numberp . data-debug-insert-number) (symbolp . data-debug-insert-symbol-button) (ring-p . data-debug-insert-ring-button) ((lambda (thing) (and (consp thing) (eq (car thing) (quote lambda)))) . data-debug-insert-lambda-expression) (hash-table-p . data-debug-insert-hash-table-button) (widgetp . data-debug-insert-widget) (listp . data-debug-insert-stuff-list-button) (vectorp . data-debug-insert-stuff-vector-button)))) nil [24319 25606])
            ("data-debug-add-specialized-thing" function (:arguments ("predicate" "fcn")) nil [25657 26282])
            ("data-debug-insert-thing" function (:arguments ("thing" "prefix" "prebuttontext" "parent")) nil [26306 27328])
            ("data-debug" customgroup (:user-visible-flag t) nil [27449 27517])
            ("data-debug-mode-syntax-table" variable (:default-value (let ((table (make-syntax-table (standard-syntax-table)))) (modify-syntax-entry 59 ". 12" table) (modify-syntax-entry 10 ">" table) (modify-syntax-entry 34 "\"" table) (modify-syntax-entry 45 "_" table) (modify-syntax-entry 92 "\\" table) (modify-syntax-entry 96 "'" table) (modify-syntax-entry 39 "'" table) (modify-syntax-entry 44 "'" table) table)) nil [27519 28166])
            ("define-obsolete-variable-alias" code nil nil [28168 28244])
            ("data-debug-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (suppress-keymap km) (define-key km [mouse-2] (quote data-debug-expand-or-contract-mouse)) (define-key km " " (quote data-debug-expand-or-contract)) (define-key km "" (quote data-debug-expand-or-contract)) (define-key km "n" (quote data-debug-next)) (define-key km "p" (quote data-debug-prev)) (define-key km "N" (quote data-debug-next-expando)) (define-key km "P" (quote data-debug-prev-expando)) km)) nil [28245 28732])
            ("data-debug-mode-hook" variable nil nil [28734 28842])
            ("define-derived-mode" code nil nil [28844 29237])
            ("data-debug-new-buffer" function (:arguments ("name")) nil [29254 29515])
            ("data-debug-next" function (:user-visible-flag t) nil [29545 29722])
            ("data-debug-prev" function (:user-visible-flag t) nil [29724 29906])
            ("data-debug-next-expando" function (:user-visible-flag t) nil [29908 30167])
            ("data-debug-prev-expando" function (:user-visible-flag t) nil [30169 30432])
            ("data-debug-current-line-expanded-p" function nil nil [30434 30710])
            ("data-debug-line-expandable-p" function nil nil [30712 30924])
            ("data-debug-expand-current-line" function nil nil [30926 31357])
            ("data-debug-contract-current-line" function nil nil [31359 32200])
            ("data-debug-expand-or-contract" function (:user-visible-flag t) nil [32202 32523])
            ("data-debug-expand-or-contract-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [32525 32846])
            ("data-debug-show-stuff" function (:arguments ("stuff" "name")) nil [32878 33173])
            ("data-debug-edebug-expr" function
               (:user-visible-flag t
                :arguments ("expr"))
                nil [33258 33663])
            ("data-debug-eval-expression" function
               (:user-visible-flag t
                :arguments ("expr"))
                nil [33665 34883])
            ("data-debug" package nil nil [34885 34906])
            ("eval-after-load" code nil nil [34932 34987])
            ("eval-after-load" code nil nil [35016 35074]))          
      :file "data-debug.el"
      :pointmax 35105
      :fsize 35104
      :lastmodtime '(22436 31432 246422 178000)
      :unmatched-syntax nil)
    (semanticdb-table "loaddefs.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cedet-android-create-project" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [212 649])
            ("cedet-android-target-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [651 783])
            ("cedet-android-layoutopt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [785 1003])
            ("cedet-android-start-ddms" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1005 1112])
            ("cedet-android-adb-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1114 1216])
            ("cedet-android-adb-devices" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1218 1348])
            ("cedet-android-adb-version-check" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1350 1631])
            ("cedet-android-adb-shell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1633 1752])
            ("cedet-android-sdk-update-classpath" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1754 1918])
            ("add-hook" code nil nil [2067 2255])
            ("add-hook" code nil nil [2257 2383])
            ("cedet-gnu-global-version-check" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [2532 2806])
            ("cedet-graphviz-dot-command" variable (:default-value "dot") nil [2961 3052])
            ("custom-autoload" code nil nil [3054 3118])
            ("cedet-graphviz-neato-command" variable (:default-value "neato") nil [3120 3217])
            ("custom-autoload" code nil nil [3219 3285])
            ("cedet-graphviz-dot-version-check" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [3287 3571])
            ("cedet-java-version-check" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [3714 3978])
            ("cedet-javap-dump-class" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [3980 4122])
            ("cedet-m3-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [4259 4514])
            ("global-cedet-m3-minor-mode" variable nil nil [4516 4857])
            ("custom-autoload" code nil nil [4859 4919])
            ("global-cedet-m3-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [4921 5127])
            ("eieio-defclass-autoload" code nil nil [5247 5465])
            ("eieio-defclass-autoload" code nil nil [5467 5671])
            ("eieio-defclass-autoload" code nil nil [5673 5862])
            ("eieio-defclass-autoload" code nil nil [5864 6186])
            ("eieio-defclass-autoload" code nil nil [6188 6287])
            ("cogre" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [6289 6541])
            ("data-debug-new-buffer" function (:prototype-flag t) nil [6684 6796])
            ("global-ede-mode" variable nil nil [6910 7207])
            ("custom-autoload" code nil nil [7209 7253])
            ("global-ede-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [7255 7630])
            ("define-fame-channel" function (:prototype-flag t) nil [7747 8408])
            ("inversion-require-emacs" function (:prototype-flag t) nil [8548 8773])
            ("put" code nil nil [8916 8969])
            ("pprint-to-string" function (:prototype-flag t) nil [9092 9508])
            ("pprint" function (:prototype-flag t) nil [9510 9960])
            ("pprint-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [9962 10083])
            ("semantic-default-submodes" variable (:default-value (quote (global-semantic-idle-scheduler-mode global-semanticdb-minor-mode))) nil [10220 11769])
            ("custom-autoload" code nil nil [11771 11828])
            ("semantic-mode" variable nil nil [11830 12119])
            ("custom-autoload" code nil nil [12121 12168])
            ("semantic-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [12170 12731])
            ("loaddefs" package nil nil [12945 12964]))          
      :file "loaddefs.el"
      :pointmax 13110
      :fsize 13109
      :lastmodtime '(22436 31442 614422 434000)
      :unmatched-syntax nil)
    (semanticdb-table "cogre.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cogre-version" variable (:default-value "1.2") nil [240 298])
            ("cl" include nil nil [1311 1324])
            ("eieio" include nil nil [1327 1343])
            ("eieio-opt" include nil nil [1344 1364])
            ("eieio-base" include nil nil [1365 1386])
            ("eieio-custom" include nil nil [1387 1410])
            ("semantic" include nil nil [1411 1430])
            ("cogre/picture-hack" include nil nil [1431 1460])
            ("declare-function" code nil nil [1462 1504])
            ("cogre" customgroup (:user-visible-flag t) nil [1535 1599])
            ("cogre-horizontal-margins" variable
               (:user-visible-flag t
                :default-value 10)
                nil [1601 1741])
            ("cogre-vertical-margins" variable
               (:user-visible-flag t
                :default-value 7)
                nil [1743 1880])
            ("cogre-node-rebuild-method" variable nil nil [1902 2003])
            ("cogre-noninteractive" function nil nil [2022 2170])
            ("cogre-element-peer" type (:type "class") nil [2710 3101])
            ("cogre-peer-update-from-source" function
               (:parent "cogre-element-peer"
                :arguments ("peer" "element"))
                nil [3103 3244])
            ("cogre-peer-update-from-element" function
               (:parent "cogre-element-peer"
                :arguments ("peer" "element"))
                nil [3246 3407])
            ("cogre-peer-source-file" function
               (:parent "cogre-element-peer"
                :arguments ("peer"))
                nil [3409 3516])
            ("cogre-graph-element" type
               (:superclasses "eieio-named"
                :members 
                  ( ("dirty" variable
                       (:documentation "Non-nil if this graph element is dirty.
Elements are made dirty when they are erased from the screen.
Elements must be erased before any graphical fields are changed."
                        :default-value "t")
                        nil nil)
                    ("name-default" variable
                       (:documentation "The object-name of this node.
Node object-names must be unique within the current graph so that save
references in links can be restored."
                        :static-flag t
                        :default-value "Name"
                        :type "string")
                        nil nil)
                    ("peer" variable
                       (:documentation "The peer for this graph."
                        :default-value "nil"
                        :type "(or null cogre-element-peer)")
                        nil nil))                  
                :type "class")
                nil [3554 4357])
            ("cogre-base-graph" type
               (:superclasses "eieio-persistent"
                :members 
                  ( ("extension" variable (:default-value ".cgr") nil nil)
                    ("name" variable
                       (:documentation "The name of this graph.
The save file name is based on this name."
                        :default-value "NewGraph"
                        :type "string")
                        nil nil)
                    ("buffer" variable
                       (:documentation "When this graph is active, this is the buffer the graph is
displayed in."
                        :default-value "nil"
                        :type "(or null buffer)")
                        nil nil)
                    ("peer" variable
                       (:documentation "The peer for this graph."
                        :default-value "nil"
                        :type "(or null cogre-element-peer)")
                        nil nil)
                    ("major-mode" variable
                       (:documentation "Mode used for any mode-specific function calls.
Used when calling some mode-local functions."
                        :default-value "fundamental-mode"
                        :type "symbol")
                        nil nil)
                    ("detail" variable
                       (:documentation "A flag for items being rendered on how much detail to show.
A 0 means to show everything.
A 1 means to show a little bit less.
A 2 means to show less than that.
A 3 means just the package and name."
                        :default-value "0"
                        :type "number")
                        nil nil)
                    ("elements" variable
                       (:documentation "The list of elements in this graph."
                        :default-value "nil"
                        :type "cogre-graph-element-list")
                        nil nil))                  
                :type "class")
                nil [4374 6087])
            ("initialize-instance" function
               (:parent "cogre-base-graph"
                :arguments ("G" "fields"))
                nil [6089 6275])
            ("cogre-position-p" function (:arguments ("posvector")) nil [6385 6620])
            ("cogre-node" type
               (:superclasses "cogre-graph-element"
                :members 
                  ( ("position" variable
                       (:documentation "The X,Y [COL ROW] position as a vector for this node.
The Width/Height if this node is determined by RECTANGLE, which is
a list of strings representing the body of the node."
                        :type "cogre-position")
                        nil nil)
                    ("blank-lines-top" variable
                       (:documentation "Number of blank lines above the object-name."
                        :static-flag t
                        :default-value "1")
                        nil nil)
                    ("blank-lines-bottom" variable
                       (:documentation "Number of blank lines below the last line of text."
                        :static-flag t
                        :default-value "1")
                        nil nil)
                    ("alignment" variable
                       (:documentation "Alignment of text when displayed in the box."
                        :static-flag t
                        :default-value "nil"
                        :type "symbol")
                        nil nil)
                    ("rectangle" variable
                       (:documentation "A List of strings representing an Emacs rectangle.
This rectangle is used for inserting and moving the block of
characters that represent this node in a buffer.
The rectangle is NOT SAVED.
Other fields in the node are used to build a new RECTANGLE of strings
at load time."
                        :default-value "nil"
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [6639 7928])
            ("cogre-link" type
               (:superclasses "cogre-graph-element"
                :members 
                  ( ("start" variable
                       (:documentation "The starting node.
As a string, the object-name of the node we start on.
As an object, the node we start on."
                        :default-value "nil"
                        :type "(or null string cogre-node)")
                        nil nil)
                    ("end" variable
                       (:documentation "The ending node.
As a string, the object-name of the node we end on.
As an object, the node we end on."
                        :default-value "nil"
                        :type "(or null string cogre-node)")
                        nil nil)
                    ("start-glyph" variable
                       (:documentation "The starting glyph.
A Glyph can be NULL, meaning nothing, or a vector.
A Vector must be 4 elements long.  This represents glyphs on
the [ TOP BOTTOM LEFT RIGHT ] of the attached node.
Each element of the vector must be a list representing a rectangle."
                        :static-flag t
                        :type "vector")
                        nil nil)
                    ("end-glyph" variable
                       (:documentation "The ending glyph.
See slot `start-glyph'"
                        :static-flag t
                        :type "vector")
                        nil nil)
                    ("horizontal-preference-ratio" variable
                       (:documentation "When choosing a link's direction, a weight applied to horizontal.
Since characters are not square, this ratio attempts to handle the visible
space the link spans, not the number of characters in the coordinate
system being used.
Also, some links may want to be vertical or horizontal as often as
possible, thus values of 0 or 10 are also fine to advance a
preference."
                        :static-flag t
                        :default-value "0.5")
                        nil nil)
                    ("stop-position" variable
                       (:documentation "After drawing this link, store a place for a tab stop."
                        :default-value "nil")
                        nil nil)
                    ("layout-direction" variable
                       (:documentation "When using the layout engine, the preferred direction this link points.
This can have a value of 'up, 'down, 'left, 'right, 'horizontal,
'vertical, or 'any."
                        :default-value "(quote any)")
                        nil nil))                  
                :type "class")
                nil [7945 9963])
            ("cogre-arrow" type
               (:superclasses "cogre-link"
                :members 
                  ( ("end-glyph" variable nil nil nil))                  
                :type "class")
                nil [9993 10160])
            ("cogre-loading-from-file" variable nil nil [10194 10291])
            ("cogre-mode-hooks" variable nil nil [10293 10386])
            ("cogre-graph" variable nil nil [10388 10445])
            ("make-variable-buffer-local" code nil nil [10446 10487])
            ("cogre" function
               (:user-visible-flag t
                :arguments ("name" "graph-class"))
                nil [10533 11069])
            ("cogre-last-event-element-type" function (:arguments ("class")) nil [11321 11835])
            ("cogre-node-history" variable nil nil [11837 11917])
            ("cogre-default-node" variable nil nil [11919 12081])
            ("cogre-default-node" function
               (:user-visible-flag t
                :arguments ("node" "prefix"))
                nil [12083 13445])
            ("cogre-link-history" variable nil nil [13447 13527])
            ("cogre-default-link" variable nil nil [13529 13691])
            ("cogre-default-link" function
               (:user-visible-flag t
                :arguments ("link" "prefix"))
                nil [13693 14970])
            ("cogre-refresh" function (:user-visible-flag t) nil [15003 15125])
            ("cogre-map-elements" function (:arguments ("function" "graph")) nil [15144 15349])
            ("cogre-map-graph-elements" function (:arguments ("graph" "function")) nil [15351 15635])
            ("cogre-update-graph-from-peers" function (:arguments ("graph")) nil [15658 16065])
            ("cogre-custom-originating-graph-buffer" variable nil nil [16091 16194])
            ("make-variable-buffer-local" code nil nil [16195 16262])
            ("cogre-activate" function
               (:parent "cogre-graph-element"
                :arguments ("element"))
                nil [16264 16574])
            ("eieio-done-customizing" function
               (:parent "cogre-graph-element"
                :arguments ("element"))
                nil [16576 16817])
            ("eieio-done-customizing" function
               (:parent "cogre-base-graph"
                :arguments ("g"))
                nil [16819 17011])
            ("cogre-augment-element-menu" function
               (:parent "cogre-graph-element"
                :arguments ("node" "menu"))
                nil [17013 17168])
            ("cogre-augment-element-menu" function
               (:parent "cogre-node"
                :arguments ("node" "menu"))
                nil [17170 17314])
            ("cogre-add-element" function
               (:parent "cogre-base-graph"
                :arguments ("graph" "elt"))
                nil [17316 17457])
            ("cogre-delete-element" function
               (:parent "cogre-base-graph"
                :arguments ("graph" "elt"))
                nil [17459 17609])
            ("cogre-find-node-by-name" function (:arguments ("name" "graph")) nil [17611 17819])
            ("cogre-unique-name" function
               (:parent "cogre-base-graph"
                :arguments ("graph" "name"))
                nil [17821 18162])
            ("cogre-set-dirty" function
               (:parent "cogre-graph-element"
                :arguments ("element" "dirty-state"))
                nil [18164 18322])
            ("cogre-set-dirty" function
               (:parent "cogre-node"
                :arguments ("node" "dirty-state"))
                nil [18324 18498])
            ("initialize-instance" function
               (:parent "cogre-graph-element"
                :arguments ("elt" "fields"))
                nil [18500 18771])
            ("initialize-instance" function
               (:parent "cogre-graph-element"
                :arguments ("elt" "fields"))
                nil [18773 19196])
            ("cogre-render-buffer" function
               (:parent "cogre-base-graph"
                :arguments ("graph" "erase"))
                nil [19222 19945])
            ("cogre-render" function
               (:parent "cogre-graph-element"
                :arguments ("element"))
                nil [19947 20173])
            ("cogre-erase" function
               (:parent "cogre-graph-element"
                :arguments ("element"))
                nil [20175 20397])
            ("cogre-element-pre-serialize" function
               (:parent "cogre-graph-element"
                :arguments ("elt"))
                nil [20399 20603])
            ("cogre-element-post-serialize" function
               (:parent "cogre-graph-element"
                :arguments ("elt"))
                nil [20605 20832])
            ("cogre-entered" function
               (:parent "cogre-graph-element"
                :arguments ("element" "start" "end"))
                nil [20834 21007])
            ("cogre-left" function
               (:parent "cogre-graph-element"
                :arguments ("element" "start" "end"))
                nil [21009 21178])
            ("cogre-erase" function
               (:parent "cogre-node"
                :arguments ("node"))
                nil [21190 21552])
            ("cogre-node-links" function
               (:parent "cogre-node"
                :arguments ("node"))
                nil [21554 21908])
            ("cogre-node-rectangle" function
               (:parent "cogre-node"
                :arguments ("node"))
                nil [21910 22073])
            ("cogre-render" function
               (:parent "cogre-node"
                :arguments ("node"))
                nil [22075 22367])
            ("cogre-node-rebuild" function
               (:parent "cogre-node"
                :arguments ("node"))
                nil [22369 22960])
            ("cogre-node-rebuild-default" function
               (:parent "cogre-node"
                :arguments ("node"))
                nil [22962 25019])
            ("cogre-move-delta" function
               (:parent "cogre-node"
                :arguments ("node" "dx" "dy"))
                nil [25021 25204])
            ("cogre-move" function
               (:parent "cogre-node"
                :arguments ("node" "x" "y"))
                nil [25206 25375])
            ("cogre-node-title" function
               (:parent "cogre-node"
                :arguments ("node"))
                nil [25377 25578])
            ("cogre-node-slots" function
               (:parent "cogre-node"
                :arguments ("node"))
                nil [25580 25795])
            ("cogre-node-widest-string" function
               (:parent "cogre-node"
                :arguments ("node"))
                nil [25797 26311])
            ("cogre-node-horizontal-distance" function (:arguments ("node1" "node2")) nil [26318 26963])
            ("cogre-node-vertical-distance" function (:arguments ("node1" "node2")) nil [26965 27594])
            ("cogre-choose-horizontal-link-anchors" function (:arguments ("node1" "node2")) nil [27596 28288])
            ("cogre-choose-vertical-link-anchors" function (:arguments ("node1" "node2")) nil [28290 28980])
            ("cogre-element-pre-serialize" function
               (:parent "cogre-link"
                :arguments ("link"))
                nil [28995 29430])
            ("cogre-element-post-serialize" function
               (:parent "cogre-link"
                :arguments ("link"))
                nil [29432 29977])
            ("cogre-erase-mode" variable nil nil [29979 30074])
            ("cogre-erase" function
               (:parent "cogre-link"
                :arguments ("link"))
                nil [30076 30581])
            ("cogre-render" function
               (:parent "cogre-link"
                :arguments ("link"))
                nil [30583 33103])
            ("cogre-save" function
               (:parent "cogre-base-graph"
                :arguments ("graph"))
                nil [33154 33409])
            ("cogre-write-save-text" function
               (:parent "cogre-base-graph"
                :arguments ("graph"))
                nil [33411 33725])
            ("cogre-string-merge-faces" function (:arguments ("start" "end" "face" "string")) nil [33765 34325])
            ("cogre-string-with-face" function (:arguments ("string" "face" "element" "length" "align")) nil [34327 36277])
            ("cogre-erase-rectangle" function (:arguments ("x" "y" "width" "height")) nil [36279 36566])
            ("cogre-current-element" function (:arguments ("point")) nil [36568 36701])
            ("cogre-current-line" function nil nil [36703 36842])
            ("cogre" package nil nil [36844 36860]))          
      :file "cogre.el"
      :pointmax 36885
      :fsize 36884
      :lastmodtime '(22436 31432 246422 178000)
      :unmatched-syntax '((close-paren 6621 . 6622) (symbol 6368 . 6384) (open-paren 6367 . 6368) (close-paren 1324 . 1325) (symbol 1293 . 1310) (open-paren 1292 . 1293)))
    (semanticdb-table "cedet-graphviz.el"
      :file "cedet-graphviz.el"
      :fsize 3836
      :lastmodtime '(22436 31432 246422 178000))
    (semanticdb-table "pulse.el"
      :file "pulse.el"
      :fsize 9201
      :lastmodtime '(22436 31432 254422 178000))
    (semanticdb-table "cedet-global.el"
      :file "cedet-global.el"
      :fsize 6348
      :lastmodtime '(22436 31432 246422 178000))
    (semanticdb-table "cedet-java.el"
      :file "cedet-java.el"
      :fsize 11090
      :lastmodtime '(22436 31432 246422 178000)))
  :file "!home!lyra!.emacs.d!cedet!lisp!cedet!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
