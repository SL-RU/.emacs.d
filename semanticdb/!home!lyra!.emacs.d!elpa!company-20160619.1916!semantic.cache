;; Object company-20160619.1916/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "company-20160619.1916/"
  :tables
  (list
    (semanticdb-table "company.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [2392 2409])
            ("newcomment" include nil nil [2410 2431])
            ("pcase" include nil nil [2432 2448])
            ("add-to-list" code nil nil [2478 2550])
            ("add-to-list" code nil nil [2551 2621])
            ("add-to-list" code nil nil [2622 2700])
            ("add-to-list" code nil nil [2701 2752])
            ("add-to-list" code nil nil [2753 2812])
            ("add-to-list" code nil nil [2813 2877])
            ("add-to-list" code nil nil [2878 2934])
            ("unless" code nil nil [3019 3429])
            ("company" customgroup (:user-visible-flag t) nil [3432 3560])
            ("company-tooltip" variable
               (:default-value (quote ((default :foreground "black") (((class color) (min-colors 88) (background light)) (:background "cornsilk")) (((class color) (min-colors 88) (background dark)) (:background "yellow"))))
                :type "face")
                nil [3562 3824])
            ("company-tooltip-selection" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:background "light blue")) (((class color) (min-colors 88) (background dark)) (:background "orange1")) (t (:background "green"))))
                :type "face")
                nil [3826 4114])
            ("company-tooltip-search" variable
               (:default-value (quote ((default :inherit company-tooltip-selection)))
                :type "face")
                nil [4116 4250])
            ("company-tooltip-mouse" variable
               (:default-value (quote ((default :inherit highlight)))
                :type "face")
                nil [4252 4369])
            ("company-tooltip-common" variable
               (:default-value (quote ((((background light)) :foreground "darkred") (((background dark)) :foreground "red")))
                :type "face")
                nil [4371 4563])
            ("company-tooltip-common-selection" variable
               (:default-value (quote ((default :inherit company-tooltip-common)))
                :type "face")
                nil [4565 4719])
            ("company-tooltip-annotation" variable
               (:default-value (quote ((((background light)) :foreground "firebrick4") (((background dark)) :foreground "red4")))
                :type "face")
                nil [4721 4925])
            ("company-tooltip-annotation-selection" variable
               (:default-value (quote ((default :inherit company-tooltip-annotation)))
                :type "face")
                nil [4927 5093])
            ("company-scrollbar-fg" variable
               (:default-value (quote ((((background light)) :background "darkred") (((background dark)) :background "red")))
                :type "face")
                nil [5095 5276])
            ("company-scrollbar-bg" variable
               (:default-value (quote ((((background light)) :background "wheat") (((background dark)) :background "gold")))
                :type "face")
                nil [5278 5463])
            ("company-preview" variable
               (:default-value (quote ((((background light)) :inherit (company-tooltip-selection company-tooltip)) (((background dark)) :background "blue4" :foreground "wheat")))
                :type "face")
                nil [5465 5694])
            ("company-preview-common" variable
               (:default-value (quote ((((background light)) :inherit company-tooltip-common-selection) (((background dark)) :inherit company-preview :foreground "red")))
                :type "face")
                nil [5696 5943])
            ("company-preview-search" variable
               (:default-value (quote ((((background light)) :inherit company-tooltip-common-selection) (((background dark)) :inherit company-preview :background "blue1")))
                :type "face")
                nil [5945 6196])
            ("company-echo" variable (:type "face") nil [6198 6272])
            ("company-echo-common" variable
               (:default-value (quote ((((background dark)) (:foreground "firebrick1")) (((background light)) (:background "firebrick4"))))
                :type "face")
                nil [6274 6478])
            ("company-frontends-set" function (:arguments ("variable" "value")) nil [6480 7676])
            ("company-frontends" variable (:default-value (quote (company-pseudo-tooltip-unless-just-one-frontend company-preview-if-just-one-frontend company-echo-metadata-frontend))) nil [7678 9573])
            ("company-tooltip-limit" variable (:default-value 10) nil [9575 9681])
            ("company-tooltip-minimum" variable (:default-value 6) nil [9683 9851])
            ("company-tooltip-minimum-width" variable nil nil [9853 10057])
            ("company-tooltip-margin" variable (:default-value 1) nil [10059 10167])
            ("company-tooltip-offset-display" variable (:default-value (quote scrollbar)) nil [10169 10523])
            ("company-tooltip-align-annotations" variable nil nil [10525 10696])
            ("company-tooltip-flip-when-above" variable nil nil [10698 10868])
            ("company-safe-backends" variable (:default-value (quote ((company-abbrev . "Abbrev") (company-bbdb . "BBDB") (company-capf . "completion-at-point-functions") (company-clang . "Clang") (company-cmake . "CMake") (company-css . "CSS") (company-dabbrev . "dabbrev for plain text") (company-dabbrev-code . "dabbrev for code") (company-eclim . "Eclim (an Eclipse interface)") (company-elisp . "Emacs Lisp") (company-etags . "etags") (company-files . "Files") (company-gtags . "GNU Global") (company-ispell . "Ispell") (company-keywords . "Programming language keywords") (company-nxml . "nxml") (company-oddmuse . "Oddmuse") (company-semantic . "Semantic") (company-tempo . "Tempo templates") (company-xcode . "Xcode")))) nil [10870 11637])
            ("put" code nil nil [11638 11690])
            ("company-safe-backends-p" function (:arguments ("backends")) nil [11692 11998])
            ("company-backends" variable (:default-value (\` ((\,@ (unless (version< "24.3.51" emacs-version) (list (quote company-elisp)))) company-bbdb company-nxml company-css company-eclim company-semantic company-clang company-xcode company-cmake company-capf company-files (company-dabbrev-code company-gtags company-etags company-keywords) company-oddmuse company-dabbrev))) nil [12000 18895])
            ("put" code nil nil [18897 18966])
            ("company-transformers" variable nil nil [18968 19625])
            ("company-completion-started-hook" variable nil nil [19627 19826])
            ("company-completion-cancelled-hook" variable nil nil [19828 20030])
            ("company-completion-finished-hook" variable nil nil [20032 20338])
            ("company-minimum-prefix-length" variable (:default-value 3) nil [20340 20474])
            ("company-abort-manual-when-too-short" variable nil nil [20476 20758])
            ("company-require-match" variable (:default-value (quote company-explicit-action-p)) nil [20760 21320])
            ("company-auto-complete" variable nil nil [21322 21802])
            ("company-auto-complete-chars" variable (:default-value (quote (32 41 46))) nil [21804 23293])
            ("company-idle-delay" variable (:default-value 0.5) nil [23295 23664])
            ("company-tooltip-idle-delay" variable (:default-value 0.5) nil [23666 23971])
            ("company-begin-commands" variable (:default-value (quote (self-insert-command org-self-insert-command orgtbl-self-insert-command c-scope-operator c-electric-colon c-electric-lt-gt c-electric-slash))) nil [23973 24868])
            ("company-continue-commands" variable (:default-value (quote (not save-buffer save-some-buffers save-buffers-kill-terminal save-buffers-kill-emacs))) nil [24870 25722])
            ("company-show-numbers" variable nil nil [25724 25910])
            ("company-selection-wrap-around" variable nil nil [25912 26107])
            ("company-async-wait" variable (:default-value 0.03) nil [26109 26249])
            ("company-async-timeout" variable (:default-value 2) nil [26251 26353])
            ("company-mode-map" variable (:default-value (make-sparse-keymap)) nil [26437 26518])
            ("company-active-map" variable (:default-value (let ((keymap (make-sparse-keymap))) (define-key keymap "" (quote company-abort)) (define-key keymap "" (quote company-abort)) (define-key keymap (kbd "M-n") (quote company-select-next)) (define-key keymap (kbd "M-p") (quote company-select-previous)) (define-key keymap (kbd "<down>") (quote company-select-next-or-abort)) (define-key keymap (kbd "<up>") (quote company-select-previous-or-abort)) (define-key keymap [remap scroll-up-command] (quote company-next-page)) (define-key keymap [remap scroll-down-command] (quote company-previous-page)) (define-key keymap [down-mouse-1] (quote ignore)) (define-key keymap [down-mouse-3] (quote ignore)) (define-key keymap [mouse-1] (quote company-complete-mouse)) (define-key keymap [mouse-3] (quote company-select-mouse)) (define-key keymap [up-mouse-1] (quote ignore)) (define-key keymap [up-mouse-3] (quote ignore)) (define-key keymap (kbd "RET") (quote company-complete-selection)) (define-key keymap [tab] (quote company-complete-common)) (define-key keymap (kbd "TAB") (quote company-complete-common)) (define-key keymap (kbd "<f1>") (quote company-show-doc-buffer)) (define-key keymap (kbd "C-h") (quote company-show-doc-buffer)) (define-key keymap "" (quote company-show-location)) (define-key keymap "" (quote company-search-candidates)) (define-key keymap "\223" (quote company-filter-candidates)) (dotimes (i 10) (define-key keymap (read-kbd-macro (format "M-%d" i)) (quote company-complete-number))) keymap)) nil [26520 28032])
            ("company--disabled-backends" variable nil nil [28034 28073])
            ("company-init-backend" function (:arguments ("backend")) nil [28075 28849])
            ("company-lighter-base" variable (:default-value "company") nil [28851 29005])
            ("company-lighter" variable (:default-value (quote (" " (company-candidates (:eval (if (consp company-backend) (company--group-lighter (nth company-selection company-candidates) company-lighter-base) (symbol-name company-backend))) company-lighter-base)))) nil [29007 29636])
            ("put" code nil nil [29638 29684])
            ("define-minor-mode" code nil nil [29701 31415])
            ("company-global-modes" variable (:default-value t) nil [31417 32276])
            ("define-globalized-minor-mode" code nil nil [32293 32372])
            ("company-mode-on" function nil nil [32374 32762])
            ("company-assert-enabled" function nil nil [32764 32886])
            ("defvar-local" code nil nil [32970 33006])
            ("company-emulation-alist" variable (:default-value (quote ((t)))) nil [33008 33053])
            ("company-enable-overriding-keymap" function (:arguments ("keymap")) nil [33055 33167])
            ("company-ensure-emulation-alist" function nil nil [33169 33436])
            ("company-install-map" function nil nil [33438 33614])
            ("company-uninstall-map" function nil nil [33616 33692])
            ("company-ignore" function nil nil [33918 33994])
            ("global-set-key" code nil nil [33996 34051])
            ("company-input-noop" function nil nil [34053 34134])
            ("company--posn-col-row" function (:arguments ("posn")) nil [34136 34701])
            ("company--col-row" function (:arguments ("pos")) nil [34703 34789])
            ("company--row" function (:arguments ("pos")) nil [34791 34858])
            ("defvar-local" code nil nil [34942 34976])
            ("company-grab" function (:arguments ("regexp" "expression" "limit")) nil [34978 35130])
            ("company-grab-line" function (:arguments ("regexp" "expression")) nil [35132 35495])
            ("company-grab-symbol" function nil nil [35497 35891])
            ("company-grab-word" function nil nil [35893 36273])
            ("company-grab-symbol-cons" function (:arguments ("idle-begin-after-re" "max-len")) nil [36275 36905])
            ("company-in-string-or-comment" function nil nil [36907 37137])
            ("company-call-backend" function (:arguments ("args")) nil [37139 37252])
            ("company--force-sync" function (:arguments ("fun" "args" "backend")) nil [37254 37802])
            ("company-call-backend-raw" function (:arguments ("args")) nil [37804 38167])
            ("company--multi-backend-adapter" function (:arguments ("backends" "command" "args")) nil [38169 39356])
            ("company--multi-backend-adapter-candidates" function (:arguments ("backends" "prefix" "separate")) nil [39358 40265])
            ("company--multi-candidates-mapper" function (:arguments ("backend" "separate" "tag")) nil [40267 40682])
            ("company--merge-async" function (:arguments ("pairs" "merger")) nil [40684 42001])
            ("company--prefix-str" function (:arguments ("prefix")) nil [42003 42071])
            ("defvar-local" code nil nil [42155 42188])
            ("defvar-local" code nil nil [42190 42227])
            ("defvar-local" code nil nil [42229 42273])
            ("defvar-local" code nil nil [42275 42318])
            ("defvar-local" code nil nil [42320 42367])
            ("defvar-local" code nil nil [42369 42402])
            ("defvar-local" code nil nil [42404 42438])
            ("defvar-local" code nil nil [42440 42484])
            ("defvar-local" code nil nil [42486 42573])
            ("defvar-local" code nil nil [42575 42616])
            ("company--auto-completion" variable nil nil [42618 42762])
            ("defvar-local" code nil nil [42764 42801])
            ("defvar-local" code nil nil [42803 42835])
            ("company-timer" variable nil nil [42837 42863])
            ("company-tooltip-timer" variable nil nil [42864 42898])
            ("company-strip-prefix" function (:arguments ("str")) nil [42900 42979])
            ("company--insert-candidate" function (:arguments ("candidate")) nil [42981 43434])
            ("company-with-candidate-inserted" function (:arguments ("candidate" "body")) nil [43436 43983])
            ("company-explicit-action-p" function nil nil [43985 44152])
            ("company-reformat" function (:arguments ("candidate")) nil [44154 44541])
            ("company--should-complete" function nil nil [44543 44950])
            ("company--should-continue" function nil nil [44952 45414])
            ("company-call-frontends" function (:arguments ("command")) nil [45416 45705])
            ("company-set-selection" function (:arguments ("selection" "force-update")) nil [45707 46135])
            ("company--group-lighter" function (:arguments ("candidate" "base")) nil [46137 46594])
            ("company-update-candidates" function (:arguments ("candidates")) nil [46596 48183])
            ("company-calculate-candidates" function (:arguments ("prefix")) nil [48185 49491])
            ("company--fetch-candidates" function (:arguments ("prefix")) nil [49493 50912])
            ("company--preprocess-candidates" function (:arguments ("candidates")) nil [50914 51202])
            ("company--postprocess-candidates" function (:arguments ("candidates")) nil [51204 51533])
            ("company--strip-duplicates" function (:arguments ("candidates")) nil [51535 52451])
            ("company--transform-candidates" function (:arguments ("candidates")) nil [52453 52603])
            ("company-occurrence-weight-function" variable (:default-value (function company-occurrence-prefer-closest-above)) nil [52605 53097])
            ("company-occurrence-prefer-closest-above" function (:arguments ("pos" "match-beg" "match-end")) nil [53099 53324])
            ("company-occurrence-prefer-any-closest" function (:arguments ("pos" "_match-beg" "match-end")) nil [53326 53479])
            ("company-sort-by-occurrence" function (:arguments ("candidates")) nil [53481 54866])
            ("company--occurrence-predicate" function nil nil [54868 55373])
            ("company-sort-by-backend-importance" function (:arguments ("candidates")) nil [55375 56197])
            ("company-sort-prefer-same-case-prefix" function (:arguments ("candidates")) nil [56199 56675])
            ("company-idle-begin" function (:arguments ("buf" "win" "tick" "pos")) nil [56677 57011])
            ("company-auto-begin" function nil nil [57013 57514])
            ("company-manual-begin" function nil nil [57531 57843])
            ("company-other-backend" function (:arguments ("backward")) nil [57845 58509])
            ("company-require-match-p" function nil nil [58511 58830])
            ("company-auto-complete-p" function (:arguments ("input")) nil [58832 59398])
            ("company--incremental-p" function nil nil [59400 59722])
            ("company--continue-failed" function (:arguments ("new-prefix")) nil [59724 60813])
            ("company--good-prefix-p" function (:arguments ("prefix")) nil [60815 61382])
            ("company--continue" function nil nil [61384 62461])
            ("company--begin-new" function nil nil [62463 64044])
            ("company--perform" function nil nil [64046 64456])
            ("company-cancel" function (:arguments ("result")) nil [64458 65746])
            ("company-abort" function nil nil [65748 65814])
            ("company-finish" function (:arguments ("result")) nil [65816 65910])
            ("company-keep" function (:arguments ("command")) nil [65912 65999])
            ("company-pre-command" function nil nil [66001 66605])
            ("company-post-command" function nil nil [66607 67942])
            ("company--begin-inhibit-commands" variable (:default-value (quote (company-abort company-complete-mouse company-complete company-complete-common company-complete-selection company-complete-number))) nil [67944 68431])
            ("company--should-begin" function nil nil [68433 68691])
            ("company-search-regexp-function" variable (:default-value (function regexp-quote)) nil [68775 69475])
            ("defvar-local" code nil nil [69477 69516])
            ("company-search-lighter" variable (:default-value (quote (" " (company-search-filtering "Filter" "Search") ": \"" company-search-string "\""))) nil [69518 69767])
            ("defvar-local" code nil nil [69769 69881])
            ("defvar-local" code nil nil [69883 69929])
            ("defvar-local" code nil nil [69931 69977])
            ("company-search-words-regexp" function (:arguments ("input")) nil [69979 70138])
            ("company-search-words-in-any-order-regexp" function (:arguments ("input")) nil [70140 70519])
            ("company-search-flex-regexp" function (:arguments ("input")) nil [70521 70851])
            ("company--permutations" function (:arguments ("lst")) nil [70853 71073])
            ("company--search" function (:arguments ("text" "lines")) nil [71075 71317])
            ("company-search-keypad" function nil nil [71319 71514])
            ("company-search-printing-char" function nil nil [71516 71799])
            ("company--search-update-predicate" function (:arguments ("ss")) nil [71801 72218])
            ("company--search-update-string" function (:arguments ("new")) nil [72220 72480])
            ("company--search-assert-input" function nil nil [72482 72634])
            ("company-search-repeat-forward" function (:user-visible-flag t) nil [72636 73069])
            ("company-search-repeat-backward" function (:user-visible-flag t) nil [73071 73577])
            ("company-search-toggle-filtering" function (:user-visible-flag t) nil [73579 73894])
            ("company-search-abort" function (:user-visible-flag t) nil [73896 74172])
            ("company-search-other-char" function nil nil [74174 74318])
            ("company-search-delete-char" function nil nil [74320 74644])
            ("company-search-map" variable (:default-value (let ((i 0) (keymap (make-keymap))) (if (fboundp (quote max-char)) (set-char-table-range (nth 1 keymap) (cons 256 (max-char)) (quote company-search-printing-char)) (with-no-warnings (let ((l (generic-character-list)) (table (nth 1 keymap))) (while l (set-char-table-default table (car l) (quote company-search-printing-char)) (setq l (cdr l)))))) (define-key keymap [t] (quote company-search-other-char)) (while (< i 32) (define-key keymap (make-string 1 i) (quote company-search-other-char)) (cl-incf i)) (while (< i 256) (define-key keymap (vector i) (quote company-search-printing-char)) (cl-incf i)) (dotimes (i 10) (define-key keymap (read (format "[kp-%s]" i)) (quote company-search-keypad))) (let ((meta-map (make-sparse-keymap))) (define-key keymap (char-to-string meta-prefix-char) meta-map) (define-key keymap [escape] meta-map)) (define-key keymap (vector meta-prefix-char t) (quote company-search-other-char)) (define-key keymap (kbd "M-n") (quote company-select-next)) (define-key keymap (kbd "M-p") (quote company-select-previous)) (define-key keymap (kbd "<down>") (quote company-select-next-or-abort)) (define-key keymap (kbd "<up>") (quote company-select-previous-or-abort)) (define-key keymap "" (quote company-search-other-char)) (define-key keymap [escape escape escape] (quote company-search-other-char)) (define-key keymap (kbd "DEL") (quote company-search-delete-char)) (define-key keymap [backspace] (quote company-search-delete-char)) (define-key keymap "" (quote company-search-abort)) (define-key keymap "" (quote company-search-repeat-forward)) (define-key keymap "" (quote company-search-repeat-backward)) (define-key keymap "" (quote company-search-toggle-filtering)) (dotimes (i 10) (define-key keymap (read-kbd-macro (format "M-%d" i)) (quote company-complete-number))) keymap)) nil [74646 76706])
            ("define-minor-mode" code nil nil [76708 77663])
            ("company--search-assert-enabled" function nil nil [77665 77833])
            ("company-search-candidates" function (:user-visible-flag t) nil [77835 78598])
            ("company-filter-map" variable (:default-value (let ((keymap (make-keymap))) (define-key keymap [remap company-search-printing-char] (quote company-filter-printing-char)) (set-keymap-parent keymap company-search-map) keymap)) nil [78600 78889])
            ("company-filter-candidates" function (:user-visible-flag t) nil [78891 79180])
            ("company-select-next" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [79264 79502])
            ("company-select-previous" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [79504 79701])
            ("company-select-next-or-abort" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [79703 80028])
            ("company-select-previous-or-abort" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [80030 80367])
            ("company-next-page" function (:user-visible-flag t) nil [80369 80590])
            ("company-previous-page" function (:user-visible-flag t) nil [80592 80817])
            ("company-pseudo-tooltip-overlay" variable nil nil [80819 80858])
            ("company-tooltip-offset" variable nil nil [80860 80891])
            ("company--inside-tooltip-p" function (:arguments ("event-col-row" "row" "height")) nil [80893 81435])
            ("company--event-col-row" function (:arguments ("event")) nil [81437 81521])
            ("company-select-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [81523 82701])
            ("company-complete-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [82703 82878])
            ("company-complete-selection" function (:user-visible-flag t) nil [82880 83094])
            ("company-complete-common" function (:user-visible-flag t) nil [83096 83417])
            ("company-complete-common-or-cycle" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [83419 83929])
            ("company-indent-or-complete-common" function (:user-visible-flag t) nil [83931 84443])
            ("company-select-next-if-tooltip-visible-or-complete-selection" function (:user-visible-flag t) nil [84445 84877])
            ("company-complete" function (:user-visible-flag t) nil [84894 85448])
            ("company-complete-number" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [85450 86456])
            ("company-space-strings-limit" variable
               (:constant-flag t
                :default-value 100)
                nil [86540 86582])
            ("company-space-strings" variable
               (:constant-flag t
                :default-value (let (lst) (dotimes (i company-space-strings-limit) (push (make-string (- company-space-strings-limit 1 i) 32) lst)) (apply (quote vector) lst)))
                nil [86584 86772])
            ("company-space-string" function (:arguments ("len")) nil [86774 86916])
            ("company-safe-substring" function (:arguments ("str" "from" "to")) nil [86918 87449])
            ("defvar-local" code nil nil [87533 87573])
            ("company-fetch-metadata" function nil nil [87575 87860])
            ("company-doc-buffer" function (:arguments ("string")) nil [87862 88082])
            ("company--electric-saved-window-configuration" variable nil nil [88084 88141])
            ("company--electric-commands" variable (:default-value (quote (scroll-other-window scroll-other-window-down mwheel-scroll))) nil [88143 88306])
            ("company--electric-restore-window-configuration" function nil nil [88308 88687])
            ("company--electric-do" function (:arguments ("body")) nil [88689 89193])
            ("company--unread-last-input" function nil nil [89195 89347])
            ("company-show-doc-buffer" function (:user-visible-flag t) nil [89349 90055])
            ("put" code nil nil [90056 90102])
            ("company-show-location" function (:user-visible-flag t) nil [90104 90993])
            ("put" code nil nil [90994 91038])
            ("defvar-local" code nil nil [91122 91157])
            ("company-remove-callback" function (:arguments ("ignored")) nil [91159 91434])
            ("company-begin-backend" function
               (:user-visible-flag t
                :arguments ("backend" "callback"))
                nil [91436 92202])
            ("company-begin-with" function (:arguments ("candidates" "prefix-length" "require-match" "callback")) nil [92204 93112])
            ("declare-function" code nil nil [93114 93162])
            ("declare-function" code nil nil [93163 93203])
            ("company-version" function
               (:user-visible-flag t
                :arguments ("show-version"))
                nil [93205 93602])
            ("company-diag" function (:user-visible-flag t) nil [93604 95112])
            ("defvar-local" code nil nil [95196 95245])
            ("defvar-local" code nil nil [95247 95286])
            ("company-tooltip--lines-update-offset" function (:arguments ("selection" "num-lines" "limit")) nil [95288 95872])
            ("company-tooltip--simple-update-offset" function (:arguments ("selection" "_num-lines" "limit")) nil [95874 96129])
            ("company-round-tab" function (:arguments ("arg")) nil [96147 96229])
            ("company-plainify" function (:arguments ("str")) nil [96231 96758])
            ("company-fill-propertize" function (:arguments ("value" "annotation" "width" "selected" "left" "right")) nil [96760 100201])
            ("company--search-chunks" function nil nil [100203 100471])
            ("company--pre-render" function (:arguments ("str" "annotation-p")) nil [100473 100973])
            ("company--clean-string" function (:arguments ("str")) nil [100975 101512])
            ("company-buffer-lines" function (:arguments ("beg" "end")) nil [101527 102526])
            ("company-modify-line" function (:arguments ("old" "new" "offset")) nil [102528 102698])
            ("company--length-limit" function (:arguments ("lst" "limit")) nil [102700 102799])
            ("company--window-height" function nil nil [102801 102936])
            ("company--window-width" function nil nil [102938 103777])
            ("company--replacement-string" function (:arguments ("lines" "old" "column" "nl" "align-top")) nil [103779 105131])
            ("company--offset-line" function (:arguments ("line" "offset")) nil [105133 105239])
            ("company--create-lines" function (:arguments ("selection" "limit")) nil [105241 108875])
            ("company--scrollbar-bounds" function (:arguments ("offset" "limit" "length")) nil [108877 109140])
            ("company--scrollbar" function (:arguments ("i" "bounds")) nil [109142 109347])
            ("company--scrollpos-line" function (:arguments ("text" "width")) nil [109349 109628])
            ("company--pseudo-tooltip-height" function nil nil [109639 110100])
            ("company-pseudo-tooltip-show" function (:arguments ("row" "column" "selection")) nil [110102 111244])
            ("company-pseudo-tooltip-show-at-point" function (:arguments ("pos" "column-offset")) nil [111246 111510])
            ("company-pseudo-tooltip-edit" function (:arguments ("selection")) nil [111512 112095])
            ("company-pseudo-tooltip-hide" function nil nil [112097 112273])
            ("company-pseudo-tooltip-hide-temporarily" function nil nil [112275 112635])
            ("company-pseudo-tooltip-unhide" function nil nil [112637 113365])
            ("company-pseudo-tooltip-guard" function nil nil [113367 113808])
            ("company-pseudo-tooltip-frontend" function (:arguments ("command")) nil [113810 114991])
            ("company-pseudo-tooltip-unless-just-one-frontend" function (:arguments ("command")) nil [114993 115264])
            ("company-pseudo-tooltip-unless-just-one-frontend-with-delay" function (:arguments ("command")) nil [115266 116404])
            ("defvar-local" code nil nil [116488 116530])
            ("company-preview-show-at-point" function (:arguments ("pos")) nil [116532 118438])
            ("company-preview-hide" function nil nil [118440 118588])
            ("company-preview-frontend" function (:arguments ("command")) nil [118590 118865])
            ("company-preview-if-just-one-frontend" function (:arguments ("command")) nil [118867 119114])
            ("company--show-inline-p" function nil nil [119116 119335])
            ("company-tooltip-visible-p" function nil nil [119337 119534])
            ("defvar-local" code nil nil [119618 119658])
            ("company-echo-timer" variable nil nil [119660 119691])
            ("company-echo-delay" variable (:default-value 0.01) nil [119693 119724])
            ("company-echo-show" function (:arguments ("getter")) nil [119726 119963])
            ("company-echo-show-soon" function (:arguments ("getter")) nil [119965 120115])
            ("company-echo-cancel" function (:arguments ("unset")) nil [120117 120277])
            ("company-echo-show-when-idle" function (:arguments ("getter")) nil [120279 120464])
            ("company-echo-format" function nil nil [120466 121534])
            ("company-echo-strip-common-format" function nil nil [121536 122373])
            ("company-echo-hide" function nil nil [122375 122507])
            ("company-echo-frontend" function (:arguments ("command")) nil [122509 122733])
            ("company-echo-strip-common-frontend" function (:arguments ("command")) nil [122735 122985])
            ("company-echo-metadata-frontend" function (:arguments ("command")) nil [122987 123231])
            ("company" package nil nil [123233 123251]))          
      :file "company.el"
      :pointmax 123277
      :fsize 123276
      :lastmodtime '(22379 7886 14416 856000)
      :unmatched-syntax '((close-paren 3429 . 3430) (symbol 2955 . 2971) (open-paren 2954 . 2955)))
    (semanticdb-table "company-dabbrev-code.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [905 923])
            ("company-dabbrev" include nil nil [924 950])
            ("cl-lib" include nil nil [951 968])
            ("company-dabbrev-code" customgroup (:user-visible-flag t) nil [970 1069])
            ("company-dabbrev-code-modes" variable (:default-value (quote (prog-mode batch-file-mode csharp-mode css-mode erlang-mode haskell-mode jde-mode lua-mode python-mode))) nil [1071 1651])
            ("company-dabbrev-code-other-buffers" variable (:default-value t) nil [1653 2225])
            ("company-dabbrev-code-time-limit" variable (:default-value 0.1) nil [2227 2427])
            ("company-dabbrev-code-everywhere" variable nil nil [2429 2551])
            ("company-dabbrev-code-ignore-case" variable nil nil [2553 2684])
            ("company-dabbrev-code--make-regexp" function (:arguments ("prefix")) nil [2686 2898])
            ("company-dabbrev-code" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [2915 4053])
            ("company-dabbrev-code" package nil nil [4055 4086]))          
      :file "company-dabbrev-code.el"
      :pointmax 4125
      :fsize 4124
      :lastmodtime '(22379 7886 98416 859000)
      :unmatched-syntax nil)
    (semanticdb-table "company-dabbrev.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [914 932])
            ("cl-lib" include nil nil [933 950])
            ("company-dabbrev" customgroup (:user-visible-flag t) nil [952 1037])
            ("company-dabbrev-other-buffers" variable (:default-value (quote all)) nil [1039 1435])
            ("company-dabbrev-ignore-buffers" variable (:default-value "\\`[ *]") nil [1437 1720])
            ("company-dabbrev-time-limit" variable (:default-value 0.1) nil [1722 1920])
            ("company-dabbrev-char-regexp" variable (:default-value "\\sw") nil [1922 2062])
            ("company-dabbrev-ignore-case" variable (:default-value (quote keep-prefix)) nil [2064 2329])
            ("company-dabbrev-downcase" variable (:default-value (quote case-replace)) nil [2331 2682])
            ("company-dabbrev-minimum-length" variable (:default-value 4) nil [2684 2926])
            ("company-dabbrev-ignore-invisible" variable nil nil [2928 3069])
            ("company-dabbrev--time-limit-while" function (:arguments ("test" "start" "limit" "freq" "body")) nil [3071 3536])
            ("company-dabbrev--make-regexp" function nil nil [3538 3631])
            ("company-dabbrev--search-buffer" function (:arguments ("regexp" "pos" "symbols" "start" "limit" "ignore-comments")) nil [3633 5368])
            ("company-dabbrev--search" function (:arguments ("regexp" "limit" "other-buffer-modes" "ignore-comments")) nil [5370 6476])
            ("company-dabbrev--prefix" function nil nil [6478 6800])
            ("company-dabbrev--filter" function (:arguments ("prefix" "candidates")) nil [6802 6956])
            ("company-dabbrev" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [6973 8036])
            ("company-dabbrev" package nil nil [8038 8064]))          
      :file "company-dabbrev.el"
      :pointmax 8098
      :fsize 8097
      :lastmodtime '(22379 7886 150416 861000)
      :unmatched-syntax nil)
    (semanticdb-table "company-gtags.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [873 891])
            ("company-template" include nil nil [892 919])
            ("cl-lib" include nil nil [920 937])
            ("company-gtags" customgroup (:user-visible-flag t) nil [939 1024])
            ("company-gtags-executable" variable (:default-value (executable-find "global")) nil [1026 1146])
            ("define-obsolete-variable-alias" code nil nil [1148 1259])
            ("company-gtags-insert-arguments" variable (:default-value t) nil [1261 1438])
            ("defvar-local" code nil nil [1440 1495])
            ("company-gtags-modes" variable (:default-value (quote (prog-mode jde-mode))) nil [1497 1755])
            ("company-gtags--tags-available-p" function nil nil [1757 1995])
            ("company-gtags--fetch-tags" function (:arguments ("prefix")) nil [1997 3048])
            ("company-gtags--annotation" function (:arguments ("arg")) nil [3050 3225])
            ("company-gtags" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [3242 4236])
            ("company-gtags" package nil nil [4238 4262]))          
      :file "company-gtags.el"
      :pointmax 4294
      :fsize 4293
      :lastmodtime '(22379 7885 814416 849000)
      :unmatched-syntax nil)
    (semanticdb-table "company-template.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [852 869])
            ("company-template-field" variable
               (:default-value (quote ((((background dark)) (:background "yellow" :foreground "black")) (((background light)) (:background "orange" :foreground "black"))))
                :type "face")
                nil [871 1113])
            ("company-template-nav-map" variable (:default-value (let ((keymap (make-sparse-keymap))) (define-key keymap [tab] (quote company-template-forward-field)) (define-key keymap (kbd "TAB") (quote company-template-forward-field)) keymap)) nil [1115 1329])
            ("defvar-local" code nil nil [1331 1384])
            ("company-template-templates-at" function (:arguments ("pos")) nil [1468 1765])
            ("company-template-move-to-first" function (:arguments ("templ")) nil [1767 1900])
            ("company-template-forward-field" function nil nil [1902 2500])
            ("company-template-field-at" function (:arguments ("point")) nil [2502 2690])
            ("company-template-declare-template" function (:arguments ("beg" "end")) nil [2774 3154])
            ("company-template-remove-template" function (:arguments ("templ")) nil [3156 3422])
            ("company-template-add-field" function (:arguments ("templ" "beg" "end" "display")) nil [3424 4261])
            ("company-template-remove-field" function (:arguments ("ovl" "clear")) nil [4263 4719])
            ("company-template-clean-up" function (:arguments ("pos")) nil [4721 5017])
            ("company-template-insert-hook" function (:arguments ("ovl" "after-p" "_ignore")) nil [5101 5278])
            ("company-template-post-command" function nil nil [5280 5466])
            ("company-template-c-like-templatify" function (:arguments ("call")) nil [5550 6762])
            ("company-template--c-like-args" function (:arguments ("templ" "end")) nil [6764 7096])
            ("company-template-objc-templatify" function (:arguments ("selector")) nil [7178 8222])
            ("company-template" package nil nil [8224 8251]))          
      :file "company-template.el"
      :pointmax 8286
      :fsize 8285
      :lastmodtime '(22379 7886 74416 858000)
      :unmatched-syntax nil)
    (semanticdb-table "company-elisp.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [900 918])
            ("cl-lib" include nil nil [919 936])
            ("help-mode" include nil nil [937 957])
            ("find-func" include nil nil [958 978])
            ("company-elisp" customgroup (:user-visible-flag t) nil [980 1065])
            ("company-elisp-detect-function-context" variable (:default-value t) nil [1067 1321])
            ("company-elisp-show-locals-first" variable (:default-value t) nil [1323 1544])
            ("company-elisp--prefix" function nil nil [1546 1831])
            ("company-elisp--predicate" function (:arguments ("symbol")) nil [1833 1965])
            ("company-elisp--fns-regexp" function (:arguments ("names")) nil [1967 2074])
            ("company-elisp-parse-limit" variable (:default-value 30) nil [2076 2113])
            ("company-elisp-parse-depth" variable (:default-value 100) nil [2114 2152])
            ("company-elisp-defun-names" variable (:default-value (quote ("defun" "defmacro" "defsubst"))) nil [2154 2221])
            ("company-elisp-var-binding-regexp" variable (:default-value (apply (function company-elisp--fns-regexp) "let" "lambda" "lexical-let" company-elisp-defun-names)) nil [2223 2441])
            ("company-elisp-var-binding-regexp-1" variable (:default-value (company-elisp--fns-regexp "dolist" "dotimes")) nil [2443 2609])
            ("company-elisp-fun-binding-regexp" variable (:default-value (company-elisp--fns-regexp "flet" "labels")) nil [2611 2764])
            ("company-elisp-defuns-regexp" variable (:default-value (concat "([ 	
]*" (apply (function company-elisp--fns-regexp) company-elisp-defun-names))) nil [2766 2897])
            ("company-elisp--should-complete" function nil nil [2899 3459])
            ("company-elisp--locals" function (:arguments ("prefix" "functions-p")) nil [3461 5101])
            ("company-elisp-candidates" function (:arguments ("prefix")) nil [5103 5645])
            ("company-elisp--globals" function (:arguments ("prefix" "predicate")) nil [5647 5741])
            ("company-elisp--candidates-predicate" function (:arguments ("prefix")) nil [5743 6466])
            ("company-elisp--before-binding-varlist-p" function nil nil [6468 6660])
            ("company-elisp--doc" function (:arguments ("symbol")) nil [6662 6975])
            ("company-elisp" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [6992 8454])
            ("company-elisp" package nil nil [8456 8480]))          
      :file "company-elisp.el"
      :pointmax 8512
      :fsize 8511
      :lastmodtime '(22379 7886 522416 874000)
      :unmatched-syntax nil)
    (semanticdb-table "company-yasnippet.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [865 883])
            ("cl-lib" include nil nil [884 901])
            ("declare-function" code nil nil [903 949])
            ("declare-function" code nil nil [950 1004])
            ("declare-function" code nil nil [1005 1054])
            ("declare-function" code nil nil [1055 1107])
            ("declare-function" code nil nil [1108 1163])
            ("declare-function" code nil nil [1164 1207])
            ("company-yasnippet--key-prefixes" function nil nil [1209 2204])
            ("company-yasnippet--candidates" function (:arguments ("prefix")) nil [2206 2865])
            ("company-yasnippet--completions-for-prefix" function (:arguments ("prefix" "key-prefix" "tables")) nil [2867 3656])
            ("company-yasnippet" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignore"))
                nil [3673 5452])
            ("company-yasnippet" package nil nil [5454 5482]))          
      :file "company-yasnippet.el"
      :pointmax 5518
      :fsize 5517
      :lastmodtime '(22379 7886 386416 869000)
      :unmatched-syntax nil)
    (semanticdb-table "company-keywords.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [881 899])
            ("cl-lib" include nil nil [900 917])
            ("company-keywords-upper-lower" function (:arguments ("lst")) nil [919 1056])
            ("company-keywords-alist" variable (:default-value (\` ((c++-mode "alignas" "alignof" "asm" "auto" "bool" "break" "case" "catch" "char" "char16_t" "char32_t" "class" "const" "const_cast" "constexpr" "continue" "decltype" "default" "delete" "do" "double" "dynamic_cast" "else" "enum" "explicit" "export" "extern" "false" "final" "float" "for" "friend" "goto" "if" "inline" "int" "long" "mutable" "namespace" "new" "noexcept" "nullptr" "operator" "override" "private" "protected" "public" "register" "reinterpret_cast" "return" "short" "signed" "sizeof" "static" "static_assert" "static_cast" "struct" "switch" "template" "this" "thread_local" "throw" "true" "try" "typedef" "typeid" "typename" "union" "unsigned" "using" "virtual" "void" "volatile" "wchar_t" "while") (c-mode "auto" "break" "case" "char" "const" "continue" "default" "do" "double" "else" "enum" "extern" "float" "for" "goto" "if" "int" "long" "register" "return" "short" "signed" "sizeof" "static" "struct" "switch" "typedef" "union" "unsigned" "void" "volatile" "while") (csharp-mode "abstract" "add" "alias" "as" "base" "bool" "break" "byte" "case" "catch" "char" "checked" "class" "const" "continue" "decimal" "default" "delegate" "do" "double" "else" "enum" "event" "explicit" "extern" "false" "finally" "fixed" "float" "for" "foreach" "get" "global" "goto" "if" "implicit" "in" "int" "interface" "internal" "is" "lock" "long" "namespace" "new" "null" "object" "operator" "out" "override" "params" "partial" "private" "protected" "public" "readonly" "ref" "remove" "return" "sbyte" "sealed" "set" "short" "sizeof" "stackalloc" "static" "string" "struct" "switch" "this" "throw" "true" "try" "typeof" "uint" "ulong" "unchecked" "unsafe" "ushort" "using" "value" "var" "virtual" "void" "volatile" "where" "while" "yield") (d-mode "abstract" "alias" "align" "asm" "assert" "auto" "body" "bool" "break" "byte" "case" "cast" "catch" "cdouble" "cent" "cfloat" "char" "class" "const" "continue" "creal" "dchar" "debug" "default" "delegate" "delete" "deprecated" "do" "double" "else" "enum" "export" "extern" "false" "final" "finally" "float" "for" "foreach" "foreach_reverse" "function" "goto" "idouble" "if" "ifloat" "import" "in" "inout" "int" "interface" "invariant" "ireal" "is" "lazy" "long" "macro" "mixin" "module" "new" "nothrow" "null" "out" "override" "package" "pragma" "private" "protected" "public" "pure" "real" "ref" "return" "scope" "short" "static" "struct" "super" "switch" "synchronized" "template" "this" "throw" "true" "try" "typedef" "typeid" "typeof" "ubyte" "ucent" "uint" "ulong" "union" "unittest" "ushort" "version" "void" "volatile" "wchar" "while" "with") (f90-mode \, (company-keywords-upper-lower "abs" "abstract" "achar" "acos" "adjustl" "adjustr" "aimag" "aint" "align" "all" "all_prefix" "all_scatter" "all_suffix" "allocatable" "allocate" "allocated" "and" "anint" "any" "any_prefix" "any_scatter" "any_suffix" "asin" "assign" "assignment" "associate" "associated" "asynchronous" "atan" "atan2" "backspace" "bind" "bit_size" "block" "btest" "c_alert" "c_associated" "c_backspace" "c_bool" "c_carriage_return" "c_char" "c_double" "c_double_complex" "c_f_pointer" "c_f_procpointer" "c_float" "c_float_complex" "c_form_feed" "c_funloc" "c_funptr" "c_horizontal_tab" "c_int" "c_int16_t" "c_int32_t" "c_int64_t" "c_int8_t" "c_int_fast16_t" "c_int_fast32_t" "c_int_fast64_t" "c_int_fast8_t" "c_int_least16_t" "c_int_least32_t" "c_int_least64_t" "c_int_least8_t" "c_intmax_t" "c_intptr_t" "c_loc" "c_long" "c_long_double" "c_long_double_complex" "c_long_long" "c_new_line" "c_null_char" "c_null_funptr" "c_null_ptr" "c_ptr" "c_short" "c_signed_char" "c_size_t" "c_vertical_tab" "call" "case" "ceiling" "char" "character" "character_storage_size" "class" "close" "cmplx" "command_argument_count" "common" "complex" "conjg" "contains" "continue" "copy_prefix" "copy_scatter" "copy_suffix" "cos" "cosh" "count" "count_prefix" "count_scatter" "count_suffix" "cpu_time" "cshift" "cycle" "cyclic" "data" "date_and_time" "dble" "deallocate" "deferred" "digits" "dim" "dimension" "distribute" "do" "dot_product" "double" "dprod" "dynamic" "elemental" "else" "elseif" "elsewhere" "end" "enddo" "endfile" "endif" "entry" "enum" "enumerator" "eoshift" "epsilon" "eq" "equivalence" "eqv" "error_unit" "exit" "exp" "exponent" "extends" "extends_type_of" "external" "extrinsic" "false" "file_storage_size" "final" "floor" "flush" "forall" "format" "fraction" "function" "ge" "generic" "get_command" "get_command_argument" "get_environment_variable" "goto" "grade_down" "grade_up" "gt" "hpf_alignment" "hpf_distribution" "hpf_template" "huge" "iachar" "iall" "iall_prefix" "iall_scatter" "iall_suffix" "iand" "iany" "iany_prefix" "iany_scatter" "iany_suffix" "ibclr" "ibits" "ibset" "ichar" "ieee_arithmetic" "ieee_exceptions" "ieee_features" "ieee_get_underflow_mode" "ieee_set_underflow_mode" "ieee_support_underflow_control" "ieor" "if" "ilen" "implicit" "import" "include" "independent" "index" "inherit" "input_unit" "inquire" "int" "integer" "intent" "interface" "intrinsic" "ior" "iostat_end" "iostat_eor" "iparity" "iparity_prefix" "iparity_scatter" "iparity_suffix" "ishft" "ishftc" "iso_c_binding" "iso_fortran_env" "kind" "lbound" "le" "leadz" "len" "len_trim" "lge" "lgt" "lle" "llt" "log" "log10" "logical" "lt" "matmul" "max" "maxexponent" "maxloc" "maxval" "maxval_prefix" "maxval_scatter" "maxval_suffix" "merge" "min" "minexponent" "minloc" "minval" "minval_prefix" "minval_scatter" "minval_suffix" "mod" "module" "modulo" "move_alloc" "mvbits" "namelist" "ne" "nearest" "neqv" "new" "new_line" "nint" "non_intrinsic" "non_overridable" "none" "nopass" "not" "null" "nullify" "number_of_processors" "numeric_storage_size" "only" "onto" "open" "operator" "optional" "or" "output_unit" "pack" "parameter" "parity" "parity_prefix" "parity_scatter" "parity_suffix" "pass" "pause" "pointer" "popcnt" "poppar" "precision" "present" "print" "private" "procedure" "processors" "processors_shape" "product" "product_prefix" "product_scatter" "product_suffix" "program" "protected" "public" "pure" "radix" "random_number" "random_seed" "range" "read" "real" "realign" "recursive" "redistribute" "repeat" "reshape" "result" "return" "rewind" "rrspacing" "same_type_as" "save" "scale" "scan" "select" "selected_char_kind" "selected_int_kind" "selected_real_kind" "sequence" "set_exponent" "shape" "sign" "sin" "sinh" "size" "spacing" "spread" "sqrt" "stop" "subroutine" "sum" "sum_prefix" "sum_scatter" "sum_suffix" "system_clock" "tan" "tanh" "target" "template" "then" "tiny" "transfer" "transpose" "trim" "true" "type" "ubound" "unpack" "use" "value" "verify" "volatile" "wait" "where" "while" "with" "write")) (java-mode "abstract" "assert" "boolean" "break" "byte" "case" "catch" "char" "class" "continue" "default" "do" "double" "else" "enum" "extends" "final" "finally" "float" "for" "if" "implements" "import" "instanceof" "int" "interface" "long" "native" "new" "package" "private" "protected" "public" "return" "short" "static" "strictfp" "super" "switch" "synchronized" "this" "throw" "throws" "transient" "try" "void" "volatile" "while") (javascript-mode "break" "catch" "const" "continue" "delete" "do" "else" "export" "for" "function" "if" "import" "in" "instanceOf" "label" "let" "new" "return" "switch" "this" "throw" "try" "typeof" "var" "void" "while" "with" "yield") (objc-mode "@catch" "@class" "@encode" "@end" "@finally" "@implementation" "@interface" "@private" "@protected" "@protocol" "@public" "@selector" "@synchronized" "@throw" "@try" "alloc" "autorelease" "bycopy" "byref" "in" "inout" "oneway" "out" "release" "retain") (perl-mode "AUTOLOAD" "BEGIN" "CHECK" "CORE" "DESTROY" "END" "INIT" "__END__" "__FILE__" "__LINE__" "abs" "accept" "alarm" "and" "atan2" "bind" "binmode" "bless" "caller" "chdir" "chmod" "chomp" "chop" "chown" "chr" "chroot" "close" "closedir" "cmp" "connect" "continue" "cos" "crypt" "dbmclose" "dbmopen" "defined" "delete" "die" "do" "dump" "each" "else" "elsif" "endgrent" "endhostent" "endnetent" "endprotoent" "endpwent" "endservent" "eof" "eq" "eval" "exec" "exists" "exit" "exp" "fcntl" "fileno" "flock" "for" "foreach" "fork" "format" "formline" "ge" "getc" "getgrent" "getgrgid" "getgrnam" "gethostbyaddr" "gethostbyname" "gethostent" "getlogin" "getnetbyaddr" "getnetbyname" "getnetent" "getpeername" "getpgrp" "getppid" "getpriority" "getprotobyname" "getprotobynumber" "getprotoent" "getpwent" "getpwnam" "getpwuid" "getservbyname" "getservbyport" "getservent" "getsockname" "getsockopt" "glob" "gmtime" "goto" "grep" "gt" "hex" "if" "index" "int" "ioctl" "join" "keys" "kill" "last" "lc" "lcfirst" "le" "length" "link" "listen" "local" "localtime" "lock" "log" "lstat" "lt" "map" "mkdir" "msgctl" "msgget" "msgrcv" "msgsnd" "my" "ne" "next" "no" "not" "oct" "open" "opendir" "or" "ord" "our" "pack" "package" "pipe" "pop" "pos" "print" "printf" "push" "q" "qq" "quotemeta" "qw" "qx" "rand" "read" "readdir" "readline" "readlink" "readpipe" "recv" "redo" "ref" "rename" "require" "reset" "return" "reverse" "rewinddir" "rindex" "rmdir" "scalar" "seek" "seekdir" "select" "semctl" "semget" "semop" "send" "setgrent" "sethostent" "setnetent" "setpgrp" "setpriority" "setprotoent" "setpwent" "setservent" "setsockopt" "shift" "shmctl" "shmget" "shmread" "shmwrite" "shutdown" "sin" "sleep" "socket" "socketpair" "sort" "splice" "split" "sprintf" "sqrt" "srand" "stat" "study" "sub" "substr" "symlink" "syscall" "sysopen" "sysread" "system" "syswrite" "tell" "telldir" "tie" "time" "times" "tr" "truncate" "uc" "ucfirst" "umask" "undef" "unless" "unlink" "unpack" "unshift" "untie" "until" "use" "utime" "values" "vec" "wait" "waitpid" "wantarray" "warn" "while" "write" "x" "xor" "y") (php-mode "__CLASS__" "__DIR__" "__FILE__" "__FUNCTION__" "__LINE__" "__METHOD__" "__NAMESPACE__" "_once" "abstract" "and" "array" "as" "break" "case" "catch" "cfunction" "class" "clone" "const" "continue" "declare" "default" "die" "do" "echo" "else" "elseif" "empty" "enddeclare" "endfor" "endforeach" "endif" "endswitch" "endwhile" "eval" "exception" "exit" "extends" "final" "for" "foreach" "function" "global" "goto" "if" "implements" "include" "instanceof" "interface" "isset" "list" "namespace" "new" "old_function" "or" "php_user_filter" "print" "private" "protected" "public" "require" "require_once" "return" "static" "switch" "this" "throw" "try" "unset" "use" "var" "while" "xor") (python-mode "and" "assert" "break" "class" "continue" "def" "del" "elif" "else" "except" "exec" "finally" "for" "from" "global" "if" "import" "in" "is" "lambda" "not" "or" "pass" "print" "raise" "return" "try" "while" "yield") (ruby-mode "BEGIN" "END" "alias" "and" "begin" "break" "case" "class" "def" "defined?" "do" "else" "elsif" "end" "ensure" "false" "for" "if" "in" "module" "next" "nil" "not" "or" "redo" "rescue" "retry" "return" "self" "super" "then" "true" "undef" "unless" "until" "when" "while" "yield") (scala-mode "abstract" "case" "catch" "class" "def" "do" "else" "extends" "false" "final" "finally" "for" "forSome" "if" "implicit" "import" "lazy" "match" "new" "null" "object" "override" "package" "private" "protected" "return" "sealed" "super" "this" "throw" "trait" "true" "try" "type" "val" "var" "while" "with" "yield") (julia-mode "abstract" "break" "case" "catch" "const" "continue" "do" "else" "elseif" "end" "eval" "export" "false" "finally" "for" "function" "global" "if" "ifelse" "immutable" "import" "importall" "in" "let" "macro" "module" "otherwise" "quote" "return" "switch" "throw" "true" "try" "type" "typealias" "using" "while") (js2-mode . javascript-mode) (espresso-mode . javascript-mode) (js-mode . javascript-mode) (cperl-mode . perl-mode) (jde-mode . java-mode) (ess-julia-mode . julia-mode)))) nil [1058 14094])
            ("company-keywords" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [14111 14821])
            ("company-keywords" package nil nil [14823 14850]))          
      :file "company-keywords.el"
      :pointmax 14885
      :fsize 14884
      :lastmodtime '(22379 7886 254416 864000)
      :unmatched-syntax nil)
    (semanticdb-table "company-etags.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [868 886])
            ("cl-lib" include nil nil [887 904])
            ("etags" include nil nil [905 921])
            ("company-etags" customgroup (:user-visible-flag t) nil [923 1003])
            ("company-etags-use-main-table-list" variable (:default-value t) nil [1005 1273])
            ("company-etags-ignore-case" variable nil nil [1275 1426])
            ("company-etags-everywhere" variable nil nil [1428 1803])
            ("company-etags-modes" variable (:default-value (quote (prog-mode c-mode objc-mode c++-mode java-mode jde-mode pascal-mode perl-mode python-mode))) nil [1805 1955])
            ("defvar-local" code nil nil [1957 2007])
            ("company-etags-find-table" function nil nil [2009 2333])
            ("company-etags-buffer-table" function nil nil [2335 2593])
            ("company-etags--candidates" function (:arguments ("prefix")) nil [2595 2964])
            ("company-etags" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [2981 3929])
            ("company-etags" package nil nil [3931 3955]))          
      :file "company-etags.el"
      :pointmax 3987
      :fsize 3986
      :lastmodtime '(22379 7886 50416 857000)
      :unmatched-syntax nil)
    (semanticdb-table "company-tempo.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [868 886])
            ("cl-lib" include nil nil [887 904])
            ("tempo" include nil nil [905 921])
            ("company-tempo" customgroup (:user-visible-flag t) nil [923 999])
            ("company-tempo-expand" variable nil nil [1001 1167])
            ("company-tempo-lookup" function (:arguments ("match")) nil [1169 1255])
            ("company-tempo-insert" function (:arguments ("match")) nil [1257 1478])
            ("company-tempo-meta" function (:arguments ("match")) nil [1480 1677])
            ("company-tempo" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [1694 2179])
            ("company-tempo" package nil nil [2181 2205]))          
      :file "company-tempo.el"
      :pointmax 2237
      :fsize 2236
      :lastmodtime '(22379 7886 126416 860000)
      :unmatched-syntax nil)
    (semanticdb-table "company-bbdb.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [867 885])
            ("cl-lib" include nil nil [886 903])
            ("declare-function" code nil nil [905 952])
            ("declare-function" code nil nil [953 991])
            ("declare-function" code nil nil [992 1036])
            ("declare-function" code nil nil [1037 1078])
            ("company-bbdb" customgroup (:user-visible-flag t) nil [1080 1158])
            ("company-bbdb-modes" variable (:default-value (quote (message-mode))) nil [1160 1345])
            ("company-bbdb--candidates" function (:arguments ("arg")) nil [1347 1608])
            ("company-bbdb" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignore"))
                nil [1625 2196])
            ("company-bbdb" package nil nil [2198 2221]))          
      :file "company-bbdb.el"
      :pointmax 2252
      :fsize 2251
      :lastmodtime '(22379 7886 318416 866000)
      :unmatched-syntax nil)
    (semanticdb-table "company-ispell.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [877 895])
            ("cl-lib" include nil nil [896 913])
            ("ispell" include nil nil [914 931])
            ("company-ispell" customgroup (:user-visible-flag t) nil [933 1017])
            ("company-ispell-dictionary" variable nil nil [1019 1240])
            ("company-ispell-available" variable (:default-value (quote unknown)) nil [1242 1284])
            ("defalias" code nil nil [1286 1409])
            ("company-ispell-available" function nil nil [1411 1773])
            ("company-ispell" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [1790 2502])
            ("company-ispell" package nil nil [2504 2529]))          
      :file "company-ispell.el"
      :pointmax 2562
      :fsize 2561
      :lastmodtime '(22379 7886 490416 872000)
      :unmatched-syntax nil)
    (semanticdb-table "company-semantic.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [881 899])
            ("company-template" include nil nil [900 927])
            ("cl-lib" include nil nil [928 945])
            ("semantic-idle-summary-function" variable nil nil [947 986])
            ("declare-function" code nil nil [987 1052])
            ("declare-function" code nil nil [1053 1123])
            ("declare-function" code nil nil [1124 1200])
            ("declare-function" code nil nil [1201 1279])
            ("declare-function" code nil nil [1280 1332])
            ("declare-function" code nil nil [1333 1384])
            ("declare-function" code nil nil [1385 1437])
            ("declare-function" code nil nil [1438 1491])
            ("declare-function" code nil nil [1492 1539])
            ("declare-function" code nil nil [1540 1606])
            ("company-semantic" customgroup (:user-visible-flag t) nil [1608 1696])
            ("company-semantic-metadata-function" variable (:default-value (quote company-semantic-summary-and-doc)) nil [1698 1858])
            ("company-semantic-begin-after-member-access" variable (:default-value t) nil [1860 2231])
            ("company-semantic-insert-arguments" variable (:default-value t) nil [2233 2413])
            ("company-semantic-modes" variable (:default-value (quote (c-mode c++-mode jde-mode java-mode))) nil [2415 2484])
            ("defvar-local" code nil nil [2486 2569])
            ("company-semantic-documentation-for-tag" function (:arguments ("tag")) nil [2571 2772])
            ("company-semantic-doc-or-summary" function (:arguments ("tag")) nil [2774 3018])
            ("company-semantic-summary-and-doc" function (:arguments ("tag")) nil [3020 3496])
            ("company-semantic-doc-buffer" function (:arguments ("tag")) nil [3498 3748])
            ("company-semantic-completions" function (:arguments ("prefix")) nil [3750 4089])
            ("company-semantic-completions-raw" function (:arguments ("prefix")) nil [4091 4420])
            ("company-semantic-annotation" function (:arguments ("argument" "tags")) nil [4422 4776])
            ("company-semantic--prefix" function nil nil [4778 4940])
            ("company-semantic" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [4957 6731])
            ("company-semantic" package nil nil [6733 6760]))          
      :file "company-semantic.el"
      :pointmax 6795
      :fsize 6794
      :lastmodtime '(22379 7885 846416 850000)
      :unmatched-syntax nil)
    (semanticdb-table "company-xcode.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [877 895])
            ("cl-lib" include nil nil [896 913])
            ("company-xcode" customgroup (:user-visible-flag t) nil [915 1004])
            ("company-xcode-xcodeindex-executable" variable (:default-value (executable-find "xcodeindex")) nil [1006 1137])
            ("company-xcode-tags" variable nil nil [1139 1170])
            ("company-xcode-reset" function (:user-visible-flag t) nil [1172 1277])
            ("company-xcode-types" variable (:default-value (quote ("Class" "Constant" "Enum" "Macro" "Modeled Class" "Structure" "Type" "Union" "Function"))) nil [1279 2248])
            ("defvar-local" code nil nil [2250 2295])
            ("company-xcode-fetch" function (:arguments ("project-bundle")) nil [2379 3245])
            ("company-xcode-find-project" function nil nil [3247 3679])
            ("company-xcode-tags" function nil nil [3681 4084])
            ("company-xcode" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [4100 4681])
            ("company-xcode" package nil nil [4684 4708]))          
      :file "company-xcode.el"
      :pointmax 4740
      :fsize 4739
      :lastmodtime '(22379 7886 422416 870000)
      :unmatched-syntax nil)
    (semanticdb-table "company-css.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [894 912])
            ("cl-lib" include nil nil [913 930])
            ("declare-function" code nil nil [932 1002])
            ("company-css-property-alist" variable
               (:constant-flag t
                :default-value (quote (("azimuth" angle "left-side" "far-left" "left" "center-left" "center" "center-right" "right" "far-right" "right-side" "behind" "leftwards" "rightwards") ("background" background-color background-image background-repeat background-attachment background-position background-clip background-origin background-size) ("background-attachment" "scroll" "fixed") ("background-color" color "transparent") ("background-image" uri "none") ("background-position" percentage length "left" "center" "right" percentage length "top" "center" "bottom" "left" "center" "right" "top" "center" "bottom") ("background-repeat" "repeat" "repeat-x" "repeat-y" "no-repeat") ("border" border-width border-style border-color) ("border-bottom" border) ("border-bottom-color" border-color) ("border-bottom-style" border-style) ("border-bottom-width" border-width) ("border-collapse" "collapse" "separate") ("border-color" color "transparent") ("border-left" border) ("border-left-color" border-color) ("border-left-style" border-style) ("border-left-width" border-width) ("border-right" border) ("border-right-color" border-color) ("border-right-style" border-style) ("border-right-width" border-width) ("border-spacing" length length) ("border-style" border-style) ("border-top" border) ("border-top-color" border-color) ("border-top-style" border-style) ("border-top-width" border-width) ("border-width" border-width) ("bottom" length percentage "auto") ("caption-side" "top" "bottom") ("clear" "none" "left" "right" "both") ("clip" shape "auto") ("color" color) ("content" "normal" "none" string uri counter "attr()" "open-quote" "close-quote" "no-open-quote" "no-close-quote") ("counter-increment" identifier integer "none") ("counter-reset" identifier integer "none") ("cue" cue-before cue-after) ("cue-after" uri "none") ("cue-before" uri "none") ("cursor" uri "*" "auto" "crosshair" "default" "pointer" "move" "e-resize" "ne-resize" "nw-resize" "n-resize" "se-resize" "sw-resize" "s-resize" "w-resize" "text" "wait" "help" "progress") ("direction" "ltr" "rtl") ("display" "inline" "block" "list-item" "run-in" "inline-block" "table" "inline-table" "table-row-group" "table-header-group" "table-footer-group" "table-row" "table-column-group" "table-column" "table-cell" "table-caption" "none") ("elevation" angle "below" "level" "above" "higher" "lower") ("empty-cells" "show" "hide") ("float" "left" "right" "none") ("font" font-style font-weight font-size "/" line-height font-family "caption" "icon" "menu" "message-box" "small-caption" "status-bar" "normal" "small-caps" font-stretch) ("font-family" family-name generic-family) ("font-size" absolute-size relative-size length percentage) ("font-style" "normal" "italic" "oblique") ("font-weight" "normal" "bold" "bolder" "lighter" "100" "200" "300" "400" "500" "600" "700" "800" "900") ("height" length percentage "auto") ("left" length percentage "auto") ("letter-spacing" "normal" length) ("line-height" "normal" number length percentage) ("list-style" list-style-type list-style-position list-style-image) ("list-style-image" uri "none") ("list-style-position" "inside" "outside") ("list-style-type" "disc" "circle" "square" "decimal" "decimal-leading-zero" "lower-roman" "upper-roman" "lower-greek" "lower-latin" "upper-latin" "armenian" "georgian" "lower-alpha" "upper-alpha" "none") ("margin" margin-width) ("margin-bottom" margin-width) ("margin-left" margin-width) ("margin-right" margin-width) ("margin-top" margin-width) ("max-height" length percentage "none") ("max-width" length percentage "none") ("min-height" length percentage) ("min-width" length percentage) ("orphans" integer) ("outline" outline-color outline-style outline-width) ("outline-color" color "invert") ("outline-style" border-style) ("outline-width" border-width) ("overflow" "visible" "hidden" "scroll" "auto" "no-display" "no-content") ("padding" padding-width) ("padding-bottom" padding-width) ("padding-left" padding-width) ("padding-right" padding-width) ("padding-top" padding-width) ("page-break-after" "auto" "always" "avoid" "left" "right") ("page-break-before" "auto" "always" "avoid" "left" "right") ("page-break-inside" "avoid" "auto") ("pause" time percentage) ("pause-after" time percentage) ("pause-before" time percentage) ("pitch" frequency "x-low" "low" "medium" "high" "x-high") ("pitch-range" number) ("play-during" uri "mix" "repeat" "auto" "none") ("position" "static" "relative" "absolute" "fixed") ("quotes" string string "none") ("richness" number) ("right" length percentage "auto") ("speak" "normal" "none" "spell-out") ("speak-header" "once" "always") ("speak-numeral" "digits" "continuous") ("speak-punctuation" "code" "none") ("speech-rate" number "x-slow" "slow" "medium" "fast" "x-fast" "faster" "slower") ("stress" number) ("table-layout" "auto" "fixed") ("text-align" "left" "right" "center" "justify") ("text-indent" length percentage) ("text-transform" "capitalize" "uppercase" "lowercase" "none") ("top" length percentage "auto") ("unicode-bidi" "normal" "embed" "bidi-override") ("vertical-align" "baseline" "sub" "super" "top" "text-top" "middle" "bottom" "text-bottom" percentage length) ("visibility" "visible" "hidden" "collapse") ("voice-family" specific-voice generic-voice "*" specific-voice generic-voice) ("volume" number percentage "silent" "x-soft" "soft" "medium" "loud" "x-loud") ("white-space" "normal" "pre" "nowrap" "pre-wrap" "pre-line") ("widows" integer) ("width" length percentage "auto") ("word-spacing" "normal" length) ("z-index" "auto" integer) ("align-content" align-stretch "space-between" "space-around") ("align-items" align-stretch "baseline") ("align-self" align-items "auto") ("animation" animation-name animation-duration animation-timing-function animation-delay animation-iteration-count animation-direction animation-fill-mode) ("animation-delay" time) ("animation-direction" "normal" "reverse" "alternate" "alternate-reverse") ("animation-duration" time) ("animation-fill-mode" "none" "forwards" "backwards" "both") ("animation-iteration-count" integer "infinite") ("animation-name" "none") ("animation-play-state" "paused" "running") ("animation-timing-function" transition-timing-function "step-start" "step-end" "steps(,)") ("backface-visibility" "visible" "hidden") ("background-clip" background-origin) ("background-origin" "border-box" "padding-box" "content-box") ("background-size" length percentage "auto" "cover" "contain") ("border-image" border-image-outset border-image-repeat border-image-source border-image-slice border-image-width) ("border-image-outset" length) ("border-image-repeat" "stretch" "repeat" "round" "space") ("border-image-source" uri "none") ("border-image-slice" length) ("border-image-width" length percentage) ("border-radius" length) ("border-top-left-radius" length) ("border-top-right-radius" length) ("border-bottom-left-radius" length) ("border-bottom-right-radius" length) ("box-decoration-break" "slice" "clone") ("box-shadow" length color) ("box-sizing" "content-box" "border-box") ("break-after" "auto" "always" "avoid" "left" "right" "page" "column" "avoid-page" "avoid-column") ("break-before" break-after) ("break-inside" "avoid" "auto") ("columns" column-width column-count) ("column-count" integer) ("column-fill" "auto" "balance") ("column-gap" length "normal") ("column-rule" column-rule-width column-rule-style column-rule-color) ("column-rule-color" color) ("column-rule-style" border-style) ("column-rule-width" border-width) ("column-span" "all" "none") ("column-width" length "auto") ("filter" url "blur()" "brightness()" "contrast()" "drop-shadow()" "grayscale()" "hue-rotate()" "invert()" "opacity()" "saturate()" "sepia()") ("flex" flex-grow flex-shrink flex-basis) ("flex-basis" percentage length "auto") ("flex-direction" "row" "row-reverse" "column" "column-reverse") ("flex-flow" flex-direction flex-wrap) ("flex-grow" number) ("flex-shrink" number) ("flex-wrap" "nowrap" "wrap" "wrap-reverse") ("font-feature-setting" normal string number) ("font-kerning" "auto" "normal" "none") ("font-language-override" "normal" string) ("font-size-adjust" "none" number) ("font-stretch" "normal" "ultra-condensed" "extra-condensed" "condensed" "semi-condensed" "semi-expanded" "expanded" "extra-expanded" "ultra-expanded") ("font-synthesis" "none" "weight" "style") ("font-variant" font-variant-alternates font-variant-caps font-variant-east-asian font-variant-ligatures font-variant-numeric font-variant-position) ("font-variant-alternates" "normal" "historical-forms" "stylistic()" "styleset()" "character-variant()" "swash()" "ornaments()" "annotation()") ("font-variant-caps" "normal" "small-caps" "all-small-caps" "petite-caps" "all-petite-caps" "unicase" "titling-caps") ("font-variant-east-asian" "jis78" "jis83" "jis90" "jis04" "simplified" "traditional" "full-width" "proportional-width" "ruby") ("font-variant-ligatures" "normal" "none" "common-ligatures" "no-common-ligatures" "discretionary-ligatures" "no-discretionary-ligatures" "historical-ligatures" "no-historical-ligatures" "contextual" "no-contextual") ("font-variant-numeric" "normal" "ordinal" "slashed-zero" "lining-nums" "oldstyle-nums" "proportional-nums" "tabular-nums" "diagonal-fractions" "stacked-fractions") ("font-variant-position" "normal" "sub" "super") ("hyphens" "none" "manual" "auto") ("justify-content" align-common "space-between" "space-around") ("line-break" "auto" "loose" "normal" "strict") ("marquee-direction" "forward" "reverse") ("marquee-play-count" integer "infinite") ("marquee-speed" "slow" "normal" "fast") ("marquee-style" "scroll" "slide" "alternate") ("opacity" number) ("order" number) ("outline-offset" length) ("overflow-x" overflow) ("overflow-y" overflow) ("overflow-style" "auto" "marquee-line" "marquee-block") ("overflow-wrap" "normal" "break-word") ("perspective" "none" length) ("perspective-origin" percentage length "left" "center" "right" "top" "bottom") ("resize" "none" "both" "horizontal" "vertical") ("tab-size" integer length) ("text-align-last" "auto" "start" "end" "left" "right" "center" "justify") ("text-decoration" text-decoration-color text-decoration-line text-decoration-style) ("text-decoration-color" color) ("text-decoration-line" "none" "underline" "overline" "line-through" "blink") ("text-decoration-style" "solid" "double" "dotted" "dashed" "wavy") ("text-overflow" "clip" "ellipsis") ("text-shadow" color length) ("text-underline-position" "auto" "under" "left" "right") ("transform" "matrix(,,,,,)" "translate(,)" "translateX()" "translateY()" "scale()" "scaleX()" "scaleY()" "rotate()" "skewX()" "skewY()" "none") ("transform-origin" perspective-origin) ("transform-style" "flat" "preserve-3d") ("transition" transition-property transition-duration transition-timing-function transition-delay) ("transition-delay" time) ("transition-duration" time) ("transition-timing-function" "ease" "linear" "ease-in" "ease-out" "ease-in-out" "cubic-bezier(,,,)") ("transition-property" "none" "all" identifier) ("word-wrap" overflow-wrap) ("word-break" "normal" "break-all" "keep-all"))))
                nil [1004 13299])
            ("company-css-value-classes" variable
               (:constant-flag t
                :default-value (quote ((absolute-size "xx-small" "x-small" "small" "medium" "large" "x-large" "xx-large") (align-common "flex-start" "flex-end" "center") (align-stretch align-common "stretch") (border-style "none" "hidden" "dotted" "dashed" "solid" "double" "groove" "ridge" "inset" "outset") (border-width "thick" "medium" "thin") (color "aqua" "black" "blue" "fuchsia" "gray" "green" "lime" "maroon" "navy" "olive" "orange" "purple" "red" "silver" "teal" "white" "yellow") (counter "counter(,)") (family-name "Courier" "Helvetica" "Times") (generic-family "serif" "sans-serif" "cursive" "fantasy" "monospace") (generic-voice "male" "female" "child") (margin-width "auto") (relative-size "larger" "smaller") (shape "rect(,,,)") (uri "url()"))))
                nil [13301 14244])
            ("company-css-html-tags" variable
               (:constant-flag t
                :default-value (quote ("a" "abbr" "acronym" "address" "applet" "area" "b" "base" "basefont" "bdo" "big" "blockquote" "body" "br" "button" "caption" "center" "cite" "code" "col" "colgroup" "dd" "del" "dfn" "dir" "div" "dl" "dt" "em" "fieldset" "font" "form" "frame" "frameset" "h1" "h2" "h3" "h4" "h5" "h6" "head" "hr" "html" "i" "iframe" "img" "input" "ins" "isindex" "kbd" "label" "legend" "li" "link" "map" "menu" "meta" "noframes" "noscript" "object" "ol" "optgroup" "option" "p" "param" "pre" "q" "s" "samp" "script" "select" "small" "span" "strike" "strong" "style" "sub" "sup" "table" "tbody" "td" "textarea" "tfoot" "th" "thead" "title" "tr" "tt" "u" "ul" "var" "section" "article" "aside" "header" "footer" "nav" "figure" "figcaption" "time" "mark" "main")))
                nil [14407 15289])
            ("company-css-pseudo-classes" variable
               (:constant-flag t
                :default-value (quote ("active" "after" "before" "first" "first-child" "first-letter" "first-line" "focus" "hover" "lang" "left" "link" "right" "visited")))
                nil [15291 15528])
            ("company-css-property-cache" variable
               (:constant-flag t
                :default-value (make-hash-table :size 115 :test (quote equal)))
                nil [15530 15608])
            ("company-css-property-values" function (:arguments ("attribute")) nil [15610 16463])
            ("company-css-braces-syntax-table" variable
               (:constant-flag t
                :default-value (let ((table (make-syntax-table))) (setf (aref table 123) (quote (4 . 125))) (setf (aref table 125) (quote (5 . 123))) table))
                nil [16488 16702])
            ("company-css-inside-braces-p" function nil nil [16704 16951])
            ("company-css-tag-regexp" variable
               (:constant-flag t
                :default-value (concat "\\(?:\\`\\|}\\)[[:space:]]*" "\\(?:" "\\(?:#\\|\\_<[[:alpha:]]\\)[[:alnum:]-#]*\\(?:\\[[^]]*\\]\\)?" "\\(?:[[:space:]]+\\|[[:space:]]*[+,>][[:space:]]*\\)" "\\)*" "\\(\\(?:#\\|\\_<[[:alpha:]]\\)\\(?:[[:alnum:]-#]*\\_>\\)?\\_>\\|\\)" "\\="))
                nil [16962 17432])
            ("company-css-pseudo-regexp" variable
               (:constant-flag t
                :default-value (concat "\\(?:\\`\\|}\\)[[:space:]]*" "\\(?:" "\\(?:#\\|\\_<[[:alpha:]]\\)[[:alnum:]-#]*\\(?:\\[[^]]*\\]\\)?" "\\(?:[[:space:]]+\\|[[:space:]]*[+,>][[:space:]]*\\)" "\\)*" "\\(?:\\(?:\\#\\|\\_<[[:alpha:]]\\)[[:alnum:]-#]*\\):" "\\([[:alpha:]-]+\\_>\\|\\)\\_>\\="))
                nil [17448 17947])
            ("company-css-grab-property" function nil nil [17965 18182])
            ("company-css-property-value-regexp" variable
               (:constant-flag t
                :default-value "\\_<\\([[:alpha:]-]+\\):\\(?:[^{};]*[[:space:]]+\\)?\\([^{};]*\\_>\\|\\)\\=")
                nil [18195 18363])
            ("company-css" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [18380 19583])
            ("company-css" package nil nil [19585 19607]))          
      :file "company-css.el"
      :pointmax 19637
      :fsize 19636
      :lastmodtime '(22379 7885 982416 855000)
      :unmatched-syntax nil)
    (semanticdb-table "company-abbrev.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [870 888])
            ("cl-lib" include nil nil [889 906])
            ("abbrev" include nil nil [907 924])
            ("company-abbrev-insert" function (:arguments ("match")) nil [926 1025])
            ("company-abbrev" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [1042 1564])
            ("company-abbrev" package nil nil [1566 1591]))          
      :file "company-abbrev.el"
      :pointmax 1624
      :fsize 1623
      :lastmodtime '(22379 7886 454416 871000)
      :unmatched-syntax nil)
    (semanticdb-table "company-files.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [878 896])
            ("cl-lib" include nil nil [897 914])
            ("company-files--directory-files" function (:arguments ("dir" "prefix")) nil [916 1296])
            ("company-files--regexps" variable (:default-value (let* ((root (if (eq system-type (quote windows-nt)) "[a-zA-Z]:/" "/")) (begin (concat "\\(?:\\.\\{1,2\\}/\\|~/\\|" root "\\)"))) (list (concat "\"\\(" begin "[^\"
]*\\)") (concat "'\\(" begin "[^'
]*\\)") (concat "\\(?:[ 	]\\|^\\)\\(" begin "[^ 	
]*\\)")))) nil [1298 1658])
            ("company-files--grab-existing-name" function nil nil [1660 2120])
            ("company-files--connected-p" function (:arguments ("file")) nil [2122 2230])
            ("company-files--trailing-slash-p" function (:arguments ("file")) nil [2232 2509])
            ("company-files--completion-cache" variable nil nil [2511 2555])
            ("company-files--complete" function (:arguments ("prefix")) nil [2557 4029])
            ("company-file--keys-match-p" function (:arguments ("new" "old")) nil [4031 4156])
            ("company-files" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [4173 4871])
            ("company-files" package nil nil [4873 4897]))          
      :file "company-files.el"
      :pointmax 4929
      :fsize 4928
      :lastmodtime '(22379 7886 186416 862000)
      :unmatched-syntax nil)
    (semanticdb-table "company-nxml.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [871 889])
            ("cl-lib" include nil nil [890 907])
            ("rng-open-elements" variable nil nil [909 935])
            ("rng-validate-mode" variable nil nil [936 962])
            ("rng-in-attribute-regex" variable nil nil [963 994])
            ("rng-in-attribute-value-regex" variable nil nil [995 1032])
            ("declare-function" code nil nil [1033 1082])
            ("declare-function" code nil nil [1083 1148])
            ("declare-function" code nil nil [1149 1209])
            ("declare-function" code nil nil [1210 1275])
            ("declare-function" code nil nil [1276 1342])
            ("declare-function" code nil nil [1343 1406])
            ("company-nxml-token-regexp" variable
               (:constant-flag t
                :default-value "\\(?:[_[:alpha:]][-._[:alnum:]]*\\_>\\)")
                nil [1408 1488])
            ("company-nxml-in-attribute-value-regexp" variable (:default-value (replace-regexp-in-string "w" company-nxml-token-regexp "<w\\(?::w\\)?\\(?:[ 	
]+w\\(?::w\\)?[ 	
]*=[ 	
]*\\(?:\"[^\"]*\"\\|'[^']*'\\)\\)*[ 	
]+\\(w\\(:w\\)?\\)[ 	
]*=[ 	
]*\\(\"\\([^\"]*\\>\\)\\|'\\([^']*\\>\\)\\)\\=" t t)) nil [1490 1803])
            ("company-nxml-in-tag-name-regexp" variable (:default-value (replace-regexp-in-string "w" company-nxml-token-regexp "<\\(/?w\\(?::w?\\)?\\)?\\=" t t)) nil [1805 1965])
            ("company-nxml-all-completions" function (:arguments ("prefix" "alist")) nil [1967 2447])
            ("company-nxml-prepared" function (:arguments ("body")) nil [2449 2691])
            ("company-nxml-tag" function (:arguments ("command" "arg" "ignored")) nil [2693 3086])
            ("company-nxml-attribute" function (:arguments ("command" "arg" "ignored")) nil [3088 3667])
            ("company-nxml-attribute-value" function (:arguments ("command" "arg" "ignored")) nil [3669 4780])
            ("company-nxml" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [4797 5583])
            ("company-nxml" package nil nil [5585 5608]))          
      :file "company-nxml.el"
      :pointmax 5639
      :fsize 5638
      :lastmodtime '(22379 7886 354416 868000)
      :unmatched-syntax nil)
    (semanticdb-table "company-oddmuse.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [877 895])
            ("cl-lib" include nil nil [896 913])
            ("yaoddmuse" include nil nil [933 959])
            ("oddmuse" include nil nil [980 1004])
            ("company-oddmuse-link-regexp" variable (:default-value "\\(\\<[A-Z][[:alnum:]]*\\>\\)\\|\\[\\[\\([[:alnum:]]+\\>\\|\\)") nil [1007 1110])
            ("company-oddmuse-get-page-table" function nil nil [1112 1391])
            ("company-oddmuse" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [1408 1985])
            ("company-oddmuse" package nil nil [1987 2013]))          
      :file "company-oddmuse.el"
      :pointmax 2047
      :fsize 2046
      :lastmodtime '(22379 7885 914416 852000)
      :unmatched-syntax '((close-paren 1004 . 1005) (symbol 962 . 979) (open-paren 961 . 962) (close-paren 959 . 960) (symbol 915 . 932) (open-paren 914 . 915))))
  :file "!home!lyra!.emacs.d!elpa!company-20160619.1916!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
