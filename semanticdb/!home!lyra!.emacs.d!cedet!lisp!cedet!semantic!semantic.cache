;; Object semantic/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semantic/"
  :tables
  (list
    (semanticdb-table "idle.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1508 1527])
            ("semantic/ctxt" include nil nil [1528 1552])
            ("semantic/format" include nil nil [1553 1579])
            ("semantic/tag" include nil nil [1580 1603])
            ("timer" include nil nil [1604 1620])
            ("working" include nil nil [1621 1639])
            ("semantic/find" include nil nil [1705 1729])
            ("eldoc-last-message" variable nil nil [1732 1759])
            ("declare-function" code nil nil [1760 1800])
            ("declare-function" code nil nil [1801 1871])
            ("declare-function" code nil nil [1872 1943])
            ("declare-function" code nil nil [1944 2020])
            ("declare-function" code nil nil [2021 2092])
            ("declare-function" code nil nil [2093 2153])
            ("declare-function" code nil nil [2154 2236])
            ("declare-function" code nil nil [2237 2328])
            ("declare-function" code nil nil [2329 2388])
            ("declare-function" code nil nil [2389 2449])
            ("declare-function" code nil nil [2450 2524])
            ("semantic-idle-scheduler-timer" variable nil nil [2568 2657])
            ("semantic-idle-scheduler-work-timer" variable nil nil [2659 2775])
            ("semantic-idle-scheduler-verbose-flag" variable nil nil [2777 2981])
            ("semantic-idle-scheduler-idle-time" variable (:default-value 1) nil [2983 3490])
            ("semantic-idle-scheduler-work-idle-time" variable (:default-value 60) nil [3492 4038])
            ("semantic-idle-scheduler-setup-timers" function nil nil [4040 4650])
            ("semantic-idle-scheduler-kill-timer" function nil nil [4652 4873])
            ("semantic-idle-scheduler-mode-hook" variable nil nil [5023 5177])
            ("semantic-idle-scheduler-mode" variable nil nil [5179 5345])
            ("make-variable-buffer-local" code nil nil [5346 5404])
            ("semantic-idle-scheduler-max-buffer-size" variable (:user-visible-flag t) nil [5406 5674])
            ("semantic-idle-scheduler-enabled-p" function nil nil [5676 6514])
            ("define-minor-mode" code nil nil [6531 7524])
            ("semantic-add-minor-mode" code nil nil [7526 7612])
            ("semantic-idle-scheduler-queue" variable nil nil [7693 7975])
            ("semantic-idle-scheduler-add" function (:arguments ("function")) nil [7977 8128])
            ("semantic-idle-scheduler-remove" function (:arguments ("function")) nil [8130 8318])
            ("semantic-idle-core-handler" function nil nil [8341 11152])
            ("semantic-debug-idle-function" function (:user-visible-flag t) nil [11154 11337])
            ("semantic-idle-scheduler-function" function nil nil [11339 11700])
            ("semantic-idle-work-parse-neighboring-files-flag" variable (:user-visible-flag t) nil [11830 12061])
            ("semantic-idle-work-update-headers-flag" variable (:user-visible-flag t) nil [12063 12330])
            ("semantic-idle-work-for-one-buffer" function (:arguments ("buffer")) nil [12332 13360])
            ("semantic-idle-work-core-handler" function nil nil [13362 15448])
            ("semantic-debug-idle-work-function" function (:user-visible-flag t) nil [15450 15648])
            ("semantic-idle-scheduler-work-function" function nil nil [15650 16206])
            ("semantic-idle-scheduler-work-parse-neighboring-files" function nil nil [16208 17234])
            ("semantic-before-idle-scheduler-reparse-hook" variable nil nil [17377 17619])
            ("semantic-after-idle-scheduler-reparse-hook" variable nil nil [17621 17857])
            ("semantic-varalias-obsolete" code nil nil [17859 17992])
            ("semantic-varalias-obsolete" code nil nil [17993 18124])
            ("semantic-idle-scheduler-refresh-tags" function nil nil [18126 20974])
            ("define-semantic-idle-service" function (:arguments ("name" "doc" "forms")) nil [21353 23445])
            ("put" code nil nil [23446 23505])
            ("add-hook" code nil nil [23506 23648])
            ("semantic-idle-truncate-long-summaries" variable (:default-value t) nil [23713 23918])
            ("semantic-idle-summary-function" variable (:default-value (quote semantic-format-tag-summarize-with-file)) nil [23920 24296])
            ("semantic-idle-summary-find-current-symbol-tag" function (:arguments ("sym")) nil [24298 24749])
            ("semantic-idle-summary-current-symbol-info-brutish" function nil nil [24751 25130])
            ("semantic-idle-summary-current-symbol-keyword" function nil nil [25132 25458])
            ("semantic-idle-summary-current-symbol-info-context" function nil nil [25460 25853])
            ("semantic-idle-summary-current-symbol-info-default" function nil nil [25855 26353])
            ("semantic-idle-summary-out-of-context-faces" variable (:default-value (quote (font-lock-comment-face font-lock-string-face font-lock-doc-string-face font-lock-doc-face))) nil [26355 27189])
            ("semantic-idle-summary-useful-context-p" function nil nil [27191 27573])
            ("semantic-idle-summary-current-symbol-info" function (:overloadable t) nil [27575 27710])
            ("make-obsolete-overload" code nil nil [27712 27870])
            ("semantic-idle-summary-mode-hook" variable nil nil [27872 28004])
            ("semantic-idle-summary-idle-function" function nil nil [28006 29214])
            ("define-minor-mode" code nil nil [29216 30177])
            ("semantic-idle-summary-refresh-echo-area" function nil nil [30179 30550])
            ("semantic-add-minor-mode" code nil nil [30552 30608])
            ("define-minor-mode" code nil nil [30610 31082])
            ("semantic-idle-symbol-highlight" variable
               (:default-value (quote ((t :inherit region)))
                :type "face")
                nil [31297 31433])
            ("semantic-idle-symbol-highlight-face" variable (:default-value (quote semantic-idle-symbol-highlight)) nil [31434 31556])
            ("if" code nil nil [31557 31878])
            ("semantic-idle-symbol-maybe-highlight" function (:arguments ("tag")) nil [31880 33776])
            ("define-semantic-idle-service" code nil nil [33778 35089])
            ("define-minor-mode" code nil nil [35108 35856])
            ("semantic-idle-completions-end-of-symbol-p" function nil nil [36103 36339])
            ("semantic-idle-completion-list-default" function nil nil [36341 37043])
            ("define-semantic-idle-service" code nil nil [37045 37934])
            ("semantic-idle-breadcrumbs-display-function" variable (:default-value (function semantic-idle-breadcrumbs--display-in-header-line)) nil [38101 38818])
            ("semantic-idle-breadcrumbs-format-tag-list-function" variable (:default-value (function semantic-idle-breadcrumbs--format-linear)) nil [38820 39763])
            ("semantic-idle-breadcrumbs-format-tag-function" variable (:default-value (function semantic-format-tag-abbreviate)) nil [39765 40135])
            ("semantic-idle-breadcrumbs-separator" variable (:default-value (quote mode-specific)) nil [40137 40535])
            ("semantic-idle-breadcrumbs-header-line-prefix" variable (:default-value semantic-stickyfunc-indent-string) nil [40537 40807])
            ("semantic-idle-breadcrumbs-popup-menu" variable nil nil [40809 40941])
            ("semantic-idle-breadcrumbs--popup-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [40943 41363])
            ("semantic-idle-breadcrumbs--tag-function" function (:arguments ("function")) nil [41365 41908])
            ("semantic-idle-breadcrumbs-popup-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [header-line mouse-1] (semantic-idle-breadcrumbs--tag-function semantic-go-to-tag)) (define-key map [header-line mouse-3] (quote semantic-idle-breadcrumbs--popup-menu)) map)) nil [41953 42389])
            ("easy-menu-define" code nil nil [42391 44310])
            ("define-semantic-idle-service" code nil nil [44312 44854])
            ("semantic-idle-breadcrumbs--display-in-header-line" function (:arguments ("tag-list")) nil [44856 45712])
            ("semantic-idle-breadcrumbs--display-in-mode-line" function (:arguments ("tag-list")) nil [45714 46255])
            ("semantic-idle-breadcrumbs--format-tag-list" function (:arguments ("tag-list" "max-length")) nil [46257 46972])
            ("semantic-idle-breadcrumbs--format-linear" function (:arguments ("tag-list" "max-length")) nil [46974 47750])
            ("semantic-idle-breadcrumbs--format-innermost-first" function (:arguments ("tag-list" "max-length")) nil [47752 49045])
            ("semantic-idle-breadcrumbs--format-tag" function (:arguments ("tag" "format-function")) nil [49047 49775])
            ("semantic/idle" package nil nil [49778 49802]))          
      :file "idle.el"
      :pointmax 49955
      :fsize 49954
      :lastmodtime '(22436 31432 266422 179000)
      :unmatched-syntax '((close-paren 1729 . 1730) (symbol 1687 . 1704) (open-paren 1686 . 1687)))
    (semanticdb-table "ctxt.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1169 1188])
            ("semantic-command-separation-character" variable (:default-value ";") nil [1200 1350])
            ("make-variable-buffer-local" code nil nil [1351 1418])
            ("semantic-function-argument-separation-character" variable (:default-value ",") nil [1420 1577])
            ("make-variable-buffer-local" code nil nil [1578 1655])
            ("declare-function" code nil nil [1755 1819])
            ("semantic-up-context" function
               (:overloadable t
                :arguments ("point" "bounds-type"))
                nil [1821 2663])
            ("semantic-up-context-default" function nil nil [2665 2982])
            ("semantic-beginning-of-context" function
               (:overloadable t
                :arguments ("point"))
                nil [2984 3212])
            ("semantic-beginning-of-context-default" function (:arguments ("point")) nil [3214 3491])
            ("semantic-end-of-context" function
               (:overloadable t
                :arguments ("point"))
                nil [3493 3749])
            ("semantic-end-of-context-default" function (:arguments ("point")) nil [3751 4540])
            ("semantic-narrow-to-context" function nil nil [4542 4867])
            ("semantic-with-buffer-narrowed-to-context" function (:arguments ("body")) nil [4869 5067])
            ("put" code nil nil [5068 5139])
            ("add-hook" code nil nil [5140 5266])
            ("semantic-get-local-variables" function
               (:overloadable t
                :arguments ("point"))
                nil [5294 5738])
            ("semantic-get-local-variables-default" function nil nil [5740 7748])
            ("semantic-get-local-arguments" function
               (:overloadable t
                :arguments ("point"))
                nil [7750 9129])
            ("semantic-get-local-arguments-default" function nil nil [9131 9437])
            ("semantic-get-all-local-variables" function
               (:overloadable t
                :arguments ("point"))
                nil [9439 9777])
            ("semantic-get-all-local-variables-default" function (:arguments ("point")) nil [9779 10345])
            ("semantic-end-of-command" function (:overloadable t) nil [10860 11019])
            ("semantic-end-of-command-default" function nil nil [11021 11593])
            ("semantic-beginning-of-command" function (:overloadable t) nil [11595 11766])
            ("semantic-beginning-of-command-default" function nil nil [11768 12447])
            ("semantic-point-at-beginning-of-command" function nil nil [12450 12623])
            ("semantic-point-at-end-of-command" function nil nil [12625 12786])
            ("semantic-narrow-to-command" function nil nil [12788 12985])
            ("semantic-with-buffer-narrowed-to-command" function (:arguments ("body")) nil [12987 13185])
            ("put" code nil nil [13186 13257])
            ("add-hook" code nil nil [13258 13384])
            ("semantic-ctxt-end-of-symbol" function
               (:overloadable t
                :arguments ("point"))
                nil [13386 13700])
            ("semantic-ctxt-end-of-symbol-default" function (:arguments ("point")) nil [13702 15883])
            ("semantic-ctxt-current-symbol" function
               (:overloadable t
                :arguments ("point"))
                nil [15885 16345])
            ("semantic-ctxt-current-symbol-default" function (:arguments ("point")) nil [16347 18730])
            ("semantic-ctxt-current-symbol-and-bounds" function
               (:overloadable t
                :arguments ("point"))
                nil [18733 18997])
            ("semantic-ctxt-current-symbol-and-bounds-default" function (:arguments ("point")) nil [18999 19919])
            ("semantic-ctxt-current-assignment" function
               (:overloadable t
                :arguments ("point"))
                nil [19921 20156])
            ("semantic-ctxt-current-assignment-default" function (:arguments ("point")) nil [20158 20907])
            ("semantic-ctxt-current-function" function
               (:overloadable t
                :arguments ("point"))
                nil [20909 21235])
            ("semantic-ctxt-current-function-default" function (:arguments ("point")) nil [21237 21686])
            ("semantic-ctxt-current-argument" function
               (:overloadable t
                :arguments ("point"))
                nil [21688 21840])
            ("semantic-ctxt-current-argument-default" function (:arguments ("point")) nil [21842 22587])
            ("semantic-ctxt-current-thing" function nil nil [22589 23042])
            ("semantic-ctxt-current-class-list" function
               (:overloadable t
                :arguments ("point"))
                nil [23044 23398])
            ("semantic-ctxt-current-class-list-default" function (:arguments ("point")) nil [23400 23901])
            ("semantic-ctxt-current-mode" function
               (:overloadable t
                :arguments ("point"))
                nil [23918 24197])
            ("semantic-ctxt-current-mode-default" function (:arguments ("point")) nil [24199 24431])
            ("semantic-ctxt-scoped-types" function
               (:overloadable t
                :arguments ("point"))
                nil [24603 24901])
            ("semantic-ctxt-scoped-types-default" function (:arguments ("point")) nil [24903 25127])
            ("semantic-ctxt-imported-packages" function
               (:overloadable t
                :arguments ("point"))
                nil [25129 25521])
            ("semantic/ctxt" package nil nil [25523 25547]))          
      :file "ctxt.el"
      :pointmax 25700
      :fsize 25699
      :lastmodtime '(22436 31432 258422 178000)
      :unmatched-syntax nil)
    (semanticdb-table "format.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("font-lock" include nil nil [1322 1342])
            ("semantic" include nil nil [1344 1363])
            ("semantic/tag-ls" include nil nil [1364 1390])
            ("ezimage" include nil nil [1391 1409])
            ("semantic/find" include nil nil [1430 1454])
            ("semantic-format-tag-functions" variable (:default-value (quote (semantic-format-tag-name semantic-format-tag-canonical-name semantic-format-tag-abbreviate semantic-format-tag-summarize semantic-format-tag-summarize-with-file semantic-format-tag-short-doc semantic-format-tag-prototype semantic-format-tag-concise-prototype semantic-format-tag-uml-abbreviate semantic-format-tag-uml-prototype semantic-format-tag-uml-concise-prototype semantic-format-tag-prin1))) nil [1547 2407])
            ("semantic-format-tag-custom-list" variable (:default-value (append (quote (radio)) (mapcar (lambda (f) (list (quote const) f)) semantic-format-tag-functions) (quote (function)))) nil [2409 2700])
            ("semantic-format-use-images-flag" variable (:default-value ezimage-use-images) nil [2702 2923])
            ("semantic-function-argument-separator" variable (:default-value ",") nil [2925 3040])
            ("make-variable-buffer-local" code nil nil [3041 3107])
            ("semantic-format-parent-separator" variable (:default-value "::") nil [3109 3234])
            ("make-variable-buffer-local" code nil nil [3235 3297])
            ("semantic-format-face-alist" variable (:default-value (\` ((function . font-lock-function-name-face) (variable . font-lock-variable-name-face) (type . font-lock-type-face) (include \, (if (featurep (quote xemacs)) (quote font-lock-preprocessor-face) (quote font-lock-constant-face))) (package \, (if (featurep (quote xemacs)) (quote font-lock-preprocessor-face) (quote font-lock-constant-face))) (label . font-lock-string-face) (comment . font-lock-comment-face) (keyword . font-lock-keyword-face) (abstract . italic) (static . underline) (documentation . font-lock-doc-face)))) nil [3299 4455])
            ("semantic--format-colorize-text" function (:arguments ("text" "face-class")) nil [4485 4922])
            ("semantic--format-colorize-merge-text" function (:arguments ("precoloredtext" "face-class")) nil [4924 5782])
            ("semantic--format-tag-arguments" function (:arguments ("args" "formatter" "color")) nil [5810 6430])
            ("semantic-format-tag-type" function
               (:overloadable t
                :arguments ("tag" "color"))
                nil [6446 6638])
            ("semantic-format-tag-type-default" function (:arguments ("tag" "color")) nil [6640 7363])
            ("semantic-format-tag-prin1" function (:arguments ("tag" "parent" "color")) nil [7405 7577])
            ("semantic-format-tag-name-from-anything" function (:arguments ("anything" "parent" "color" "colorhint")) nil [7579 8770])
            ("semantic-format-tag-name" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [8787 9105])
            ("semantic-format-tag-name-default" function (:arguments ("tag" "parent" "color")) nil [9107 9673])
            ("declare-function" code nil nil [9675 9732])
            ("semantic--format-tag-parent-tree" function (:arguments ("tag" "parent")) nil [9734 10850])
            ("semantic-format-tag-canonical-name" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [10852 11208])
            ("semantic-format-tag-canonical-name-default" function (:arguments ("tag" "parent" "color")) nil [11210 12323])
            ("semantic-format-tag-abbreviate" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [12325 12710])
            ("semantic-format-tag-abbreviate-default" function (:arguments ("tag" "parent" "color")) nil [12712 13648])
            ("semantic-format-tag-summarize" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [13665 13934])
            ("semantic-format-tag-summarize-default" function (:arguments ("tag" "parent" "color")) nil [13936 14591])
            ("semantic-format-tag-summarize-with-file" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [14593 14899])
            ("semantic-format-tag-summarize-with-file-default" function (:arguments ("tag" "parent" "color")) nil [14901 15748])
            ("semantic-format-tag-short-doc" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [15750 16055])
            ("declare-function" code nil nil [16057 16121])
            ("semantic-format-tag-short-doc-default" function (:arguments ("tag" "parent" "color")) nil [16123 17370])
            ("semantic-format-tag-prototype" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [17415 17818])
            ("semantic-format-tag-prototype-default" function (:arguments ("tag" "parent" "color")) nil [17820 19607])
            ("semantic-format-tag-concise-prototype" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [19624 19902])
            ("semantic-format-tag-concise-prototype-default" function (:arguments ("tag" "parent" "color")) nil [19904 20989])
            ("semantic-uml-colon-string" variable
               (:user-visible-flag t
                :default-value " : ")
                nil [21017 21268])
            ("semantic-uml-no-protection-string" variable (:user-visible-flag t) nil [21270 21471])
            ("semantic--format-uml-post-colorize" function (:arguments ("text" "tag" "parent")) nil [21473 21877])
            ("semantic-uml-attribute-string" function (:arguments ("tag" "parent")) nil [21879 22188])
            ("semantic-format-tag-protection-image-alist" variable (:default-value (quote (("+" . ezimage-unlock) ("#" . ezimage-key) ("-" . ezimage-lock)))) nil [22190 22381])
            ("semantic-format-tag-protection-symbol-to-string-assoc-list" variable (:default-value (quote ((public . "+") (protected . "#") (private . "-")))) nil [22383 22662])
            ("semantic-format-tag-uml-protection-to-string" function
               (:overloadable t
                :arguments ("protection-symbol" "color"))
                nil [22664 23142])
            ("semantic-format-tag-uml-protection-to-string-default" function (:arguments ("protection-symbol" "color")) nil [23144 23898])
            ("semantic-format-tag-uml-protection" function (:arguments ("tag" "parent" "color")) nil [23900 24195])
            ("semantic--format-tag-uml-type" function (:arguments ("tag" "color")) nil [24197 24462])
            ("semantic-format-tag-uml-abbreviate" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [24464 24744])
            ("semantic-format-tag-uml-abbreviate-default" function (:arguments ("tag" "parent" "color")) nil [24746 25378])
            ("semantic-format-tag-uml-prototype" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [25380 25656])
            ("semantic-format-tag-uml-prototype-default" function (:arguments ("tag" "parent" "color")) nil [25658 26517])
            ("semantic-format-tag-uml-concise-prototype" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [26519 26811])
            ("semantic-format-tag-uml-concise-prototype-default" function (:arguments ("tag" "parent" "color")) nil [26813 27421])
            ("semantic/format" package nil nil [27423 27449]))          
      :file "format.el"
      :pointmax 27606
      :fsize 27605
      :lastmodtime '(22436 31432 262422 179000)
      :unmatched-syntax '((close-paren 1454 . 1455) (symbol 1412 . 1429) (open-paren 1411 . 1412) (close-paren 1342 . 1343) (symbol 1304 . 1321) (open-paren 1303 . 1304)))
    (semanticdb-table "tag.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/fw" include nil nil [1789 1811])
            ("semantic/lex" include nil nil [1812 1835])
            ("declare-function" code nil nil [1837 1906])
            ("declare-function" code nil nil [1907 1956])
            ("declare-function" code nil nil [1957 2016])
            ("declare-function" code nil nil [2017 2076])
            ("semantic-tag-version" variable
               (:constant-flag t
                :default-value "2.0")
                nil [2078 2172])
            ("semantic-tag-incompatible-version" variable
               (:constant-flag t
                :default-value "1.0")
                nil [2174 2418])
            ("semantic-tag-name" function (:arguments ("tag")) nil [3179 3493])
            ("semantic-tag-class" function (:arguments ("tag")) nil [3495 4243])
            ("semantic-tag-attributes" function (:arguments ("tag")) nil [4245 4419])
            ("semantic-tag-properties" function (:arguments ("tag")) nil [4421 4594])
            ("semantic-tag-overlay" function (:arguments ("tag")) nil [4596 4873])
            ("semantic--tag-overlay-cdr" function (:arguments ("tag")) nil [4875 5037])
            ("semantic--tag-set-overlay" function (:arguments ("tag" "overlay")) nil [5039 5226])
            ("semantic-tag-start" function (:arguments ("tag")) nil [5228 5426])
            ("semantic-tag-end" function (:arguments ("tag")) nil [5428 5620])
            ("semantic-tag-bounds" function (:arguments ("tag")) nil [5622 5782])
            ("semantic-tag-set-bounds" function (:arguments ("tag" "start" "end")) nil [5784 6070])
            ("semantic-tag-in-buffer-p" function (:arguments ("tag")) nil [6072 6427])
            ("semantic--tag-get-property" function (:arguments ("tag" "property")) nil [6429 6699])
            ("semantic-tag-buffer" function (:arguments ("tag")) nil [6701 7282])
            ("semantic-tag-mode" function (:arguments ("tag")) nil [7284 8192])
            ("semantic--tag-attributes-cdr" function (:arguments ("tag")) nil [8194 8362])
            ("semantic-tag-put-attribute" function (:arguments ("tag" "attribute" "value")) nil [8364 8888])
            ("semantic-tag-put-attribute-no-side-effect" function (:arguments ("tag" "attribute" "value")) nil [8890 9520])
            ("semantic-tag-get-attribute" function (:arguments ("tag" "attribute")) nil [9522 9811])
            ("semantic--tag-properties-cdr" function (:arguments ("tag")) nil [9859 10027])
            ("semantic--tag-put-property" function (:arguments ("tag" "property" "value")) nil [10029 10503])
            ("semantic--tag-put-property-no-side-effect" function (:arguments ("tag" "property" "value")) nil [10505 11169])
            ("semantic-tag-file-name" function (:arguments ("tag")) nil [11171 11603])
            ("semantic-tag-p" function (:arguments ("tag")) nil [11637 12058])
            ("semantic-tag-of-class-p" function (:arguments ("tag" "class")) nil [12060 12189])
            ("semantic-tag-type-members" function (:arguments ("tag")) nil [12191 12379])
            ("semantic-tag-type" function (:arguments ("tag")) nil [12381 12706])
            ("semantic-tag-with-position-p" function (:arguments ("tag")) nil [12708 12971])
            ("semantic-equivalent-tag-p" function (:arguments ("tag1" "tag2")) nil [12973 13656])
            ("semantic-tag-similar-with-subtags-p" function (:arguments ("tag1" "tag2" "ignorable-attributes")) nil [13659 14056])
            ("semantic-tag-of-type-p" function (:arguments ("tag" "type")) nil [14058 15385])
            ("semantic-tag-type-compound-p" function (:arguments ("tag")) nil [15387 15834])
            ("semantic-tag-faux-p" function (:arguments ("tag")) nil [15836 16201])
            ("semantic-tag-make-plist" function (:arguments ("args")) nil [16262 16988])
            ("semantic-tag" function (:arguments ("name" "class" "attributes")) nil [16990 17359])
            ("semantic-tag-new-variable" function (:arguments ("name" "type" "default-value" "attributes")) nil [17361 17875])
            ("semantic-tag-new-function" function (:arguments ("name" "type" "arg-list" "attributes")) nil [17877 18374])
            ("semantic-tag-new-type" function (:arguments ("name" "type" "members" "parents" "attributes")) nil [18376 19446])
            ("semantic-tag-new-include" function (:arguments ("name" "system-flag" "attributes")) nil [19448 19899])
            ("semantic-tag-new-package" function (:arguments ("name" "detail" "attributes")) nil [19901 20287])
            ("semantic-tag-new-code" function (:arguments ("name" "detail" "attributes")) nil [20289 20616])
            ("semantic-tag-set-faux" function (:arguments ("tag")) nil [20618 20854])
            ("semantic-tag-set-name" function (:arguments ("tag" "name")) nil [20856 20945])
            ("semantic-create-tag-proxy" function (:arguments ("function" "data")) nil [21362 21910])
            ("semantic-tag-set-proxy" function (:arguments ("tag" "proxy" "filename")) nil [21912 22372])
            ("semantic-tag-resolve-proxy" function (:arguments ("tag")) nil [22374 22772])
            ("semantic-tag-clone" function (:arguments ("tag" "name")) nil [22807 23223])
            ("semantic-tag-copy" function (:arguments ("tag" "name" "keep-file")) nil [23225 24728])
            ("semantic--tag-copy-properties" function (:arguments ("tag1" "tag2")) nil [24986 25313])
            ("semantic-tag-deep-copy-one-tag" function (:arguments ("tag" "filter")) nil [25334 26254])
            ("semantic--tag-deep-copy-attributes" function (:arguments ("attrs" "filter")) nil [26256 26852])
            ("semantic--tag-deep-copy-value" function (:arguments ("value" "filter")) nil [26854 27460])
            ("semantic--tag-deep-copy-tag-list" function (:arguments ("tags" "filter")) nil [27462 28064])
            ("semantic-tag-modifiers" function (:arguments ("tag")) nil [28110 28262])
            ("semantic-tag-docstring" function (:arguments ("tag" "buffer")) nil [28264 29056])
            ("semantic-tag-named-parent" function (:arguments ("tag")) nil [29107 29408])
            ("semantic-tag-type-superclasses" function (:arguments ("tag")) nil [29436 30065])
            ("semantic--tag-find-parent-by-name" function (:arguments ("name" "supers")) nil [30067 30673])
            ("semantic-tag-type-superclass-protection" function (:arguments ("tag" "parentstring")) nil [30675 31781])
            ("semantic-tag-type-interfaces" function (:arguments ("tag")) nil [31783 31988])
            ("semantic-tag-function-arguments" function (:arguments ("tag")) nil [32022 32226])
            ("semantic-tag-function-throws" function (:arguments ("tag")) nil [32228 32431])
            ("semantic-tag-function-parent" function (:arguments ("tag")) nil [32433 32735])
            ("semantic-tag-function-destructor-p" function (:arguments ("tag")) nil [32737 32954])
            ("semantic-tag-function-constructor-p" function (:arguments ("tag")) nil [32956 33177])
            ("semantic-tag-variable-default" function (:arguments ("tag")) nil [33211 33425])
            ("semantic-tag-variable-constant-p" function (:arguments ("tag")) nil [33427 33648])
            ("semantic-tag-include-system-p" function (:arguments ("tag")) nil [33681 33900])
            ("semantic-tag-include-filename" function
               (:overloadable t
                :arguments ("tag"))
                nil [33902 34334])
            ("semantic-tag-include-filename-default" function (:arguments ("tag")) nil [34336 34487])
            ("semantic-tag-code-detail" function (:arguments ("tag")) nil [34517 34707])
            ("semantic-tag-new-alias" function (:arguments ("name" "meta-tag-class" "value" "attributes")) nil [34738 35171])
            ("semantic-tag-alias-class" function (:arguments ("tag")) nil [35173 35306])
            ("semantic-tag-alias-definition" function
               (:overloadable t
                :arguments ("tag"))
                nil [35308 35726])
            ("semantic-tag-components" function
               (:overloadable t
                :arguments ("tag"))
                nil [35792 36076])
            ("semantic-tag-components-default" function (:arguments ("tag")) nil [36078 36394])
            ("semantic-tag-components-with-overlays" function
               (:overloadable t
                :arguments ("tag"))
                nil [36396 36927])
            ("semantic-tag-components-with-overlays-default" function (:arguments ("tag")) nil [36929 38125])
            ("semantic-tag-children-compatibility" function (:arguments ("tag" "positiononly")) nil [38127 38523])
            ("semantic-narrow-to-tag" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [38618 38890])
            ("semantic-with-buffer-narrowed-to-current-tag" function (:arguments ("body")) nil [38892 39109])
            ("put" code nil nil [39110 39185])
            ("add-hook" code nil nil [39186 39316])
            ("semantic-with-buffer-narrowed-to-tag" function (:arguments ("tag" "body")) nil [39318 39488])
            ("put" code nil nil [39489 39556])
            ("add-hook" code nil nil [39557 39679])
            ("semantic--tag-hook-value" variable nil nil [40028 40061])
            ("semantic-tag-add-hook" function (:arguments ("tag" "hook" "function" "append")) nil [40063 40677])
            ("semantic-tag-remove-hook" function (:arguments ("tag" "hook" "function")) nil [40679 41252])
            ("semantic--tag-run-hooks" function (:arguments ("tag" "hook" "args")) nil [41254 41809])
            ("semantic--tag-unlink-list-from-buffer" function (:arguments ("tags")) nil [41966 42177])
            ("semantic--tag-unlink-from-buffer" function (:arguments ("tag")) nil [42179 42840])
            ("semantic--tag-link-list-to-buffer" function (:arguments ("tags")) nil [42842 43043])
            ("semantic--tag-link-to-buffer" function (:arguments ("tag")) nil [43045 43844])
            ("semantic--tag-unlink-cache-from-buffer" function nil nil [43846 44124])
            ("semantic--buffer-cache" variable nil nil [44126 44157])
            ("semantic--tag-link-cache-to-buffer" function nil nil [44159 44723])
            ("semantic--tag-expanded-p" function (:arguments ("tag")) nil [44939 45395])
            ("semantic-tag-expand-function" variable nil nil [45397 45909])
            ("make-variable-buffer-local" code nil nil [45910 45968])
            ("semantic--tag-expand" function (:arguments ("tag")) nil [45970 47704])
            ("semantic-foreign-tag-invalid" function (:arguments ("tag")) nil [47726 47882])
            ("semantic-foreign-tag-p" function (:arguments ("tag")) nil [47884 48167])
            ("semantic-foreign-tag-check" function (:arguments ("tag")) nil [48169 48356])
            ("semantic-foreign-tag" function (:arguments ("tag")) nil [48358 49173])
            ("semantic-obtain-foreign-tag" function
               (:overloadable t
                :arguments ("tag"))
                nil [49225 49465])
            ("semantic-insert-foreign-tag-default" function (:arguments ("foreign-tag")) nil [49467 49840])
            ("semantic-insert-foreign-tag" function
               (:overloadable t
                :arguments ("foreign-tag"))
                nil [49842 50201])
            ("semantic-insert-foreign-tag" function
               (:parent "log-edit-mode"
                :override-function-flag t
                :arguments ("foreign-tag"))
                nil [50230 50429])
            ("semantic-insert-foreign-tag" function
               (:parent "change-log-mode"
                :override-function-flag t
                :arguments ("foreign-tag"))
                nil [50431 50632])
            ("semantic-token-version" variable
               (:constant-flag t
                :default-value semantic-tag-version)
                nil [50656 50712])
            ("semantic-token-incompatible-version" variable
               (:constant-flag t
                :default-value semantic-tag-incompatible-version)
                nil [50713 50795])
            ("semantic-token-type-parent" function (:arguments ("tag")) nil [50797 51230])
            ("make-obsolete" code nil nil [51232 51374])
            ("semantic-alias-obsolete" code nil nil [51376 51488])
            ("semantic-varalias-obsolete" code nil nil [51490 51612])
            ("semantic/tag" package nil nil [51614 51637]))          
      :file "tag.el"
      :pointmax 51788
      :fsize 51787
      :lastmodtime '(22436 31432 278422 179000)
      :unmatched-syntax nil)
    (semanticdb-table "find.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1633 1652])
            ("semantic/tag" include nil nil [1653 1676])
            ("declare-function" code nil nil [1678 1739])
            ("declare-function" code nil nil [1740 1809])
            ("semantic-find-tag-by-overlay" function (:arguments ("positionormarker" "buffer")) nil [2000 3093])
            ("semantic-find-tag-by-overlay-in-region" function (:arguments ("start" "end" "buffer")) nil [3110 3762])
            ("semantic-find-tag-by-overlay-next" function (:arguments ("start" "buffer")) nil [3779 4779])
            ("semantic-find-tag-by-overlay-prev" function (:arguments ("start" "buffer")) nil [4796 5856])
            ("semantic-find-tag-parent-by-overlay" function (:arguments ("tag")) nil [5873 6322])
            ("semantic-current-tag" function nil nil [6339 6581])
            ("semantic-current-tag-parent" function nil nil [6598 6868])
            ("semantic-current-tag-of-class" function (:arguments ("class")) nil [6870 7290])
            ("semantic--find-tags-by-function" function (:arguments ("predicate" "table")) nil [8362 8996])
            ("semantic--find-tags-by-macro" function (:arguments ("form" "table")) nil [9198 9604])
            ("semantic-find-first-tag-by-name" function (:arguments ("name" "table")) nil [9647 9956])
            ("semantic-find-tags-by-name" function (:arguments ("name" "table")) nil [9958 10287])
            ("semantic-find-tags-for-completion" function (:arguments ("prefix" "table")) nil [10289 10861])
            ("semantic-find-tags-by-name-regexp" function (:arguments ("regexp" "table")) nil [10863 11350])
            ("semantic-find-tags-by-class" function (:arguments ("class" "table")) nil [11352 11701])
            ("semantic-filter-tags-by-class" function (:arguments ("class" "table")) nil [11703 12087])
            ("semantic-find-tags-by-type" function (:arguments ("type" "table")) nil [12089 12528])
            ("semantic-find-tags-of-compound-type" function (:arguments ("table")) nil [12530 12868])
            ("semantic-find-tags-by-scope-protection" function
               (:overloadable t
                :arguments ("scopeprotection" "parent" "table"))
                nil [12885 13651])
            ("semantic-find-tags-by-scope-protection-default" function (:arguments ("scopeprotection" "parent" "table")) nil [13653 14538])
            ("semantic-find-tags-included" function
               (:overloadable t
                :arguments ("table"))
                nil [14555 14752])
            ("semantic-find-tags-included-default" function (:arguments ("table")) nil [14754 15036])
            ("semantic-deep-find-tags-by-name" function (:arguments ("name" "table")) nil [15057 15412])
            ("semantic-deep-find-tags-for-completion" function (:arguments ("prefix" "table")) nil [15414 15796])
            ("semantic-deep-find-tags-by-name-regexp" function (:arguments ("regexp" "table")) nil [15798 16325])
            ("semantic-find-tags-external-children-of-type" function (:arguments ("type" "table")) nil [16351 16725])
            ("semantic-find-tags-subclasses-of-type" function (:arguments ("type" "table")) nil [16727 17217])
            ("semantic-brute-find-first-tag-by-name" function (:arguments ("name" "streamorbuffer" "search-parts" "search-include")) nil [17661 18552])
            ("semantic-brute-find-tag-by-class" function (:arguments ("class" "streamorbuffer" "search-parts" "search-includes")) nil [18554 19104])
            ("semantic-brute-find-tag-standard" function (:arguments ("streamorbuffer" "search-parts" "search-includes")) nil [19106 19582])
            ("semantic-brute-find-tag-by-type" function (:arguments ("type" "streamorbuffer" "search-parts" "search-includes")) nil [19584 20242])
            ("semantic-brute-find-tag-by-type-regexp" function (:arguments ("regexp" "streamorbuffer" "search-parts" "search-includes")) nil [20244 20954])
            ("semantic-brute-find-tag-by-name-regexp" function (:arguments ("regex" "streamorbuffer" "search-parts" "search-includes")) nil [20956 21384])
            ("semantic-brute-find-tag-by-property" function (:arguments ("property" "value" "streamorbuffer" "search-parts" "search-includes")) nil [21386 21836])
            ("semantic-brute-find-tag-by-attribute" function (:arguments ("attr" "streamorbuffer" "search-parts" "search-includes")) nil [21838 22297])
            ("semantic-brute-find-tag-by-attribute-value" function (:arguments ("attr" "value" "streamorbuffer" "search-parts" "search-includes")) nil [22299 22842])
            ("semantic-brute-find-tag-by-function" function (:arguments ("function" "streamorbuffer" "search-parts" "search-includes")) nil [22844 24264])
            ("semantic-brute-find-first-tag-by-function" function (:arguments ("function" "streamorbuffer" "search-parts" "search-includes")) nil [24266 25097])
            ("semantic-brute-find-tag-by-position" function (:arguments ("position" "streamorbuffer" "nomedian")) nil [25163 26304])
            ("semantic-brute-find-innermost-tag-by-position" function (:arguments ("position" "streamorbuffer" "nomedian")) nil [26306 27384])
            ("semantic/find" package nil nil [27386 27410]))          
      :file "find.el"
      :pointmax 27563
      :fsize 27562
      :lastmodtime '(22436 31432 262422 179000)
      :unmatched-syntax nil)
    (semanticdb-table "lex.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/fw" include nil nil [7518 7540])
            ("semantic-lex-map-symbols" function (:arguments ("fun" "table" "property")) nil [7590 8001])
            ("semantic-flex-keywords-obarray" variable nil nil [8180 8357])
            ("make-variable-buffer-local" code nil nil [8358 8418])
            ("semantic-lex-keyword-invalid" function (:arguments ("name")) nil [8420 8580])
            ("semantic-lex-keyword-symbol" function (:arguments ("name")) nil [8582 8811])
            ("semantic-lex-keyword-p" function (:arguments ("name")) nil [8813 9028])
            ("semantic-lex-keyword-set" function (:arguments ("name" "value")) nil [9030 9199])
            ("semantic-lex-keyword-value" function (:arguments ("name")) nil [9201 9484])
            ("semantic-lex-keyword-put" function (:arguments ("name" "property" "value")) nil [9486 9748])
            ("semantic-lex-keyword-get" function (:arguments ("name" "property")) nil [9750 10000])
            ("semantic-lex-make-keyword-table" function (:arguments ("specs" "propspecs")) nil [10002 10937])
            ("semantic-lex-map-keywords" function (:arguments ("fun" "property")) nil [10939 11260])
            ("semantic-lex-keywords" function (:arguments ("property")) nil [11262 11574])
            ("semantic-lex-unterminated-syntax-end-function" variable nil nil [11599 11653])
            ("semantic-lex-analysis-bounds" variable nil nil [11654 11691])
            ("semantic-lex-end-point" variable nil nil [11692 11723])
            ("semantic-lex-token-bounds" function (:arguments ("token")) nil [11725 11945])
            ("semantic-lex-token-start" function (:arguments ("token")) nil [11947 12133])
            ("semantic-lex-token-end" function (:arguments ("token")) nil [12135 12317])
            ("semantic-lex-unterminated-syntax-detected" function (:arguments ("syntax")) nil [12319 12848])
            ("semantic-lex-types-obarray" variable nil nil [13104 13200])
            ("make-variable-buffer-local" code nil nil [13201 13257])
            ("semantic-lex-type-invalid" function (:arguments ("type")) nil [13259 13418])
            ("semantic-lex-type-symbol" function (:arguments ("type")) nil [13420 13630])
            ("semantic-lex-type-p" function (:arguments ("type")) nil [13632 13802])
            ("semantic-lex-type-set" function (:arguments ("type" "value")) nil [13804 13970])
            ("semantic-lex-type-value" function (:arguments ("type" "noerror")) nil [13972 14348])
            ("semantic-lex-type-put" function (:arguments ("type" "property" "value" "add")) nil [14350 14836])
            ("semantic-lex-type-get" function (:arguments ("type" "property" "noerror")) nil [14838 15236])
            ("semantic-lex-preset-default-types" function nil nil [15238 16105])
            ("semantic-lex-make-type-table" function (:arguments ("specs" "propspecs")) nil [16107 17873])
            ("semantic-lex-map-types" function (:arguments ("fun" "property")) nil [17875 18186])
            ("semantic-lex-types" function (:arguments ("property")) nil [18188 18488])
            ("semantic-lex-analyzer" variable (:default-value (quote semantic-flex)) nil [18535 18736])
            ("make-variable-buffer-local" code nil nil [18737 18788])
            ("semantic-lex-tokens" variable (:default-value (quote ((bol) (charquote) (close-paren) (comment) (newline) (open-paren) (punctuation) (semantic-list) (string) (symbol) (whitespace)))) nil [18790 22131])
            ("semantic-lex-syntax-modifications" variable nil nil [22133 22504])
            ("make-variable-buffer-local" code nil nil [22505 22568])
            ("semantic-lex-syntax-table" variable nil nil [22570 22697])
            ("make-variable-buffer-local" code nil nil [22698 22753])
            ("semantic-lex-comment-regex" variable nil nil [22755 22997])
            ("make-variable-buffer-local" code nil nil [22998 23054])
            ("semantic-lex-number-expression" variable (:default-value (eval-when-compile (concat "\\(" "\\<[0-9]+[.][0-9]+\\([eE][-+]?[0-9]+\\)?[fFdD]?\\>" "\\|" "\\<[0-9]+[.][eE][-+]?[0-9]+[fFdD]?\\>" "\\|" "\\<[0-9]+[.][fFdD]\\>" "\\|" "\\<[0-9]+[.]" "\\|" "[.][0-9]+\\([eE][-+]?[0-9]+\\)?[fFdD]?\\>" "\\|" "\\<[0-9]+[eE][-+]?[0-9]+[fFdD]?\\>" "\\|" "\\<0[xX][0-9a-fA-F]+[lL]?\\>" "\\|" "\\<[0-9]+[lLfFdD]?\\>" "\\)"))) nil [23056 24330])
            ("make-variable-buffer-local" code nil nil [24331 24391])
            ("semantic-lex-depth" variable nil nil [24393 24499])
            ("make-variable-buffer-local" code nil nil [24500 24548])
            ("semantic-lex-unterminated-syntax-end-function" variable (:default-value (lambda (syntax syntax-start lex-end) lex-end)) nil [24550 25122])
            ("declare-function" code nil nil [25158 25209])
            ("semantic-lex-test" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25211 25747])
            ("semantic-lex-debug" variable nil nil [25749 25832])
            ("semantic-lex-debug" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25834 26313])
            ("semantic-lex-highlight-token" function (:arguments ("token")) nil [26315 26628])
            ("semantic-lex-one-token" function (:arguments ("analyzers")) nil [27016 27272])
            ("semantic-lex-end-point" variable nil nil [27274 27365])
            ("semantic-lex-current-depth" variable nil nil [27367 27466])
            ("semantic-lex-maximum-depth" variable nil nil [27468 27582])
            ("semantic-lex-token-stream" variable nil nil [27584 27670])
            ("semantic-lex-analysis-bounds" variable nil nil [27672 27753])
            ("semantic-lex-block-streams" variable nil nil [27755 27985])
            ("define-obsolete-variable-alias" code nil nil [27987 28084])
            ("semantic-lex-reset-functions" variable nil nil [28085 28333])
            ("semantic-lex-block-stack" variable nil nil [28362 28399])
            ("semantic-lex-debug-break" function (:arguments ("token")) nil [28489 28887])
            ("define-lex" function (:arguments ("name" "doc" "analyzers")) nil [28889 32364])
            ("semantic-lex-token" function (:arguments ("symbol" "start" "end" "str")) nil [32564 33314])
            ("semantic-lex-token-p" function (:arguments ("thing")) nil [33316 33662])
            ("semantic-lex-token-with-text-p" function (:arguments ("thing")) nil [33664 33976])
            ("semantic-lex-token-without-text-p" function (:arguments ("thing")) nil [33978 34262])
            ("semantic-lex-expand-block-specs" function (:arguments ("specs")) nil [34283 35475])
            ("semantic-lex-push-token" function (:arguments ("token" "blockspecs")) nil [35479 36313])
            ("semantic-lex-token-class" function (:arguments ("token")) nil [36315 36464])
            ("semantic-lex-token-text" function (:arguments ("token")) nil [36466 36784])
            ("semantic-lex-init" function nil nil [36786 37273])
            ("semantic-lex" function
               (:overloadable t
                :arguments ("start" "end" "depth" "length"))
                nil [37290 38125])
            ("semantic-lex-buffer" function (:arguments ("depth")) nil [38127 38307])
            ("semantic-lex-list" function (:arguments ("semlist" "depth")) nil [38309 38516])
            ("semantic-lex-start-block" function (:arguments ("syntax")) nil [38574 38957])
            ("semantic-lex-end-block" function (:arguments ("syntax")) nil [38959 41312])
            ("semantic-lex-debug-analyzers" variable nil nil [41597 41790])
            ("semantic-lex-unterminated-syntax-protection" function (:arguments ("syntax" "forms")) nil [41792 42519])
            ("put" code nil nil [42520 42599])
            ("define-lex-analyzer" function (:arguments ("name" "doc" "condition" "forms")) nil [42601 44769])
            ("define-lex-regex-analyzer" function (:arguments ("name" "doc" "regexp" "forms")) nil [44771 45092])
            ("define-lex-simple-regex-analyzer" function (:arguments ("name" "doc" "regexp" "toksym" "index" "forms")) nil [45094 45872])
            ("define-lex-block-analyzer" function (:arguments ("name" "doc" "spec1" "specs")) nil [45874 48108])
            ("define-lex-analyzer" code nil nil [48164 48371])
            ("define-lex-analyzer" code nil nil [48373 48913])
            ("define-lex-simple-regex-analyzer" code nil nil [48915 49045])
            ("define-lex-regex-analyzer" code nil nil [49047 49835])
            ("define-lex-regex-analyzer" code nil nil [49837 50105])
            ("define-lex-regex-analyzer" code nil nil [50107 50845])
            ("define-lex-regex-analyzer" code nil nil [50847 51109])
            ("define-lex-simple-regex-analyzer" code nil nil [51111 51333])
            ("define-lex-regex-analyzer" code nil nil [51335 51614])
            ("define-lex-simple-regex-analyzer" code nil nil [51616 51789])
            ("define-lex-simple-regex-analyzer" code nil nil [51791 51934])
            ("define-lex-analyzer" code nil nil [51936 53184])
            ("define-lex-regex-analyzer" code nil nil [53186 53880])
            ("define-lex-simple-regex-analyzer" code nil nil [53882 54079])
            ("define-lex-simple-regex-analyzer" code nil nil [54081 54279])
            ("define-lex-regex-analyzer" code nil nil [54281 54600])
            ("define-lex-regex-analyzer" code nil nil [54602 55256])
            ("define-lex-regex-analyzer" code nil nil [55258 55944])
            ("define-lex-regex-analyzer" code nil nil [55946 56622])
            ("semantic-comment-lexer" function (:lexical-analyzer-flag t) nil [56725 57075])
            ("semantic-simple-lexer" function (:lexical-analyzer-flag t) nil [57095 57598])
            ("define-lex-keyword-type-analyzer" function (:arguments ("name" "doc" "syntax")) nil [57760 58296])
            ("define-lex-sexp-type-analyzer" function (:arguments ("name" "doc" "syntax" "token")) nil [58298 58818])
            ("define-lex-regex-type-analyzer" function (:arguments ("name" "doc" "syntax" "matches" "default")) nil [58820 60076])
            ("define-lex-string-type-analyzer" function (:arguments ("name" "doc" "syntax" "matches" "default")) nil [60078 61655])
            ("define-lex-block-type-analyzer" function (:arguments ("name" "doc" "syntax" "matches")) nil [61657 65453])
            ("semantic-lex-catch-errors" function (:arguments ("symbol" "forms")) nil [65695 67311])
            ("put" code nil nil [67312 67368])
            ("add-hook" code nil nil [67403 68063])
            ("semantic-alias-obsolete" code nil nil [68157 68236])
            ("semantic-alias-obsolete" code nil nil [68237 68312])
            ("semantic-alias-obsolete" code nil nil [68313 68390])
            ("semantic-alias-obsolete" code nil nil [68391 68490])
            ("semantic-alias-obsolete" code nil nil [68491 68572])
            ("semantic-alias-obsolete" code nil nil [68573 68658])
            ("semantic-alias-obsolete" code nil nil [68659 68744])
            ("semantic-alias-obsolete" code nil nil [68745 68832])
            ("semantic-alias-obsolete" code nil nil [68833 68912])
            ("semantic-alias-obsolete" code nil nil [68913 68988])
            ("semantic-alias-obsolete" code nil nil [68989 69060])
            ("semantic-flex-tokens" variable (:default-value semantic-lex-tokens) nil [69283 69406])
            ("semantic-flex-unterminated-syntax-end-function" variable (:default-value (lambda (syntax syntax-start flex-end) flex-end)) nil [69408 69984])
            ("semantic-flex-extensions" variable nil nil [69986 70401])
            ("make-variable-buffer-local" code nil nil [70402 70456])
            ("semantic-flex-syntax-modifications" variable nil nil [70458 70830])
            ("make-variable-buffer-local" code nil nil [70831 70895])
            ("semantic-ignore-comments" variable (:default-value t) nil [70897 71068])
            ("make-variable-buffer-local" code nil nil [71069 71123])
            ("semantic-flex-enable-newlines" variable nil nil [71125 71343])
            ("make-variable-buffer-local" code nil nil [71344 71403])
            ("semantic-flex-enable-whitespace" variable nil nil [71405 71621])
            ("make-variable-buffer-local" code nil nil [71622 71683])
            ("semantic-flex-enable-bol" variable nil nil [71685 71904])
            ("make-variable-buffer-local" code nil nil [71905 71959])
            ("semantic-number-expression" variable (:default-value semantic-lex-number-expression) nil [71961 72078])
            ("make-variable-buffer-local" code nil nil [72079 72135])
            ("semantic-flex-depth" variable nil nil [72137 72245])
            ("make-variable-buffer-local" code nil nil [72246 72295])
            ("semantic-flex" function (:arguments ("start" "end" "depth" "length")) nil [72297 81519])
            ("semantic/lex" package nil nil [81521 81544]))          
      :file "lex.el"
      :pointmax 81695
      :fsize 81694
      :lastmodtime '(22436 31432 266422 179000)
      :unmatched-syntax '((close-paren 35476 . 35477) (symbol 34265 . 34281) (open-paren 34264 . 34265)))
    (semanticdb-table "fw.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("mode-local" include nil nil [1137 1158])
            ("eieio" include nil nil [1159 1175])
            ("load" code nil nil [1176 1217])
            ("defalias" code nil nil [5428 5491])
            ("defalias" code nil nil [5268 5372])
            ("defalias" code nil nil [5057 5165])
            ("defalias" code nil nil [4952 5053])
            ("if" code nil nil [1260 4947])
            ("semantic-delete-overlay-maybe" function (:arguments ("overlay")) nil [5497 5686])
            ("semantic-menu-item" function (:arguments ("item")) nil [5719 6220])
            ("semantic-cache-data-overlays" variable nil nil [6251 6340])
            ("semantic-cache-data-to-buffer" function (:arguments ("buffer" "start" "end" "value" "name" "lifespan")) nil [6342 7628])
            ("semantic-cache-data-post-command-hook" function nil nil [7630 8621])
            ("semantic-get-cache-data" function (:arguments ("name" "point")) nil [8623 9072])
            ("semantic-test-data-cache" function (:user-visible-flag t) nil [9074 9629])
            ("semantic-overload-symbol-from-function" function (:arguments ("name")) nil [9679 9943])
            ("semantic-alias-obsolete" function (:arguments ("oldfnalias" "newfn" "when")) nil [9945 10755])
            ("semantic-varalias-obsolete" function (:arguments ("oldvaralias" "newvar" "when")) nil [10757 11379])
            ("semantic-safe" function (:arguments ("format" "body")) nil [11404 12175])
            ("put" code nil nil [12176 12220])
            ("semantic-new-buffer-fcn-was-run" variable nil nil [12245 12352])
            ("make-variable-buffer-local" code nil nil [12353 12414])
            ("semantic-active-p" function nil nil [12416 12546])
            ("semantic-map-buffers" function (:arguments ("function")) nil [12548 12824])
            ("defalias" code nil nil [12826 12892])
            ("semantic-alias-obsolete" code nil nil [12894 13016])
            ("semantic-install-function-overrides" function (:arguments ("overrides" "transient" "mode")) nil [13018 14069])
            ("semantic-current-input-throw-symbol" variable nil nil [14103 14210])
            ("semantic--on-input-start-marker" variable nil nil [14211 14315])
            ("semantic-exit-on-input" function (:arguments ("symbol" "forms")) nil [14317 14829])
            ("put" code nil nil [14830 14883])
            ("semantic-throw-on-input" function (:arguments ("from")) nil [14885 15640])
            ("semantic-find-file-noselect" function (:arguments ("file" "nowarn" "rawfile" "wildcards")) nil [15681 17534])
            ("semanticdb-without-unloaded-file-searches" function (:arguments ("forms")) nil [17573 17863])
            ("put" code nil nil [17864 17936])
            ("semantic-fw-add-edebug-spec" function nil nil [20216 20307])
            ("add-hook" code nil nil [20309 20367])
            ("semantic/fw" package nil nil [20369 20391]))          
      :file "fw.el"
      :pointmax 20422
      :fsize 20421
      :lastmodtime '(22436 31432 262422 179000)
      :unmatched-syntax '((close-paren 5494 . 5495) (symbol 1241 . 1257) (open-paren 1240 . 1241)))
    (semanticdb-table "lex-spp.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [2259 2278])
            ("semantic/lex" include nil nil [2279 2302])
            ("declare-function" code nil nil [2304 2366])
            ("semantic-lex-spp-macro-symbol-obarray" variable nil nil [2378 2591])
            ("make-variable-buffer-local" code nil nil [2592 2659])
            ("semantic-lex-spp-project-macro-symbol-obarray" variable nil nil [2661 2865])
            ("make-variable-buffer-local" code nil nil [2866 2941])
            ("semantic-lex-spp-dynamic-macro-symbol-obarray" variable nil nil [2943 3228])
            ("make-variable-buffer-local" code nil nil [3229 3304])
            ("semantic-lex-spp-dynamic-macro-symbol-obarray-stack" variable nil nil [3306 3431])
            ("make-variable-buffer-local" code nil nil [3432 3513])
            ("semantic-lex-spp-expanded-macro-stack" variable nil nil [3515 3619])
            ("semantic-lex-with-macro-used" function (:arguments ("name" "body")) nil [3896 4314])
            ("put" code nil nil [4315 4374])
            ("add-hook" code nil nil [4376 4515])
            ("semantic-lex-spp-symbol" function (:arguments ("name")) nil [4742 5577])
            ("semantic-lex-spp-symbol-p" function (:arguments ("name")) nil [5579 5739])
            ("semantic-lex-spp-dynamic-map" function nil nil [5741 5976])
            ("semantic-lex-spp-dynamic-map-stack" function nil nil [5978 6231])
            ("semantic-lex-spp-value-valid-p" function (:arguments ("value")) nil [6233 6474])
            ("semantic-lex-spp-debug-symbol" variable nil nil [6476 6573])
            ("semantic-lex-spp-enable-debug-symbol" function
               (:user-visible-flag t
                :arguments ("sym"))
                nil [6575 6845])
            ("semantic-lex-spp-validate-value" function (:arguments ("name" "value")) nil [6847 7228])
            ("semantic-lex-spp-symbol-set" function (:arguments ("name" "value" "obarray-in")) nil [7230 7646])
            ("semantic-lex-spp-symbol-remove" function (:arguments ("name" "obarray")) nil [7648 7902])
            ("semantic-lex-spp-symbol-push" function (:arguments ("name" "value")) nil [7904 8603])
            ("semantic-lex-spp-symbol-pop" function (:arguments ("name")) nil [8605 9227])
            ("semantic-lex-spp-symbol-stream" function (:arguments ("name")) nil [9229 9414])
            ("semantic-lex-make-spp-table" function (:arguments ("specs")) nil [9416 10079])
            ("semantic-lex-spp-save-table" function nil nil [10081 10513])
            ("semantic-lex-spp-macros" function nil nil [10515 11268])
            ("semantic-lex-spp-set-dynamic-table" function (:arguments ("new-entries")) nil [11270 11551])
            ("semantic-lex-spp-reset-hook" function (:arguments ("start" "end")) nil [11553 11997])
            ("semantic-lex-spp-extract-regex-and-compare" function (:arguments ("analyzer" "value")) nil [12194 12549])
            ("semantic-lex-spp-simple-macro-to-macro-stream" function (:arguments ("val" "beg" "end" "argvalues")) nil [12551 14241])
            ("semantic-lex-spp-one-token-to-txt" function (:arguments ("tok" "blocktok")) nil [14763 16177])
            ("semantic-lex-spp-macro-with-args" function (:arguments ("val")) nil [16179 16410])
            ("semantic-lex-spp-token-macro-to-macro-stream" function (:arguments ("val" "beg" "end" "argvalues")) nil [16412 24632])
            ("semantic-lex-spp-symbol-merge" function (:arguments ("txt")) nil [24634 25292])
            ("semantic-lex-spp-find-closing-macro" function nil nil [25294 26153])
            ("semantic-lex-spp-get-overlay" function (:arguments ("point")) nil [26155 26464])
            ("semantic-lex-spp-merge-streams" function (:arguments ("raw-stream")) nil [26612 27558])
            ("semantic-lex-spp-macro-to-macro-stream" function (:arguments ("val" "beg" "end" "argvalues")) nil [27731 28703])
            ("semantic-lex-spp-anlyzer-do-replace" function (:arguments ("sym" "val" "beg" "end")) nil [28899 30165])
            ("semantic-lex-spp-replacements-enabled" variable (:default-value t) nil [30167 30329])
            ("semantic-lex-spp-analyzer-push-tokens-for-symbol" function (:arguments ("str" "beg" "end")) nil [30331 31897])
            ("define-lex-regex-analyzer" code nil nil [31899 32363])
            ("define-lex-regex-analyzer" code nil nil [32365 33615])
            ("semantic-lex-spp-first-token-arg-list" function (:arguments ("token")) nil [33866 34275])
            ("semantic-lex-spp-one-token-and-move-for-macro" function (:arguments ("max")) nil [34277 34720])
            ("semantic-lex-spp-stream-for-arglist" function (:arguments ("token")) nil [34722 36131])
            ("semantic-lex-spp-hack-depth" variable nil nil [36133 36247])
            ("semantic-lex-spp-lex-text-string" function (:arguments ("text")) nil [36249 38620])
            ("semantic-lex-spp-stream-for-macro" function (:arguments ("eos")) nil [40361 41028])
            ("define-lex-spp-macro-declaration-analyzer" function (:arguments ("name" "doc" "regexp" "tokidx" "valform")) nil [41030 42488])
            ("define-lex-spp-macro-undeclaration-analyzer" function (:arguments ("name" "doc" "regexp" "tokidx")) nil [42490 43317])
            ("semantic-lex-spp-use-headers-flag" variable (:user-visible-flag t) nil [43667 44006])
            ("semantic-lex-spp-merge-header" function (:arguments ("name")) nil [44008 44326])
            ("define-lex-spp-include-analyzer" function (:arguments ("name" "doc" "regexp" "tokidx" "valform")) nil [44328 46039])
            ("semantic-lex-spp-macro-max-length-to-save" variable
               (:user-visible-flag t
                :default-value 200)
                nil [46206 46326])
            ("semantic-lex-spp-table-write-slot-value" function (:arguments ("value")) nil [46343 47393])
            ("semantic-lex-spp-describe" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [47420 47990])
            ("add-hook" code nil nil [48015 48413])
            ("semantic/lex-spp" package nil nil [48415 48442]))          
      :file "lex-spp.el"
      :pointmax 48601
      :fsize 48600
      :lastmodtime '(22436 31432 266422 179000)
      :unmatched-syntax nil)
    (semanticdb-table "decorate.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1097 1116])
            ("pulse" include nil nil [1117 1133])
            ("semantic-highlight-tag" function (:arguments ("tag" "face")) nil [1170 1547])
            ("semantic-unhighlight-tag" function (:arguments ("tag")) nil [1549 1839])
            ("semantic-momentary-highlight-one-tag-line" function (:arguments ("tag" "face")) nil [1879 2216])
            ("semantic-momentary-highlight-tag" function (:arguments ("tag" "face")) nil [2257 2873])
            ("semantic-set-tag-face" function (:arguments ("tag" "face")) nil [2875 3028])
            ("semantic-set-tag-invisible" function (:arguments ("tag" "visible")) nil [3030 3263])
            ("semantic-tag-invisible-p" function (:arguments ("tag")) nil [3265 3406])
            ("semantic-set-tag-intangible" function (:arguments ("tag" "tangible")) nil [3408 3764])
            ("semantic-tag-intangible-p" function (:arguments ("tag")) nil [3766 4027])
            ("semantic-overlay-signal-read-only" function (:arguments ("overlay" "after" "start" "end" "len")) nil [4029 4493])
            ("semantic-set-tag-read-only" function (:arguments ("tag" "writable")) nil [4495 5114])
            ("semantic-tag-read-only-p" function (:arguments ("tag")) nil [5116 5490])
            ("semantic-tag-secondary-overlays" function (:arguments ("tag")) nil [5783 5938])
            ("semantic-tag-create-secondary-overlay" function (:arguments ("tag" "link-hook")) nil [5940 7119])
            ("semantic-tag-get-secondary-overlay" function (:arguments ("tag" "property")) nil [7121 7530])
            ("semantic-tag-delete-secondary-overlay" function (:arguments ("tag" "overlay-or-property")) nil [7532 8301])
            ("semantic--tag-unlink-copy-secondary-overlays" function (:arguments ("tag")) nil [8303 9106])
            ("semantic--tag-unlink-secondary-overlays" function (:arguments ("tag")) nil [9108 10116])
            ("semantic--tag-link-secondary-overlays" function (:arguments ("tag")) nil [10118 10486])
            ("semantic-set-tag-folded" function (:arguments ("tag" "folded")) nil [10579 11705])
            ("declare-function" code nil nil [11707 11762])
            ("semantic-set-tag-folded-isearch" function (:arguments ("overlay")) nil [11764 11969])
            ("semantic-tag-folded-p" function (:arguments ("tag")) nil [11971 12109])
            ("semantic/decorate" package nil nil [12111 12139]))          
      :file "decorate.el"
      :pointmax 12176
      :fsize 12175
      :lastmodtime '(22436 31432 262422 179000)
      :unmatched-syntax nil)
    (semanticdb-table "tag-ls.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1315 1334])
            ("semantic/find" include nil nil [1335 1359])
            ("semantic-tag-similar-ignorable-attributes" variable (:default-value (quote (:prototype-flag))) nil [1780 1918])
            ("semantic--tag-similar-names-p" function
               (:overloadable t
                :arguments ("tag1" "tag2" "blankok"))
                nil [1920 2257])
            ("semantic--tag-similar-names-p-default" function (:arguments ("tag1" "tag2" "blankok")) nil [2259 2749])
            ("semantic--tag-similar-types-p" function
               (:overloadable t
                :arguments ("tag1" "tag2"))
                nil [2751 3161])
            ("semantic--tag-similar-types-p-default" function (:arguments ("tag1" "tag2")) nil [3163 3417])
            ("semantic--tag-attribute-similar-p" function
               (:overloadable t
                :arguments ("attr" "value1" "value2" "ignorable-attributes"))
                nil [3419 4037])
            ("semantic--tag-attribute-similar-p-default" function (:arguments ("attr" "value1" "value2" "ignorable-attributes")) nil [4039 4811])
            ("semantic-tag-similar-p" function
               (:overloadable t
                :arguments ("tag1" "tag2" "ignorable-attributes"))
                nil [4813 5518])
            ("semantic-tag-similar-p-default" function (:arguments ("tag1" "tag2" "ignorable-attributes")) nil [5607 7197])
            ("semantic-tag-full-package" function
               (:overloadable t
                :arguments ("tag" "stream-or-buffer"))
                nil [7418 8301])
            ("semantic-tag-full-package-default" function (:arguments ("tag" "stream")) nil [8303 8629])
            ("semantic-tag-full-name" function
               (:overloadable t
                :arguments ("tag" "stream-or-buffer"))
                nil [8631 9785])
            ("make-obsolete-overload" code nil nil [9787 9898])
            ("semantic-tag-full-name-default" function (:arguments ("tag" "stream")) nil [9900 10239])
            ("semantic-tag-calculate-parent" function
               (:overloadable t
                :arguments ("tag"))
                nil [10438 10743])
            ("semantic-tag-calculate-parent-default" function (:arguments ("tag")) nil [10745 11031])
            ("semantic-tag-protection" function
               (:overloadable t
                :arguments ("tag" "parent"))
                nil [11033 11897])
            ("make-obsolete-overload" code nil nil [11899 12012])
            ("semantic-tag-protection-default" function (:arguments ("tag" "parent")) nil [12014 12670])
            ("semantic-tag-package-protected-p" function (:arguments ("tag" "parent" "currentpackage")) nil [12672 13744])
            ("semantic-tag-protected-p" function (:arguments ("tag" "protection" "parent")) nil [13746 14522])
            ("semantic-tag-abstract-p" function
               (:overloadable t
                :arguments ("tag" "parent"))
                nil [14524 14947])
            ("make-obsolete-overload" code nil nil [14949 15060])
            ("semantic-tag-abstract-p-default" function (:arguments ("tag" "parent")) nil [15062 15474])
            ("semantic-tag-leaf-p" function
               (:overloadable t
                :arguments ("tag" "parent"))
                nil [15476 15807])
            ("make-obsolete-overload" code nil nil [15809 15912])
            ("semantic-tag-leaf-p-default" function (:arguments ("tag" "parent")) nil [15914 16348])
            ("semantic-tag-static-p" function
               (:overloadable t
                :arguments ("tag" "parent"))
                nil [16350 16682])
            ("semantic-tag-static-p-default" function (:arguments ("tag" "parent")) nil [16684 17061])
            ("semantic-tag-prototype-p" function
               (:overloadable t
                :arguments ("tag"))
                nil [17078 17284])
            ("semantic-tag-prototype-p-default" function (:arguments ("tag")) nil [17286 17695])
            ("semantic/tag-ls" package nil nil [17697 17723]))          
      :file "tag-ls.el"
      :pointmax 17880
      :fsize 17879
      :lastmodtime '(22436 31432 274422 179000)
      :unmatched-syntax nil)
    (semanticdb-table "util-modes.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1155 1174])
            ("semantic-modes" customgroup (:user-visible-flag t) nil [1219 1326])
            ("semantic-update-mode-line" variable (:default-value t) nil [1370 1806])
            ("semantic-mode-line-prefix" variable (:default-value (propertize "S" (quote face) (quote bold))) nil [1808 2044])
            ("semantic-minor-modes-format" variable nil nil [2046 2197])
            ("put" code nil nil [2198 2256])
            ("semantic-minor-mode-alist" variable nil nil [2258 2398])
            ("semantic-mode-line-update" function nil nil [2400 4476])
            ("semantic-desktop-ignore-this-minor-mode" function (:arguments ("buffer")) nil [4478 4665])
            ("semantic-add-minor-mode" function (:arguments ("toggle" "name")) nil [4667 5733])
            ("semantic-toggle-minor-mode-globally" function (:arguments ("mode" "arg")) nil [5735 6883])
            ("define-minor-mode" code nil nil [6966 7326])
            ("semantic-highlight-edits-mode-hook" variable nil nil [7328 7480])
            ("semantic-highlight-edits-face" variable
               (:default-value (quote ((((class color) (background dark)) (:background "gray20")) (((class color) (background light)) (:background "gray90"))))
                :type "face")
                nil [7482 7813])
            ("semantic-highlight-edits-new-change-hook-fcn" function (:arguments ("overlay")) nil [7815 8121])
            ("semantic-highlight-edits-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) km)) nil [8123 8251])
            ("define-minor-mode" code nil nil [8268 9437])
            ("semantic-add-minor-mode" code nil nil [9439 9524])
            ("define-minor-mode" code nil nil [9603 10071])
            ("semantic-show-unmatched-syntax-mode-hook" variable nil nil [10073 10237])
            ("semantic-unmatched-syntax-face" variable
               (:default-value (quote ((((class color) (background dark)) (:underline "red")) (((class color) (background light)) (:underline "red"))))
                :type "face")
                nil [10239 10536])
            ("semantic-unmatched-syntax-overlay-p" function (:arguments ("overlay")) nil [10538 10711])
            ("semantic-showing-unmatched-syntax-p" function nil nil [10713 11042])
            ("semantic-show-unmatched-lex-tokens-fetch" function nil nil [11044 11586])
            ("semantic-clean-unmatched-syntax-in-region" function (:arguments ("beg" "end")) nil [11588 11891])
            ("semantic-clean-unmatched-syntax-in-buffer" function nil nil [11893 12087])
            ("semantic-clean-token-of-unmatched-syntax" function (:arguments ("token")) nil [12089 12314])
            ("semantic-show-unmatched-syntax" function (:arguments ("syntax")) nil [12316 13255])
            ("semantic-next-unmatched-syntax" function (:arguments ("point" "bound")) nil [13257 13955])
            ("semantic-show-unmatched-syntax-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km ",`" (quote semantic-show-unmatched-syntax-next)) km)) nil [13957 14176])
            ("define-minor-mode" code nil nil [14193 16051])
            ("semantic-add-minor-mode" code nil nil [16053 16144])
            ("semantic-show-unmatched-syntax-next" function (:user-visible-flag t) nil [16146 16375])
            ("define-minor-mode" code nil nil [16466 16895])
            ("semantic-show-parser-state-mode-hook" variable nil nil [16897 17053])
            ("semantic-show-parser-state-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) km)) nil [17055 17187])
            ("define-minor-mode" code nil nil [17204 20914])
            ("semantic-add-minor-mode" code nil nil [20916 21002])
            ("semantic-show-parser-state-string" variable nil nil [21004 21156])
            ("make-variable-buffer-local" code nil nil [21157 21220])
            ("semantic-show-parser-state-marker" function (:arguments ("ignore")) nil [21222 22042])
            ("semantic-show-parser-state-auto-marker" function nil nil [22044 22362])
            ("define-minor-mode" code nil nil [22439 22860])
            ("semantic-stickyfunc-mode-hook" variable nil nil [22862 23004])
            ("semantic-stickyfunc-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km [header-line down-mouse-1] (quote semantic-stickyfunc-menu)) km)) nil [23006 23199])
            ("semantic-stickyfunc-popup-menu" variable nil nil [23201 23321])
            ("easy-menu-define" code nil nil [23323 24470])
            ("semantic-stickyfunc-indent-string" variable (:default-value (if (and window-system (not (featurep (quote xemacs)))) (concat (condition-case nil (let ((charwidth (frame-char-width)) (scrollpos (frame-parameter (selected-frame) (quote vertical-scroll-bars)))) (if (or (eq scrollpos (quote left)) (eq scrollpos t)) (let ((w (when (boundp (quote scroll-bar-width)) (symbol-value (quote scroll-bar-width))))) (if (not w) (setq w (frame-parameter (selected-frame) (quote scroll-bar-width)))) (if (not w) (setq w (+ (get (quote scroll-bar-width) (quote x-frame-parameter)) 1))) (if (not w) "  " (setq w (+ 2 w)) (make-string (/ w charwidth) 32))) "")) (error "")) (condition-case nil (let* ((f (window-fringes)) (fw (car f)) (numspace (/ fw (frame-char-width)))) (make-string numspace 32)) (error (condition-case nil (if (get (quote fringe) (quote face)) " " "") (error ""))))) "")) nil [24472 26623])
            ("semantic-stickyfunc-old-hlf" variable nil nil [26625 26725])
            ("semantic-stickyfunc-header-line-format" variable
               (:constant-flag t
                :default-value (cond ((featurep (quote xemacs)) nil) ((>= emacs-major-version 22) (quote (:eval (list (propertize " " (quote display) (quote ((space :align-to 0)))) (semantic-stickyfunc-fetch-stickyline))))) ((= emacs-major-version 21) (quote (:eval (list semantic-stickyfunc-indent-string (semantic-stickyfunc-fetch-stickyline))))) (t nil)))
                nil [26727 27187])
            ("define-minor-mode" code nil nil [27204 29199])
            ("semantic-stickyfunc-sticky-classes" variable (:default-value (quote (function type))) nil [29201 29337])
            ("make-variable-buffer-local" code nil nil [29338 29402])
            ("semantic-stickyfunc-show-only-functions-p" variable nil nil [29404 29682])
            ("semantic-stickyfunc-tag-to-stick" function nil nil [29684 30051])
            ("semantic-stickyfunc-fetch-stickyline" function nil nil [30053 31872])
            ("semantic-stickyfunc-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [31874 32344])
            ("semantic-add-minor-mode" code nil nil [32347 32426])
            ("define-minor-mode" code nil nil [32680 33120])
            ("semantic-highlight-func-mode-hook" variable nil nil [33122 33272])
            ("semantic-highlight-func-mode-map" variable (:default-value (let ((km (make-sparse-keymap)) (m3 (if (featurep (quote xemacs)) [button3] [mouse-3]))) (define-key km m3 (quote semantic-highlight-func-menu)) km)) nil [33274 33510])
            ("semantic-highlight-func-popup-menu" variable nil nil [33512 33651])
            ("easy-menu-define" code nil nil [33653 34708])
            ("semantic-highlight-func-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [34710 35226])
            ("semantic-highlight-func-ct-overlay" variable nil nil [35228 35331])
            ("make-variable-buffer-local" code nil nil [35332 35396])
            ("semantic-highlight-func-current-tag-face" variable
               (:default-value (quote ((((class color) (background dark)) (:background "gray20")) (((class color) (background light)) (:background "gray90"))))
                :type "face")
                nil [35398 35720])
            ("define-minor-mode" code nil nil [35737 37090])
            ("semantic-highlight-func-highlight-current-tag" function (:arguments ("disable")) nil [37092 38757])
            ("semantic-add-minor-mode" code nil nil [38759 38842])
            ("semantic/util-modes" package nil nil [38889 38919]))          
      :file "util-modes.el"
      :pointmax 39084
      :fsize 39083
      :lastmodtime '(22436 31432 278422 179000)
      :unmatched-syntax nil)
    (semanticdb-table "dep.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/tag" include nil nil [1440 1463])
            ("semantic-dependency-include-path" variable nil nil [1476 2144])
            ("make-variable-buffer-local" code nil nil [2145 2207])
            ("semantic-dependency-system-include-path" variable nil nil [2209 2774])
            ("make-variable-buffer-local" code nil nil [2775 2844])
            ("defcustom-mode-local-semantic-dependency-system-include-path" function (:arguments ("mode" "name" "value" "docstring")) nil [2846 4342])
            ("semantic-add-system-include" function
               (:user-visible-flag t
                :arguments ("dir" "mode"))
                nil [4428 4996])
            ("semantic-remove-system-include" function
               (:user-visible-flag t
                :arguments ("dir" "mode"))
                nil [5013 5678])
            ("semantic-reset-system-include" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [5695 6021])
            ("semantic-customize-system-include-path" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [6038 6583])
            ("semantic--dependency-find-file-on-path" function (:arguments ("file" "path")) nil [6653 6980])
            ("ede-minor-mode" variable nil nil [6982 7005])
            ("ede-object" variable nil nil [7006 7025])
            ("declare-function" code nil nil [7026 7074])
            ("semantic-dependency-find-file-on-path" function (:arguments ("file" "systemp" "mode")) nil [7076 8163])
            ("semantic/dep" package nil nil [8166 8189]))          
      :file "dep.el"
      :pointmax 8340
      :fsize 8339
      :lastmodtime '(22436 31432 262422 179000)
      :unmatched-syntax nil)
    (semanticdb-table "db.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("eieio-base" include nil nil [1025 1046])
            ("semantic" include nil nil [1047 1066])
            ("semantic/find" include nil nil [1089 1113])
            ("declare-function" code nil nil [1116 1181])
            ("semanticdb-refresh-references" function (:prototype-flag t) nil [1245 1352])
            ("semanticdb" customgroup (:user-visible-flag t) nil [1369 1465])
            ("semanticdb-database-list" variable nil nil [1467 1538])
            ("semanticdb-new-database-class" variable (:default-value (quote semanticdb-project-database-file)) nil [1540 1813])
            ("make-variable-buffer-local" code nil nil [1814 1873])
            ("semanticdb-default-find-index-class" variable (:default-value (quote semanticdb-find-search-index)) nil [1875 2080])
            ("make-variable-buffer-local" code nil nil [2081 2146])
            ("semanticdb-current-database" variable nil nil [2163 2266])
            ("make-variable-buffer-local" code nil nil [2267 2324])
            ("semanticdb-current-table" variable nil nil [2341 2447])
            ("make-variable-buffer-local" code nil nil [2448 2502])
            ("semanticdb-abstract-table" type
               (:members 
                  ( ("parent-db" variable (:documentation "Database Object containing this table.") nil nil)
                    ("major-mode" variable
                       (:documentation "Major mode this table belongs to.
Sometimes it is important for a program to know if a given table has the
same major mode as the current buffer."
                        :default-value "nil")
                        nil nil)
                    ("tags" variable (:documentation "The tags belonging to this table.") nil nil)
                    ("db-refs" variable
                       (:documentation "List of `semanticdb-table' objects refering to this one.
These aren't saved, but are instead recalculated after load.
See the file semanticdb-ref.el for how this slot is used."
                        :default-value "nil")
                        nil nil)
                    ("index" variable
                       (:documentation "The search index.
Used by semanticdb-find to store additional information about
this table for searching purposes.

Note: This index will not be saved in a persistent file."
                        :type "semanticdb-abstract-search-index")
                        nil nil)
                    ("cache" variable
                       (:documentation "List of cache information for tools.
Any particular tool can cache data to a database at runtime
with `semanticdb-cache-get'.

Using a semanticdb cache does not save any information to a file,
so your cache will need to be recalculated at runtime.  Caches can be
referenced even when the file is not in a buffer.

Note: This index will not be saved in a persistent file."
                        :default-value "nil"
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [2528 4192])
            ("semanticdb-in-buffer-p" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj"))
                nil [4194 4333])
            ("semanticdb-get-buffer" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj"))
                nil [4335 4516])
            ("semanticdb-full-filename" function nil nil [4701 5108])
            ("semanticdb-full-filename" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj"))
                nil [5110 5295])
            ("semanticdb-dirty-p" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj"))
                nil [5297 5405])
            ("semanticdb-set-dirty" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj"))
                nil [5407 5654])
            ("semanticdb-normalize-tags" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj" "tags"))
                nil [5656 6026])
            ("semanticdb-normalize-one-tag" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj" "tag"))
                nil [6028 6473])
            ("object-print" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj" "strings"))
                nil [6475 6981])
            ("semanticdb-abstract-search-index" type
               (:members 
                  ( ("table" variable
                       (:documentation "XRef to the table this belongs to."
                        :type "semanticdb-abstract-table")
                        nil nil))                  
                :type "class")
                nil [7002 7392])
            ("semanticdb-get-table-index" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj"))
                nil [7394 7824])
            ("semanticdb-synchronize" function
               (:parent "semanticdb-abstract-search-index"
                :arguments ("idx" "new-tags"))
                nil [7826 8021])
            ("semanticdb-partial-synchronize" function
               (:parent "semanticdb-abstract-search-index"
                :arguments ("idx" "new-tags"))
                nil [8023 8235])
            ("semanticdb-search-results-table" type
               (:superclasses "semanticdb-abstract-table"
                :type "class")
                nil [8367 8641])
            ("semanticdb-refresh-table" function
               (:parent "semanticdb-search-results-table"
                :arguments ("obj" "force"))
                nil [8643 8868])
            ("semanticdb-table" type
               (:superclasses "semanticdb-abstract-table"
                :members 
                  ( ("file" variable (:documentation "File name relative to the parent database.
This is for the file whose tags are stored in this TABLE object.") nil nil)
                    ("buffer" variable
                       (:documentation "The buffer associated with this table.
If nil, the table's buffer is no in Emacs.  If it has a value, then
it is in Emacs."
                        :default-value "nil")
                        nil nil)
                    ("dirty" variable
                       (:documentation "Non nil if this table needs to be `Saved'."
                        :default-value "nil")
                        nil nil)
                    ("db-refs" variable
                       (:documentation "List of `semanticdb-table' objects referring to this one.
These aren't saved, but are instead recalculated after load.
See the file semantic/db-ref.el for how this slot is used."
                        :default-value "nil")
                        nil nil)
                    ("pointmax" variable
                       (:documentation "Size of buffer when written to disk.
Checked on retrieval to make sure the file is the same."
                        :default-value "nil")
                        nil nil)
                    ("fsize" variable
                       (:documentation "Size of the file when it was last referenced.
Checked when deciding if a loaded table needs updating from changes
outside of Semantic's control."
                        :default-value "nil")
                        nil nil)
                    ("lastmodtime" variable
                       (:documentation "Last modification time of the file referenced.
Checked when deciding if a loaded table needs updating from changes outside of
Semantic's control."
                        :default-value "nil")
                        nil nil)
                    ("unmatched-syntax" variable (:documentation "List of vectors specifying unmatched syntax.") nil nil)
                    ("lexical-table" variable
                       (:documentation "Table that might be needed by the lexical analyzer.
For C/C++, the C preprocessor macros can be saved here."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [8900 10751])
            ("semanticdb-in-buffer-p" function
               (:parent "semanticdb-table"
                :arguments ("obj"))
                nil [10753 11000])
            ("semanticdb-get-buffer" function
               (:parent "semanticdb-table"
                :arguments ("obj"))
                nil [11002 11400])
            ("semanticdb-set-buffer" function
               (:parent "semanticdb-table"
                :arguments ("obj"))
                nil [11402 11606])
            ("semanticdb-full-filename" function
               (:parent "semanticdb-table"
                :arguments ("obj"))
                nil [11608 11808])
            ("semanticdb-dirty-p" function
               (:parent "semanticdb-table"
                :arguments ("obj"))
                nil [11810 11922])
            ("semanticdb-set-dirty" function
               (:parent "semanticdb-table"
                :arguments ("obj"))
                nil [11924 12044])
            ("object-print" function
               (:parent "semanticdb-table"
                :arguments ("obj" "strings"))
                nil [12046 12381])
            ("semanticdb-project-database" type
               (:superclasses "eieio-instance-tracker"
                :members 
                  ( ("tracking-symbol" variable (:default-value "semanticdb-database-list") nil nil)
                    ("reference-directory" variable
                       (:documentation "Directory this database refers to.
When a cache directory is specified, then this refers to the directory
this database contains symbols for."
                        :type "string")
                        nil nil)
                    ("new-table-class" variable
                       (:documentation "New tables created for this database are of this class."
                        :default-value "semanticdb-table"
                        :type "class")
                        nil nil)
                    ("cache" variable
                       (:documentation "List of cache information for tools.
Any particular tool can cache data to a database at runtime
with `semanticdb-cache-get'.

Using a semanticdb cache does not save any information to a file,
so your cache will need to be recalculated at runtime.

Note: This index will not be saved in a persistent file."
                        :default-value "nil"
                        :type "list")
                        nil nil)
                    ("tables" variable
                       (:documentation "List of `semantic-db-table' objects."
                        :protection ":protected"
                        :type "semanticdb-abstract-table-list")
                        nil nil))                  
                :type "class")
                nil [12410 13577])
            ("semanticdb-full-filename" function
               (:parent "semanticdb-project-database"
                :arguments ("obj"))
                nil [13579 13766])
            ("semanticdb-dirty-p" function
               (:parent "semanticdb-project-database"
                :arguments ("DB"))
                nil [13768 14173])
            ("object-print" function
               (:parent "semanticdb-project-database"
                :arguments ("obj" "strings"))
                nil [14175 14583])
            ("semanticdb-create-database" function
               (:parent "semanticdb-project-database"
                :arguments ("dbc" "directory"))
                nil [14585 15241])
            ("semanticdb-flush-database-tables" function
               (:parent "semanticdb-project-database"
                :arguments ("db"))
                nil [15243 15385])
            ("semanticdb-create-table" function
               (:parent "semanticdb-project-database"
                :arguments ("db" "file"))
                nil [15387 16067])
            ("semanticdb-file-table" function
               (:parent "semanticdb-project-database"
                :arguments ("obj" "filename"))
                nil [16069 16334])
            ("semanticdb-get-database" function (:arguments ("filename")) nil [16358 16551])
            ("semanticdb-directory-loaded-p" function (:arguments ("path")) nil [16553 16748])
            ("semanticdb-create-table-for-file" function (:arguments ("filename")) nil [16750 17330])
            ("semanticdb-abstract-cache" type
               (:members 
                  ( ("table" variable
                       (:documentation "Cross reference to the table this belongs to."
                        :type "semanticdb-abstract-table")
                        nil nil))                  
                :type "class")
                nil [17352 17925])
            ("semanticdb-cache-get" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "desired-class"))
                nil [17927 18681])
            ("semanticdb-cache-remove" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "cache"))
                nil [18683 18861])
            ("semanticdb-synchronize" function
               (:parent "semanticdb-abstract-cache"
                :arguments ("cache" "new-tags"))
                nil [18863 19040])
            ("semanticdb-partial-synchronize" function
               (:parent "semanticdb-abstract-cache"
                :arguments ("cache" "new-tags"))
                nil [19042 19236])
            ("semanticdb-abstract-db-cache" type
               (:members 
                  ( ("db" variable
                       (:documentation "Cross reference to the database this belongs to."
                        :type "semanticdb-project-database")
                        nil nil))                  
                :type "class")
                nil [19238 19825])
            ("semanticdb-cache-get" function
               (:parent "semanticdb-project-database"
                :arguments ("db" "desired-class"))
                nil [19827 20565])
            ("semanticdb-cache-remove" function
               (:parent "semanticdb-project-database"
                :arguments ("db" "cache"))
                nil [20567 20741])
            ("semanticdb-synchronize" function
               (:parent "semanticdb-abstract-db-cache"
                :arguments ("cache" "new-tags"))
                nil [20744 20924])
            ("semanticdb-partial-synchronize" function
               (:parent "semanticdb-abstract-db-cache"
                :arguments ("cache" "new-tags"))
                nil [20926 21123])
            ("semanticdb-refresh-table" function
               (:parent "semanticdb-table"
                :arguments ("obj" "force"))
                nil [21138 22165])
            ("semanticdb-needs-refresh-p" function
               (:parent "semanticdb-table"
                :arguments ("obj"))
                nil [22167 23156])
            ("semanticdb-synchronize" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "new-tags"))
                nil [23183 24185])
            ("semanticdb-partial-synchronize" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "new-tags"))
                nil [24187 25251])
            ("semanticdb-save-db" function
               (:parent "semanticdb-project-database"
                :arguments ("DB" "suppress-questions"))
                nil [25270 25553])
            ("semanticdb-save-current-db" function (:user-visible-flag t) nil [25555 25846])
            ("semanticdb--inhibit-create-file-directory" variable nil nil [25972 26022])
            ("semanticdb-save-all-db" function (:user-visible-flag t) nil [26024 26353])
            ("semanticdb-save-all-db-idle" function nil nil [26355 26739])
            ("semanticdb-project-predicate-functions" variable nil nil [26774 27237])
            ("semanticdb-write-directory-p" function
               (:parent "semanticdb-project-database"
                :arguments ("obj"))
                nil [27239 27439])
            ("semanticdb-current-database" function nil nil [27583 27835])
            ("semanticdb-match-any-mode" variable nil nil [27837 28116])
            ("semanticdb-with-match-any-mode" function (:arguments ("body")) nil [28118 28375])
            ("put" code nil nil [28376 28437])
            ("semanticdb-equivalent-mode-for-search" function (:arguments ("buffer")) nil [28439 28903])
            ("semanticdb-equivalent-mode" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "buffer"))
                nil [28905 29150])
            ("semanticdb-equivalent-mode" function
               (:parent "semanticdb-table"
                :arguments ("table" "buffer"))
                nil [29152 29838])
            ("semanticdb-project-roots" variable (:user-visible-flag t) nil [29957 30319])
            ("semanticdb-project-root-functions" variable nil nil [30321 30776])
            ("semanticdb-project-system-databases" variable nil nil [30778 31089])
            ("make-variable-buffer-local" code nil nil [31090 31155])
            ("semanticdb-search-system-databases" variable (:default-value t) nil [31157 31267])
            ("semanticdb-current-database-list" function (:arguments ("dir")) nil [31269 33284])
            ("semanticdb-file-table-hash" variable (:default-value (make-hash-table :test (quote equal))) nil [33423 33543])
            ("semanticdb-file-table-object-from-hash" function (:arguments ("file")) nil [33545 33728])
            ("semanticdb-file-table-object-put-hash" function (:arguments ("file" "dbtable")) nil [33730 33893])
            ("semanticdb-file-table-object" function (:arguments ("file" "dontload")) nil [33910 37854])
            ("semanticdb-out-of-buffer-create-table-fcn" variable nil nil [37856 38014])
            ("make-variable-buffer-local" code nil nil [38015 38086])
            ("semanticdb-create-table-for-file-not-in-buffer" function (:arguments ("filename")) nil [38088 39475])
            ("semanticdb-file-stream" function (:arguments ("file")) nil [39477 39805])
            ("semantic/db" package nil nil [39807 39829]))          
      :file "db.el"
      :pointmax 39978
      :fsize 39977
      :lastmodtime '(22436 31432 262422 179000)
      :unmatched-syntax '((close-paren 1113 . 1114) (symbol 1069 . 1086) (open-paren 1068 . 1069)))
    (semanticdb-table "analyze.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [2732 2745])
            ("semantic" include nil nil [2747 2766])
            ("semantic/format" include nil nil [2767 2793])
            ("semantic/ctxt" include nil nil [2794 2818])
            ("semantic/scope" include nil nil [2819 2844])
            ("semantic/sort" include nil nil [2845 2869])
            ("semantic/analyze/fcn" include nil nil [2870 2901])
            ("semantic/find" include nil nil [2922 2946])
            ("declare-function" code nil nil [2949 3002])
            ("declare-function" code nil nil [3003 3070])
            ("semantic-analyze-error-stack" variable nil nil [3082 3176])
            ("semantic-analyze-push-error" function (:arguments ("err")) nil [3178 3328])
            ("semantic-analyze-context" type
               (:members 
                  ( ("bounds" variable
                       (:documentation "The bounds of this context.
Usually bound to the dimension of a single symbol or command."
                        :type "list")
                        nil nil)
                    ("prefix" variable
                       (:documentation "List of tags defining local text.
This can be nil, or a list where the last element can be a string
representing text that may be incomplete.  Preceding elements
must be semantic tags representing variables or functions
called in a dereference sequence."
                        :type "list")
                        nil nil)
                    ("prefixclass" variable
                       (:documentation "Tag classes expected at this context.
These are classes for tags, such as 'function, or 'variable."
                        :type "list")
                        nil nil)
                    ("prefixtypes" variable
                       (:documentation "List of tags defining types for :prefix.
This list is one shorter than :prefix.  Each element is a semantic
tag representing a type matching the semantic tag in the same
position in PREFIX."
                        :type "list")
                        nil nil)
                    ("scope" variable
                       (:documentation "List of tags available in scopetype.
See `semantic-analyze-scoped-tags' for details."
                        :type "(or null semantic-scope-cache)")
                        nil nil)
                    ("buffer" variable
                       (:documentation "The buffer this context is derived from."
                        :type "buffer")
                        nil nil)
                    ("errors" variable (:documentation "Any errors thrown an caught during analysis.") nil nil))                  
                :type "class")
                nil [3508 4875])
            ("semantic-analyze-context-assignment" type
               (:superclasses "semantic-analyze-context"
                :members 
                  ( ("assignee" variable
                       (:documentation "A sequence of tags for an assignee.
This is a variable into which some value is being placed.  The last
item in the list is the variable accepting the value.  Earlier
tags represent the variables being dereferenced to get to the
assignee."
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [4877 5312])
            ("semantic-analyze-context-functionarg" type
               (:superclasses "semantic-analyze-context"
                :members 
                  ( ("function" variable
                       (:documentation "A sequence of tags for a function.
This is a function being called.  The cursor will be in the position
of an argument.
The last tag in :function is the function being called.  Earlier
tags represent the variables being dereferenced to get to the
function."
                        :type "list")
                        nil nil)
                    ("index" variable
                       (:documentation "The index of the argument for this context.
If a function takes 4 arguments, this value should be bound to
the values 1 through 4."
                        :type "integer")
                        nil nil)
                    ("argument" variable
                       (:documentation "A sequence of tags for the :index argument.
The argument can accept a value of some type, and this contains the
tag for that definition.  It should be a tag, but might
be just a string in some circumstances."
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [5314 6254])
            ("semantic-analyze-context-return" type
               (:superclasses "semantic-analyze-context"
                :type "class")
                nil [6256 6474])
            ("semantic-analyze-type-constraint" function
               (:parent "semantic-analyze-context"
                :arguments ("context" "desired-type"))
                nil [6541 7365])
            ("semantic-analyze-type-constraint" function
               (:parent "semantic-analyze-context-functionarg"
                :arguments ("context"))
                nil [7367 7585])
            ("semantic-analyze-type-constraint" function
               (:parent "semantic-analyze-context-assignment"
                :arguments ("context"))
                nil [7587 7814])
            ("semantic-analyze-interesting-tag" function
               (:parent "semantic-analyze-context"
                :arguments ("context"))
                nil [7816 8240])
            ("semantic-analyze-interesting-tag" function
               (:parent "semantic-analyze-context-functionarg"
                :arguments ("context"))
                nil [8242 8471])
            ("semantic-analyze-interesting-tag" function
               (:parent "semantic-analyze-context-assignment"
                :arguments ("context"))
                nil [8473 8701])
            ("semantic-analyze-tag-type-members" function
               (:overloadable t
                :arguments ("tag"))
                nil [9171 9345])
            ("semantic-analyze-tag-type-members-default" function (:arguments ("tag")) nil [9347 9494])
            ("semantic-analyze-find-tag-sequence" function
               (:overloadable t
                :arguments ("sequence" "scope" "typereturn" "throwsym" "flags"))
                nil [9713 10530])
            ("semantic-analyze-find-tag-sequence-default" function (:arguments ("sequence" "scope" "typereturn" "throwsym" "flags")) nil [10532 14475])
            ("semantic-analyze-find-tag" function (:arguments ("name" "tagclass" "scope")) nil [14477 16630])
            ("semantic-analyze-current-symbol" function
               (:overloadable t
                :arguments ("analyzehookfcn" "position"))
                nil [16715 17767])
            ("semantic-analyze-current-symbol-default" function (:arguments ("analyzehookfcn" "position")) nil [17769 19163])
            ("semantic-analyze-current-context" function
               (:overloadable t
                :user-visible-flag t
                :arguments ("position"))
                nil [19242 20777])
            ("semantic-analyze-current-context-default" function (:arguments ("position")) nil [20779 26109])
            ("semantic-analyze-dereference-alias" function (:arguments ("taglist")) nil [26111 26655])
            ("semantic-adebug-analyze" function
               (:user-visible-flag t
                :arguments ("ctxt"))
                nil [26658 27328])
            ("declare-function" code nil nil [27397 27456])
            ("semantic-analyze-pulse" function
               (:parent "semantic-analyze-context"
                :arguments ("context"))
                nil [27458 27764])
            ("semantic-analyze-summary-function" variable (:default-value (quote semantic-format-tag-prototype)) nil [27766 28019])
            ("semantic-analyze-princ-sequence" function (:arguments ("sequence" "prefix" "buff")) nil [28021 28840])
            ("semantic-analyze-show" function
               (:parent "semantic-analyze-context"
                :arguments ("context"))
                nil [28842 29660])
            ("semantic-analyze-show" function
               (:parent "semantic-analyze-context-assignment"
                :arguments ("context"))
                nil [29662 29895])
            ("semantic-analyze-show" function
               (:parent "semantic-analyze-context-functionarg"
                :arguments ("context"))
                nil [29897 30279])
            ("semantic-analyze-pop-to-context" function (:arguments ("context")) nil [30281 30836])
            ("semantic/analyze" package nil nil [30838 30865]))          
      :file "analyze.el"
      :pointmax 31024
      :fsize 31023
      :lastmodtime '(22436 31432 254422 178000)
      :unmatched-syntax '((close-paren 2946 . 2947) (symbol 2904 . 2921) (open-paren 2903 . 2904) (close-paren 2745 . 2746) (symbol 2714 . 2731) (open-paren 2713 . 2714)))
    (semanticdb-table "adebug.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("eieio" include nil nil [1237 1253])
            ("data-debug" include nil nil [1254 1275])
            ("semantic" include nil nil [1276 1295])
            ("semantic/format" include nil nil [1296 1322])
            ("semantic/db-find" include nil nil [1344 1371])
            ("data-debug-insert-tag-parts" function (:arguments ("tag" "prefix" "parent")) nil [1411 2647])
            ("data-debug-insert-tag-parts-from-point" function (:arguments ("point")) nil [2664 3143])
            ("data-debug-insert-tag" function (:arguments ("tag" "prefix" "prebuttontext" "parent")) nil [3160 4100])
            ("data-debug-insert-tag-list" function (:arguments ("taglist" "prefix" "parent")) nil [4134 4452])
            ("data-debug-insert-taglist-from-point" function (:arguments ("point")) nil [4454 4923])
            ("data-debug-insert-tag-list-button" function (:arguments ("taglist" "prefix" "prebuttontext" "parent")) nil [4940 5898])
            ("data-debug-insert-find-results" function (:arguments ("findres" "prefix")) nil [5946 6405])
            ("data-debug-insert-find-results-from-point" function (:arguments ("point")) nil [6407 6850])
            ("data-debug-insert-find-results-button" function (:arguments ("findres" "prefix" "prebuttontext")) nil [6867 7709])
            ("data-debug-insert-db-and-tag-button" function (:arguments ("dbtag" "prefix" "prebuttontext")) nil [7726 8670])
            ("data-debug-insert-db-and-tag-from-point" function (:arguments ("point")) nil [8672 9186])
            ("semantic-adebug-bovinate" function (:user-visible-flag t) nil [9300 9710])
            ("semantic-adebug-searchdb" function
               (:user-visible-flag t
                :arguments ("regex"))
                nil [9727 10230])
            ("semanticdb-debug-file-tag-check" function
               (:user-visible-flag t
                :arguments ("startfile"))
                nil [10247 12929])
            ("data-debug-add-specialized-thing" code nil nil [13151 13232])
            ("data-debug-add-specialized-thing" code nil nil [13246 13388])
            ("data-debug-add-specialized-thing" code nil nil [13405 13513])
            ("data-debug-add-specialized-thing" code nil nil [13540 13753])
            ("semantic/adebug" package nil nil [13755 13781]))          
      :file "adebug.el"
      :pointmax 13938
      :fsize 13937
      :lastmodtime '(22436 31432 254422 178000)
      :unmatched-syntax '((close-paren 1371 . 1372) (symbol 1324 . 1341) (open-paren 1323 . 1324)))
    (semanticdb-table "db-find.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/db" include nil nil [4572 4594])
            ("semantic/db-ref" include nil nil [4595 4621])
            ("semantic/find" include nil nil [4643 4667])
            ("data-debug-thing-alist" variable nil nil [4681 4712])
            ("declare-function" code nil nil [4713 4773])
            ("declare-function" code nil nil [4774 4827])
            ("declare-function" code nil nil [4886 4948])
            ("declare-function" code nil nil [4949 5025])
            ("declare-function" code nil nil [5026 5070])
            ("semanticdb-find-throttle-custom-list" variable (:default-value (quote (set (const local) (const project) (const unloaded) (const system) (const recursive) (const omniscience)))) nil [5072 5330])
            ("semanticdb-find-default-throttle" variable (:default-value (quote (local project unloaded system recursive))) nil [5347 6896])
            ("make-variable-buffer-local" code nil nil [6898 6960])
            ("semanticdb-find-throttle-active-p" function (:arguments ("access-type")) nil [6962 7256])
            ("semanticdb-find-search-index" type
               (:superclasses "semanticdb-abstract-search-index"
                :members 
                  ( ("include-path" variable
                       (:documentation "List of semanticdb tables from the include path."
                        :default-value "nil")
                        nil nil)
                    ("type-cache" variable
                       (:documentation "Cache of all the data types accessible from this file.
Includes all types from all included files, merged namespaces, and
expunge duplicates."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [7454 7951])
            ("semantic-reset" function
               (:parent "semanticdb-find-search-index"
                :arguments ("idx"))
                nil [7953 8326])
            ("semanticdb-synchronize" function
               (:parent "semanticdb-find-search-index"
                :arguments ("idx" "new-tags"))
                nil [8328 8699])
            ("semanticdb-partial-synchronize" function
               (:parent "semanticdb-find-search-index"
                :arguments ("idx" "new-tags"))
                nil [8701 9753])
            ("semanticdb-find-translate-path" function
               (:overloadable t
                :arguments ("path" "brutish"))
                nil [9977 11780])
            ("semanticdb-find-translate-path-default" function (:arguments ("path" "brutish")) nil [11782 12263])
            ("semanticdb-find-table-for-include" function
               (:overloadable t
                :arguments ("includetag" "table"))
                nil [12280 12644])
            ("semanticdb-find-translate-path-brutish-default" function (:arguments ("path")) nil [12646 13920])
            ("semanticdb-find-incomplete-cache-entries-p" function (:arguments ("cache")) nil [13922 14201])
            ("semanticdb-find-need-cache-update-p" function (:arguments ("table")) nil [14203 14896])
            ("semanticdb-find-translate-path-includes-default" function (:arguments ("path")) nil [14898 16245])
            ("semanticdb-find-lost-includes" variable nil nil [16247 16356])
            ("make-variable-buffer-local" code nil nil [16357 16416])
            ("semanticdb-find-scanned-include-tags" variable nil nil [16418 16673])
            ("make-variable-buffer-local" code nil nil [16674 16740])
            ("semanticdb-implied-include-tags" variable nil nil [16742 17093])
            ("semanticdb-find-translate-path-includes--internal" function (:arguments ("path")) nil [17095 22092])
            ("semanticdb-find-load-unloaded" function
               (:overloadable t
                :arguments ("filename"))
                nil [22094 22481])
            ("semanticdb-find-load-unloaded-default" function (:arguments ("filename")) nil [22483 22656])
            ("semanticdb-find-table-for-include-default" function (:arguments ("includetag" "table")) nil [22704 27015])
            ("semanticdb-find-test-translate-path" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [27098 27739])
            ("semanticdb-find-test-translate-path-no-loading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [27741 28537])
            ("semanticdb-find-adebug-lost-includes" function (:user-visible-flag t) nil [28554 29061])
            ("semanticdb-find-adebug-insert-scanned-tag-cons" function (:arguments ("consdata" "prefix" "prebuttontext")) nil [29063 30302])
            ("semanticdb-find-adebug-scanned-includes" function (:user-visible-flag t) nil [30304 31100])
            ("semanticdb-strip-find-results" function (:arguments ("results" "find-file-match")) nil [31247 33159])
            ("semanticdb-fast-strip-find-results" function (:arguments ("results")) nil [33161 33490])
            ("semanticdb-find-results-p" function (:arguments ("resultp")) nil [33492 33938])
            ("semanticdb-find-result-prin1-to-string" function (:arguments ("result")) nil [33940 34494])
            ("semanticdb-find-result-with-nil-p" function (:arguments ("resultp")) nil [34496 35205])
            ("semanticdb-find-result-length" function (:arguments ("result")) nil [35222 35426])
            ("semanticdb-find-result-nth" function (:arguments ("result" "n")) nil [35443 36302])
            ("semanticdb-find-result-test" function (:arguments ("result")) nil [36304 36753])
            ("semanticdb-find-result-nth-in-buffer" function (:arguments ("result" "n")) nil [36770 37789])
            ("semanticdb-find-result-mapc" function (:arguments ("fcn" "result")) nil [37791 38164])
            ("semanticdb-find-log-flag" variable nil nil [38248 38332])
            ("semanticdb-find-log-buffer-name" variable (:default-value "*SemanticDB Find Log*") nil [38334 38434])
            ("semanticdb-find-toggle-logging" function (:user-visible-flag t) nil [38436 38684])
            ("semanticdb-reset-log" function (:user-visible-flag t) nil [38686 38899])
            ("semanticdb-find-log-move-to-end" function nil nil [38901 39323])
            ("semanticdb-find-log-new-search" function (:arguments ("forwhat")) nil [39325 39613])
            ("semanticdb-find-log-activity" function (:arguments ("table" "result")) nil [39615 39979])
            ("semanticdb-find-tags-collector" function (:arguments ("function" "path" "find-file-match" "brutish")) nil [40079 43047])
            ("semanticdb-find-tags-by-name" function (:arguments ("name" "path" "find-file-match")) nil [43064 43510])
            ("semanticdb-find-tags-by-name-regexp" function (:arguments ("regexp" "path" "find-file-match")) nil [43527 43993])
            ("semanticdb-find-tags-for-completion" function (:arguments ("prefix" "path" "find-file-match")) nil [44010 44476])
            ("semanticdb-find-tags-by-class" function (:arguments ("class" "path" "find-file-match")) nil [44493 44938])
            ("semanticdb-deep-find-tags-by-name" function (:arguments ("name" "path" "find-file-match")) nil [44958 45470])
            ("semanticdb-deep-find-tags-by-name-regexp" function (:arguments ("regexp" "path" "find-file-match")) nil [45472 46004])
            ("semanticdb-deep-find-tags-for-completion" function (:arguments ("prefix" "path" "find-file-match")) nil [46006 46538])
            ("semanticdb-brute-deep-find-tags-by-name" function (:arguments ("name" "path" "find-file-match")) nil [46571 47129])
            ("semanticdb-brute-deep-find-tags-for-completion" function (:arguments ("prefix" "path" "find-file-match")) nil [47131 47709])
            ("semanticdb-brute-find-tags-by-class" function (:arguments ("class" "path" "find-file-match")) nil [47711 48259])
            ("semanticdb-find-tags-external-children-of-type" function (:arguments ("type" "path" "find-file-match")) nil [48291 48799])
            ("semanticdb-find-tags-subclasses-of-type" function (:arguments ("type" "path" "find-file-match")) nil [48801 49292])
            ("semanticdb-find-tags-by-name-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "name" "tags"))
                nil [49466 49787])
            ("semanticdb-find-tags-by-name-regexp-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "regexp" "tags"))
                nil [49789 50134])
            ("semanticdb-find-tags-for-completion-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "prefix" "tags"))
                nil [50136 50481])
            ("semanticdb-find-tags-by-class-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "class" "tags"))
                nil [50483 51057])
            ("semanticdb-find-tags-external-children-of-type-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "parent" "tags"))
                nil [51059 51472])
            ("semanticdb-find-tags-subclasses-of-type-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "parent" "tags"))
                nil [51474 51873])
            ("semanticdb-deep-find-tags-by-name-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "name" "tags"))
                nil [51893 52324])
            ("semanticdb-deep-find-tags-by-name-regexp-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "regexp" "tags"))
                nil [52326 52781])
            ("semanticdb-deep-find-tags-for-completion-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "prefix" "tags"))
                nil [52783 53238])
            ("semantic/db-find" package nil nil [53240 53267]))          
      :file "db-find.el"
      :pointmax 53426
      :fsize 53425
      :lastmodtime '(22436 31432 258422 178000)
      :unmatched-syntax '((close-paren 4667 . 4668) (symbol 4623 . 4640) (open-paren 4622 . 4623)))
    (semanticdb-table "sort.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1219 1238])
            ("semantic/find" include nil nil [1260 1284])
            ("declare-function" code nil nil [1287 1375])
            ("semantic-string-lessp-ci" function (:arguments ("s1" "s2")) nil [1504 1869])
            ("semantic-sort-tag-type" function (:arguments ("tag")) nil [1871 2086])
            ("semantic-tag-lessp-name-then-type" function (:arguments ("A" "B")) nil [2088 2910])
            ("semantic-sort-tags-by-name-increasing" function (:arguments ("tags")) nil [2912 3153])
            ("semantic-sort-tags-by-name-decreasing" function (:arguments ("tags")) nil [3155 3396])
            ("semantic-sort-tags-by-type-increasing" function (:arguments ("tags")) nil [3398 3649])
            ("semantic-sort-tags-by-type-decreasing" function (:arguments ("tags")) nil [3651 3902])
            ("semantic-sort-tags-by-name-increasing-ci" function (:arguments ("tags")) nil [3904 4158])
            ("semantic-sort-tags-by-name-decreasing-ci" function (:arguments ("tags")) nil [4160 4414])
            ("semantic-sort-tags-by-type-increasing-ci" function (:arguments ("tags")) nil [4416 4680])
            ("semantic-sort-tags-by-type-decreasing-ci" function (:arguments ("tags")) nil [4682 4946])
            ("semantic-sort-tags-by-name-then-type-increasing" function (:arguments ("tags")) nil [4948 5175])
            ("semantic-sort-tags-by-name-then-type-decreasing" function (:arguments ("tags")) nil [5177 5404])
            ("semantic-unique-tag-table-by-name" function (:arguments ("tags")) nil [5630 6249])
            ("semantic-unique-tag-table" function (:arguments ("tags")) nil [6251 7109])
            ("semantic-flatten-tags-table" function (:arguments ("table")) nil [7453 8313])
            ("semantic-bucketize-tag-class" variable (:default-value (lambda (tok) (semantic-tag-class tok))) nil [8533 9116])
            ("semantic-bucketize" function (:arguments ("tags" "parent" "filter")) nil [9118 10820])
            ("semantic-orphaned-member-metaparent-type" variable (:default-value "class") nil [11060 11305])
            ("make-variable-buffer-local" code nil nil [11306 11376])
            ("semantic-mark-external-member-function" variable nil nil [11378 11947])
            ("semantic-adopt-external-members" function (:arguments ("tags")) nil [11949 15983])
            ("semantic-tag-external-member-parent" function
               (:overloadable t
                :arguments ("tag"))
                nil [16125 16656])
            ("semantic-tag-external-member-parent-default" function (:arguments ("tag")) nil [16658 16987])
            ("semantic-tag-external-member-p" function
               (:overloadable t
                :arguments ("parent" "tag"))
                nil [16989 17527])
            ("semantic-tag-external-member-p-default" function (:arguments ("parent" "tag")) nil [17529 17867])
            ("semantic-tag-external-member-children" function
               (:overloadable t
                :arguments ("tag" "usedb"))
                nil [17869 18744])
            ("semantic-tag-external-member-children-default" function (:arguments ("tag" "usedb")) nil [18746 19473])
            ("semantic-tag-external-class" function
               (:overloadable t
                :arguments ("tag"))
                nil [19475 19996])
            ("semantic-tag-external-class-default" function (:arguments ("tag")) nil [19998 20516])
            ("semantic/sort" package nil nil [20518 20542]))          
      :file "sort.el"
      :pointmax 20695
      :fsize 20694
      :lastmodtime '(22436 31432 266422 179000)
      :unmatched-syntax '((close-paren 1284 . 1285) (symbol 1240 . 1257) (open-paren 1239 . 1240)))
    (semanticdb-table "senator.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("ring" include nil nil [1160 1175])
            ("working" include nil nil [1176 1194])
            ("semantic" include nil nil [1195 1214])
            ("semantic/ctxt" include nil nil [1215 1239])
            ("semantic/decorate" include nil nil [1240 1268])
            ("semantic/format" include nil nil [1269 1295])
            ("semantic/db" include nil nil [1296 1318])
            ("semantic/db-find" include nil nil [1319 1346])
            ("semantic/find" include nil nil [1368 1392])
            ("declare-function" code nil nil [1441 1515])
            ("declare-function" code nil nil [1516 1585])
            ("declare-function" code nil nil [1586 1649])
            ("declare-function" code nil nil [1650 1717])
            ("declare-function" code nil nil [1718 1780])
            ("declare-function" code nil nil [1781 1825])
            ("senator" customgroup (:user-visible-flag t) nil [1845 1910])
            ("senator-minor-mode" variable nil nil [1912 2051])
            ("make-variable-buffer-local" code nil nil [2052 2100])
            ("senator-step-at-tag-classes" variable nil nil [2117 2445])
            ("make-variable-buffer-local" code nil nil [2461 2518])
            ("senator-step-at-start-end-tag-classes" variable nil nil [2535 3228])
            ("make-variable-buffer-local" code nil nil [3244 3311])
            ("senator-highlight-found" variable nil nil [3313 3454])
            ("make-variable-buffer-local" code nil nil [3455 3508])
            ("senator-momentary-highlight-face" variable
               (:default-value (quote ((((class color) (background dark)) (:background "gray30")) (((class color) (background light)) (:background "gray70"))))
                :type "face")
                nil [3520 3770])
            ("senator-momentary-highlight-tag" function (:arguments ("tag")) nil [3794 4040])
            ("senator-step-at-start-end-p" function (:arguments ("tag")) nil [4042 4307])
            ("senator-skip-p" function (:arguments ("tag")) nil [4309 4512])
            ("senator-middle-of-tag-p" function (:arguments ("pos" "tag")) nil [4514 4695])
            ("senator-step-at-parent" function (:arguments ("tag")) nil [4697 5270])
            ("senator-previous-tag-or-parent" function (:arguments ("pos")) nil [5272 6079])
            ("senator-full-tag-name" function (:arguments ("tag" "parent")) nil [6081 6596])
            ("semantic-alias-obsolete" code nil nil [6597 6699])
            ("senator-completion-cache" variable nil nil [6701 6790])
            ("make-variable-buffer-local" code nil nil [6791 6845])
            ("senator-completion-cache-flush-fcn" function (:arguments ("ignore")) nil [6847 7067])
            ("senator-completion-flatten-stream" function (:arguments ("stream" "parents" "top-level")) nil [7069 7965])
            ("senator-completion-function-args" function (:arguments ("tag")) nil [7967 8338])
            ("senator-completion-refine-name" function (:arguments ("elt")) nil [8340 10109])
            ("senator-completion-uniquify-names" function (:arguments ("completion-stream")) nil [10111 11513])
            ("senator-completion-stream" function (:arguments ("stream" "top-level")) nil [11515 12356])
            ("senator-current-type-context" function nil nil [12358 12666])
            ("senator-completion-list" function (:arguments ("in-context")) nil [12668 13372])
            ("senator-find-tag-for-completion" function (:arguments ("prefix")) nil [13374 14232])
            ("senator-find-nonterminal-by-name" function (:arguments ("ignore")) nil [14296 14412])
            ("senator-find-nonterminal-by-name-regexp" function (:arguments ("ignore")) nil [14414 14537])
            ("senator-search-tag-name" function (:arguments ("tag")) nil [14561 15606])
            ("senator-search-ignore-tag-classes" variable (:default-value (quote (code block))) nil [15608 15808])
            ("senator-search-default-tag-filter" function (:arguments ("tag")) nil [15810 16055])
            ("senator-search-tag-filter-functions" variable (:default-value (quote (senator-search-default-tag-filter))) nil [16057 16297])
            ("senator-search" function (:arguments ("searcher" "text" "bound" "noerror" "count")) nil [16299 18041])
            ("senator-next-tag" function (:user-visible-flag t) nil [18083 19424])
            ("senator-previous-tag" function (:user-visible-flag t) nil [19441 20786])
            ("semantic-alias-obsolete" code nil nil [20787 20862])
            ("senator-jump-completion-list" variable nil nil [20864 21026])
            ("senator-jump-interactive" function (:arguments ("prompt" "in-context" "no-default" "require-match")) nil [21028 22969])
            ("senator-jump-noselect" function (:arguments ("sym" "next-p" "regexp-p")) nil [22971 23563])
            ("senator-jump" function
               (:user-visible-flag t
                :arguments ("sym" "in-context" "no-default"))
                nil [23580 24487])
            ("senator-jump-regexp" function
               (:user-visible-flag t
                :arguments ("symregex" "in-context" "no-default"))
                nil [24504 25527])
            ("senator-last-completion-stats" variable nil nil [25529 25667])
            ("senator-current-symbol-start" function nil nil [25669 25894])
            ("senator-complete-symbol" function
               (:user-visible-flag t
                :arguments ("cycle-once"))
                nil [26007 28460])
            ("senator-completion-menu-summary-function" variable
               (:user-visible-flag t
                :default-value (quote semantic-format-tag-concise-prototype))
                nil [28494 28768])
            ("make-variable-buffer-local" code nil nil [28769 28839])
            ("senator-completion-menu-insert-function" variable
               (:user-visible-flag t
                :default-value (quote senator-completion-menu-insert-default))
                nil [28841 29148])
            ("make-variable-buffer-local" code nil nil [29149 29218])
            ("senator-completion-menu-insert-default" function (:arguments ("tag")) nil [29220 29357])
            ("senator-completion-menu-do-complete" function (:arguments ("tag-array")) nil [29359 29973])
            ("senator-completion-menu-item" function (:arguments ("tag")) nil [29975 30413])
            ("senator-completion-menu-window-offsets" function (:arguments ("window")) nil [30415 32124])
            ("senator-completion-menu-point-as-event" function nil nil [32126 33406])
            ("senator-completion-menu-popup" function (:user-visible-flag t) nil [33423 35632])
            ("senator-search-forward" function
               (:user-visible-flag t
                :arguments ("string" "bound" "noerror" "count"))
                nil [35681 36062])
            ("senator-re-search-forward" function
               (:user-visible-flag t
                :arguments ("regexp" "bound" "noerror" "count"))
                nil [36064 36480])
            ("senator-word-search-forward" function
               (:user-visible-flag t
                :arguments ("word" "bound" "noerror" "count"))
                nil [36482 36877])
            ("senator-search-backward" function
               (:user-visible-flag t
                :arguments ("string" "bound" "noerror" "count"))
                nil [36879 37279])
            ("senator-re-search-backward" function
               (:user-visible-flag t
                :arguments ("regexp" "bound" "noerror" "count"))
                nil [37281 37716])
            ("senator-word-search-backward" function
               (:user-visible-flag t
                :arguments ("word" "bound" "noerror" "count"))
                nil [37718 38132])
            ("senator-last-search-type" variable nil nil [38186 38279])
            ("senator-nonincremental-repeat-search-forward" function (:user-visible-flag t) nil [38281 38713])
            ("senator-nonincremental-repeat-search-backward" function (:user-visible-flag t) nil [38715 39151])
            ("senator-nonincremental-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [39153 39484])
            ("senator-nonincremental-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [39486 39829])
            ("senator-nonincremental-re-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [39831 40199])
            ("senator-nonincremental-re-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [40201 40581])
            ("senator--search-filter" variable nil nil [40583 40618])
            ("senator-search-set-tag-class-filter" function
               (:user-visible-flag t
                :arguments ("classes"))
                nil [40620 41819])
            ("senator-fold-tag" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [41966 42110])
            ("senator-unfold-tag" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [42112 42260])
            ("senator-fold-tag-toggle" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [42262 42498])
            ("semantic-up-reference" function
               (:overloadable t
                :arguments ("tag"))
                nil [42550 42917])
            ("senator-go-to-up-reference" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [42934 43994])
            ("semantic-up-reference-default" function (:arguments ("tag")) nil [43996 45971])
            ("senator-isearch-semantic-mode" variable nil nil [45973 46093])
            ("make-variable-buffer-local" code nil nil [46094 46153])
            ("senator-beginning-of-defun" function (:arguments ("arg")) nil [46155 46741])
            ("senator-end-of-defun" function (:arguments ("arg")) nil [46743 47375])
            ("senator-narrow-to-defun" function (:user-visible-flag t) nil [47377 47752])
            ("senator-mark-defun" function (:user-visible-flag t) nil [47754 48300])
            ("beginning-of-defun" function (:arguments ("around" "senator" "activate")) nil [48302 48584])
            ("end-of-defun" function (:arguments ("around" "senator" "activate")) nil [48586 48848])
            ("narrow-to-defun" function (:arguments ("around" "senator" "activate")) nil [48850 49178])
            ("mark-defun" function (:arguments ("around" "senator" "activate")) nil [49180 49505])
            ("c-mark-function" function (:arguments ("around" "senator" "activate")) nil [49507 49837])
            ("senator-add-log-tags" variable (:default-value (quote (function variable type))) nil [49839 50042])
            ("semantic-varalias-obsolete" code nil nil [50043 50149])
            ("add-log-current-defun" function (:arguments ("around" "senator" "activate")) nil [50151 50730])
            ("senator-tag-ring" variable (:default-value (make-ring 20)) nil [51065 51150])
            ("senator-copy-tag" function (:user-visible-flag t) nil [51167 51606])
            ("senator-kill-tag" function (:user-visible-flag t) nil [51623 52135])
            ("senator-yank-tag" function (:user-visible-flag t) nil [52152 52647])
            ("senator-copy-tag-to-register" function
               (:user-visible-flag t
                :arguments ("register" "kill-flag"))
                nil [52664 53350])
            ("senator-transpose-tags-up" function (:user-visible-flag t) nil [53367 54577])
            ("senator-transpose-tags-down" function (:user-visible-flag t) nil [54594 55192])
            ("senator-lazy-highlight-update" function nil nil [55237 55434])
            ("senator-isearch-search-fun" function nil nil [55592 56052])
            ("senator-isearch-toggle-semantic-mode" function (:user-visible-flag t) nil [56054 56459])
            ("senator-old-isearch-search-fun" variable nil nil [56461 56562])
            ("senator-isearch-mode-hook" function nil nil [56564 57630])
            ("semantic/senator" package nil nil [57925 57952]))          
      :file "senator.el"
      :pointmax 58111
      :fsize 58110
      :lastmodtime '(22436 31432 266422 179000)
      :unmatched-syntax '((close-paren 1392 . 1393) (symbol 1350 . 1367) (open-paren 1349 . 1350)))
    (semanticdb-table "html.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1155 1174])
            ("semantic/format" include nil nil [1175 1201])
            ("sgml-mode" include nil nil [1202 1222])
            ("semantic-command-separation-character" variable nil nil [1224 1270])
            ("semantic-html-super-regex" variable (:default-value "<\\(h[1-9]\\|title\\|script\\|body\\|a +href\\)\\>") nil [1272 1431])
            ("semantic-html-section-list" variable (:default-value (quote (("title" 1) ("script" 1) ("body" 1) ("a" 11) ("h1" 2) ("h2" 3) ("h3" 4) ("h4" 5) ("h5" 6) ("h6" 7) ("h7" 8) ("h8" 9) ("h9" 10)))) nil [1433 1712])
            ("semantic-parse-region" function
               (:parent "html-mode"
                :override-function-flag t
                :arguments ("&rest" "ignore"))
                nil [1714 2065])
            ("semantic-parse-changes" function
               (:parent "html-mode"
                :override-function-flag t)
                nil [2067 2227])
            ("semantic-html-expand-tag" function (:arguments ("tag")) nil [2229 2494])
            ("semantic-html-components" function (:arguments ("tag")) nil [2496 2618])
            ("semantic-html-parse-headings" function nil nil [2620 3401])
            ("semantic-html-set-endpoint" function (:arguments ("metataglist" "pnt")) nil [3403 3927])
            ("semantic-html-new-section-tag" function (:arguments ("name" "members" "level" "start" "end")) nil [3929 4439])
            ("semantic-html-extract-section-name" function nil nil [4441 5116])
            ("semantic-html-recursive-combobulate-list" function (:arguments ("sectionlist" "level")) nil [5118 7068])
            ("semantic-sb-tag-children-to-expand" function
               (:parent "html-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [7070 7217])
            ("semantic-imenu-expandable-tag-classes" variable nil nil [7263 7309])
            ("semantic-imenu-bucketize-file" variable nil nil [7310 7348])
            ("semantic-imenu-bucketize-type-members" variable nil nil [7349 7395])
            ("semantic-default-html-setup" function nil nil [7412 8196])
            ("define-child-mode" code nil nil [8198 8315])
            ("semantic/html" package nil nil [8317 8341]))          
      :file "html.el"
      :pointmax 8494
      :fsize 8493
      :lastmodtime '(22436 31432 262422 179000)
      :unmatched-syntax nil)
    (semanticdb-table "util.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [955 974])
            ("semantic/find" include nil nil [1141 1165])
            ("semantic/db-find" include nil nil [997 1024])
            ("declare-function" code nil nil [1168 1228])
            ("declare-function" code nil nil [1229 1284])
            ("declare-function" code nil nil [1285 1359])
            ("semantic-type-relation-separator-character" variable (:default-value (quote ("."))) nil [1372 1836])
            ("make-variable-buffer-local" code nil nil [1837 1909])
            ("semantic-equivalent-major-modes" variable nil nil [1911 2142])
            ("make-variable-buffer-local" code nil nil [2143 2204])
            ("semantic-file-tag-table" function (:arguments ("file")) nil [2384 3134])
            ("semantic-alias-obsolete" code nil nil [3136 3225])
            ("semantic-something-to-tag-table" function (:arguments ("something")) nil [3227 4914])
            ("semantic-alias-obsolete" code nil nil [4916 5015])
            ("semantic-read-symbol-history" variable nil nil [5127 5199])
            ("semantic-read-symbol" function (:arguments ("prompt" "default" "stream" "filter")) nil [5201 6112])
            ("semantic-read-variable" function (:arguments ("prompt" "default" "stream")) nil [6114 6580])
            ("semantic-read-function" function (:arguments ("prompt" "default" "stream")) nil [6582 7046])
            ("semantic-read-type" function (:arguments ("prompt" "default" "stream")) nil [7048 7496])
            ("semantic-describe-tag" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [7533 7812])
            ("semantic-add-label" function
               (:user-visible-flag t
                :arguments ("label" "value" "tag"))
                nil [7845 8225])
            ("semantic-show-label" function
               (:user-visible-flag t
                :arguments ("label" "tag"))
                nil [8227 8550])
            ("semantic-describe-buffer-var-helper" function (:arguments ("varsym" "buffer")) nil [8613 9219])
            ("semantic-describe-buffer" function (:user-visible-flag t) nil [9221 10740])
            ("semantic-assert-valid-token" function (:arguments ("tok")) nil [10742 11250])
            ("semantic-sanity-check" function
               (:user-visible-flag t
                :arguments ("cache" "over" "notfirst"))
                nil [11252 12583])
            ("semantic-find-tag-for-completion" function (:arguments ("prefix")) nil [12912 13639])
            ("semantic-complete-symbol" function
               (:user-visible-flag t
                :arguments ("predicate"))
                nil [13641 15648])
            ("semantic/util" package nil nil [15650 15674])
            ("semantic/util-modes" include nil nil [15695 15725]))          
      :file "util.el"
      :pointmax 15758
      :fsize 15757
      :lastmodtime '(22436 31432 278422 179000)
      :unmatched-syntax '((close-paren 1165 . 1166) (symbol 977 . 994) (open-paren 976 . 977)))
    (semanticdb-table "edit.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [2180 2199])
            ("semantic-after-partial-cache-change-hook" variable nil nil [2211 2663])
            ("define-obsolete-variable-alias" code nil nil [2665 2756])
            ("semantic-change-functions" variable (:default-value (quote (semantic-edits-change-function-handle-changes))) nil [2757 3009])
            ("semantic-reparse-needed-change-hook" variable nil nil [3011 3257])
            ("semantic-no-reparse-needed-change-hook" variable nil nil [3259 3580])
            ("define-obsolete-variable-alias" code nil nil [3582 3693])
            ("semantic-edits-new-change-functions" variable nil nil [3694 3865])
            ("define-obsolete-variable-alias" code nil nil [3867 3984])
            ("semantic-edits-delete-change-functions" variable nil nil [3985 4222])
            ("semantic-edits-move-change-hook" variable nil nil [4224 4479])
            ("define-obsolete-variable-alias" code nil nil [4481 4600])
            ("semantic-edits-reparse-change-functions" variable nil nil [4601 4799])
            ("semantic-edits-incremental-reparse-failed-hook" variable nil nil [4801 4976])
            ("semantic-varalias-obsolete" code nil nil [4978 5117])
            ("semantic-edits-verbose-flag" variable nil nil [5119 5321])
            ("semantic-change-function" function (:arguments ("start" "end" "length")) nil [5460 5828])
            ("semantic-changes-in-region" function (:arguments ("start" "end" "buffer")) nil [5830 6427])
            ("semantic-edits-change-function-handle-changes" function (:arguments ("start" "end" "length")) nil [6429 8293])
            ("semantic-edits-flush-change" function (:arguments ("change")) nil [8295 8525])
            ("semantic-edits-flush-changes" function nil nil [8527 8792])
            ("semantic-edits-change-in-one-tag-p" function (:arguments ("change" "hits")) nil [8794 9440])
            ("semantic-edits-os" function (:arguments ("change")) nil [9770 9964])
            ("semantic-edits-oe" function (:arguments ("change")) nil [9966 10155])
            ("semantic-edits-change-leaf-tag" function (:arguments ("change")) nil [10157 11549])
            ("semantic-edits-change-between-tags" function (:arguments ("change")) nil [11551 13757])
            ("semantic-edits-change-over-tags" function (:arguments ("change")) nil [13759 18412])
            ("semantic-parse-changes-failed" function (:arguments ("args")) nil [18523 18908])
            ("semantic-edits-incremental-fail" function nil nil [18910 19261])
            ("semantic-edits-incremental-parser" function nil nil [19278 20312])
            ("semantic-edits-assert-valid-region" function nil nil [20314 20591])
            ("semantic-edits-incremental-parser-1" function nil nil [20593 33903])
            ("defalias" code nil nil [33958 34037])
            ("semantic-edits-splice-remove" function (:arguments ("oldtags" "parent" "cachelist")) nil [34500 36760])
            ("semantic-edits-splice-insert" function (:arguments ("newtags" "parent" "cachelist")) nil [36762 38094])
            ("semantic-edits-splice-replace" function (:arguments ("oldtag" "newtag")) nil [38096 39345])
            ("add-hook" code nil nil [39347 39441])
            ("semantic/edit" package nil nil [39443 39467]))          
      :file "edit.el"
      :pointmax 39620
      :fsize 39619
      :lastmodtime '(22436 31432 262422 179000)
      :unmatched-syntax nil)
    (semanticdb-table "bovine.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1269 1288])
            ("declare-function" code nil nil [1290 1377])
            ("declare-function" code nil nil [1378 1459])
            ("declare-function" code nil nil [1460 1516])
            ("semantic-bovinate-nonterminal-check-obarray" variable nil nil [1535 1708])
            ("make-variable-buffer-local" code nil nil [1709 1782])
            ("semantic-lambda" function (:arguments ("return-val")) nil [1952 2209])
            ("semantic-bovinate-symbol-nonterminal-p" function (:arguments ("sym" "table")) nil [2441 2649])
            ("semantic-bovinate-nonterminal-db-nt" function nil nil [2651 2919])
            ("semantic-bovinate-nonterminal-check" function (:arguments ("stream" "nonterminal")) nil [2921 3790])
            ("semantic-bovinate-stream" function (:arguments ("stream" "nonterminal")) nil [3807 12394])
            ("defalias" code nil nil [12441 12508])
            ("semantic/bovine" package nil nil [12510 12536]))          
      :file "bovine.el"
      :pointmax 12693
      :fsize 12692
      :lastmodtime '(22436 31432 254422 178000)
      :unmatched-syntax nil)
    (semanticdb-table "db-el.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/db" include nil nil [1235 1257])
            ("eieio-opt" include nil nil [1258 1278])
            ("declare-function" code nil nil [1280 1346])
            ("declare-function" code nil nil [1347 1406])
            ("semanticdb-table-emacs-lisp" type
               (:superclasses "semanticdb-abstract-table"
                :members 
                  ( ("major-mode" variable (:default-value "emacs-lisp-mode") nil nil))                  
                :type "class")
                nil [1432 1598])
            ("semanticdb-refresh-table" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("obj" "force"))
                nil [1600 1760])
            ("semanticdb-needs-refresh-p" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("obj"))
                nil [1762 1883])
            ("object-print" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("obj" "strings"))
                nil [1885 2144])
            ("semanticdb-project-database-emacs-lisp" type
               (:interfaces ("eieio-singleton")
                :superclasses "semanticdb-project-database"
                :members 
                  ( ("new-table-class" variable
                       (:documentation "New tables created for this database are of this class."
                        :default-value "semanticdb-table-emacs-lisp"
                        :type "class")
                        nil nil))                  
                :type "class")
                nil [2146 2448])
            ("object-print" function
               (:parent "semanticdb-project-database-emacs-lisp"
                :arguments ("obj" "strings"))
                nil [2450 2832])
            ("semanticdb-project-system-databases" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value (list (semanticdb-project-database-emacs-lisp "Emacs")))
                nil [2914 3081])
            ("semanticdb-find-default-throttle" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value (quote (project omniscience)))
                nil [3083 3334])
            ("semanticdb-get-database-tables" function
               (:parent "semanticdb-project-database-emacs-lisp"
                :arguments ("obj"))
                nil [3366 3964])
            ("semanticdb-file-table" function
               (:parent "semanticdb-project-database-emacs-lisp"
                :arguments ("obj" "filename"))
                nil [3966 4205])
            ("semanticdb-get-tags" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("table"))
                nil [4207 4393])
            ("semanticdb-equivalent-mode" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("table" "buffer"))
                nil [4395 4732])
            ("semanticdb-full-filename" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("obj"))
                nil [4734 4903])
            ("semanticdb-normalize-tags" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("obj" "tags"))
                nil [4923 5306])
            ("semanticdb-normalize-one-tag" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("obj" "tag"))
                nil [5308 7115])
            ("help-function-arglist" function (:prototype-flag t) nil [7117 7161])
            ("defalias" code nil nil [7162 7234])
            ("make-obsolete" code nil nil [7235 7332])
            ("semanticdb-elisp-sym->tag" function (:arguments ("sym" "toktype")) nil [7334 8882])
            ("semanticdb-elisp-mapatom-collector" variable nil nil [8908 9003])
            ("semanticdb-find-tags-by-name-method" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("table" "name" "tags"))
                nil [9005 9785])
            ("semanticdb-find-tags-by-name-regexp-method" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("table" "regex" "tags"))
                nil [9787 10186])
            ("semanticdb-find-tags-for-completion-method" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("table" "prefix" "tags"))
                nil [10188 10577])
            ("semanticdb-find-tags-by-class-method" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("table" "class" "tags"))
                nil [10579 10925])
            ("semanticdb-deep-find-tags-by-name-method" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("table" "name" "tags"))
                nil [11009 11326])
            ("semanticdb-deep-find-tags-by-name-regexp-method" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("table" "regex" "tags"))
                nil [11328 11676])
            ("semanticdb-deep-find-tags-for-completion-method" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("table" "prefix" "tags"))
                nil [11678 12042])
            ("semanticdb-find-tags-external-children-of-type-method" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("table" "type" "tags"))
                nil [12069 12728])
            ("semantic/db-el" package nil nil [12730 12755]))          
      :file "db-el.el"
      :pointmax 12789
      :fsize 12788
      :lastmodtime '(22436 31432 258422 178000)
      :unmatched-syntax nil)
    (semanticdb-table "scope.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/db" include nil nil [1635 1657])
            ("semantic/analyze/fcn" include nil nil [1658 1689])
            ("semantic/ctxt" include nil nil [1690 1714])
            ("semantic/find" include nil nil [1735 1759])
            ("declare-function" code nil nil [1762 1814])
            ("declare-function" code nil nil [1815 1878])
            ("declare-function" code nil nil [1879 1948])
            ("declare-function" code nil nil [1949 2026])
            ("declare-function" code nil nil [2027 2104])
            ("declare-function" code nil nil [2105 2164])
            ("semantic-scope-cache" type
               (:superclasses "semanticdb-abstract-cache"
                :members 
                  ( ("tag" variable
                       (:documentation "The tag this scope was calculated for."
                        :default-value "nil")
                        nil nil)
                    ("scopetypes" variable
                       (:documentation "The list of types currently in scope.
For C++, this would contain anonymous namespaces known, and
anything labeled by a `using' statement."
                        :default-value "nil")
                        nil nil)
                    ("parents" variable
                       (:documentation "List of parents in scope w/in the body of this function.
Presumably, the members of these parent classes are available for access
based on private:, or public: style statements."
                        :default-value "nil")
                        nil nil)
                    ("parentinheritance" variable
                       (:documentation "Alist of parents by inheritance.
Each entry is ( PARENT . PROTECTION ), where PARENT is a type, and
PROTECTION is a symbol representing the level of inheritance, such as 'private, or 'protected."
                        :default-value "nil")
                        nil nil)
                    ("scope" variable
                       (:documentation "Items in scope due to the scopetypes or parents."
                        :default-value "nil")
                        nil nil)
                    ("fullscope" variable
                       (:documentation "All the other stuff on one master list you can search."
                        :default-value "nil")
                        nil nil)
                    ("localargs" variable
                       (:documentation "The arguments to the function tag."
                        :default-value "nil")
                        nil nil)
                    ("localvar" variable
                       (:documentation "The local variables."
                        :default-value "nil")
                        nil nil)
                    ("typescope" variable
                       (:documentation "Slot to save intermediate scope while metatypes are dereferenced."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [2177 3654])
            ("semantic-reset" function
               (:parent "semantic-scope-cache"
                :arguments ("obj"))
                nil [3738 4078])
            ("semanticdb-synchronize" function
               (:parent "semantic-scope-cache"
                :arguments ("cache" "new-tags"))
                nil [4080 4230])
            ("semanticdb-partial-synchronize" function
               (:parent "semantic-scope-cache"
                :arguments ("cache" "new-tags"))
                nil [4233 4629])
            ("semantic-scope-reset-cache" function nil nil [4631 4870])
            ("semantic-scope-set-typecache" function
               (:parent "semantic-scope-cache"
                :arguments ("cache" "types-in-scope"))
                nil [4872 5396])
            ("semantic-scope-tag-clone-with-scope" function (:arguments ("tag" "scopetags")) nil [5676 5975])
            ("semantic-scope-tag-get-scope" function (:arguments ("tag")) nil [5977 6126])
            ("semantic-analyze-scoped-types" function
               (:overloadable t
                :arguments ("position"))
                nil [6202 6414])
            ("semantic-analyze-scoped-types-default" function (:arguments ("position")) nil [6416 7813])
            ("semantic-analyze-scope-nested-tags" function
               (:overloadable t
                :arguments ("position" "scopedtypes"))
                nil [7878 8240])
            ("semantic-analyze-scope-nested-tags-default" function (:arguments ("position" "scopetypes")) nil [8242 12518])
            ("semantic-analyze-scope-lineage-tags" function
               (:overloadable t
                :arguments ("parents" "scopedtypes"))
                nil [12520 12889])
            ("semantic-analyze-scope-lineage-tags-default" function (:arguments ("parents" "scopetypes")) nil [12891 13884])
            ("semantic-analyze-scoped-tags" function
               (:overloadable t
                :arguments ("typelist" "parentlist"))
                nil [13951 14312])
            ("semantic-analyze-scoped-tags-default" function (:arguments ("typelist" "halfscope")) nil [14314 16503])
            ("semantic-analyze-scope-calculate-access" function
               (:overloadable t
                :arguments ("type" "scope"))
                nil [16568 16936])
            ("semantic-analyze-scope-calculate-access-default" function (:arguments ("type" "scope")) nil [16938 18377])
            ("semantic-completable-tags-from-type" function (:arguments ("type")) nil [18379 20113])
            ("semantic-analyze-scoped-type-parts" function (:arguments ("type" "scope" "noinherit" "protection")) nil [20115 21899])
            ("semantic-analyze-scoped-inherited-tags" function (:arguments ("type" "scope" "access")) nil [21901 23040])
            ("semantic-analyze-scoped-inherited-tag-map" function (:arguments ("type" "fcn" "scope")) nil [23042 25593])
            ("semantic-calculate-scope" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [25684 28568])
            ("semantic-calculate-scope-for-tag" function (:arguments ("tag")) nil [28570 28997])
            ("semantic-scope-find" function (:arguments ("name" "class" "scope-in")) nil [28999 31173])
            ("semantic-analyze-show" function
               (:parent "semantic-scope-cache"
                :arguments ("context"))
                nil [31187 31809])
            ("semantic/scope" package nil nil [31811 31836]))          
      :file "scope.el"
      :pointmax 31991
      :fsize 31990
      :lastmodtime '(22436 31432 266422 179000)
      :unmatched-syntax '((close-paren 1759 . 1760) (symbol 1717 . 1734) (open-paren 1716 . 1717)))
    (semanticdb-table "db-global.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cedet-global" include nil nil [1015 1038])
            ("semantic/db-find" include nil nil [1039 1066])
            ("semantic/symref/global" include nil nil [1067 1100])
            ("eieio-opt" include nil nil [1179 1199])
            ("eieio" include nil nil [1160 1176])
            ("semanticdb-enable-gnu-global-databases" function
               (:user-visible-flag t
                :arguments ("mode" "noerror"))
                nil [1231 2473])
            ("semanticdb-enable-gnu-global-hook" function nil nil [2475 2678])
            ("semanticdb-project-database-global" type
               (:interfaces ("eieio-instance-tracker")
                :superclasses "semanticdb-project-database"
                :type "class")
                nil [2680 2924])
            ("semanticdb-enable-gnu-global-in-buffer" function
               (:user-visible-flag t
                :arguments ("dont-err-if-not-available"))
                nil [2926 3812])
            ("semanticdb-table-global" type
               (:superclasses "semanticdb-search-results-table"
                :members 
                  ( ("major-mode" variable (:default-value "nil") nil nil))                  
                :type "class")
                nil [3827 3988])
            ("object-print" function
               (:parent "semanticdb-table-global"
                :arguments ("obj" "strings"))
                nil [3990 4241])
            ("semanticdb-equivalent-mode" function
               (:parent "semanticdb-table-global"
                :arguments ("table" "buffer"))
                nil [4243 4519])
            ("semanticdb-get-database-tables" function
               (:parent "semanticdb-project-database-global"
                :arguments ("obj"))
                nil [4551 5146])
            ("semanticdb-file-table" function
               (:parent "semanticdb-project-database-global"
                :arguments ("obj" "filename"))
                nil [5148 5411])
            ("semanticdb-find-tags-by-name-method" function
               (:parent "semanticdb-table-global"
                :arguments ("table" "name" "tags"))
                nil [5511 6080])
            ("semanticdb-find-tags-by-name-regexp-method" function
               (:parent "semanticdb-table-global"
                :arguments ("table" "regex" "tags"))
                nil [6082 6536])
            ("semanticdb-find-tags-for-completion-method" function
               (:parent "semanticdb-table-global"
                :arguments ("table" "prefix" "tags"))
                nil [6538 7243])
            ("semanticdb-deep-find-tags-by-name-method" function
               (:parent "semanticdb-table-global"
                :arguments ("table" "name" "tags"))
                nil [7415 7724])
            ("semanticdb-deep-find-tags-by-name-regexp-method" function
               (:parent "semanticdb-table-global"
                :arguments ("table" "regex" "tags"))
                nil [7726 8066])
            ("semanticdb-deep-find-tags-for-completion-method" function
               (:parent "semanticdb-table-global"
                :arguments ("table" "prefix" "tags"))
                nil [8068 8424])
            ("semantic/db-global" package nil nil [8426 8455]))          
      :file "db-global.el"
      :pointmax 8618
      :fsize 8617
      :lastmodtime '(22436 31432 258422 178000)
      :unmatched-syntax '((close-paren 1202 . 1203) (symbol 1103 . 1120) (open-paren 1102 . 1103)))
    (semanticdb-table "canned-configs.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/fw" include nil nil [1243 1265])
            ("semantic/edit" include nil nil [1315 1339])
            ("semantic/idle" include nil nil [1288 1312])
            ("declare-function" code nil nil [1342 1385])
            ("declare-function" code nil nil [1386 1438])
            ("declare-function" code nil nil [1439 1515])
            ("declare-function" code nil nil [1516 1593])
            ("declare-function" code nil nil [1594 1677])
            ("declare-function" code nil nil [1678 1757])
            ("declare-function" code nil nil [1758 1843])
            ("declare-function" code nil nil [1844 1932])
            ("eval-after-load" code nil nil [1964 2034])
            ("semantic-load-imenu-string" variable (:default-value "TAGS") nil [2067 2187])
            ("semantic-load-system-cache-loaded" variable nil nil [2189 2342])
            ("semantic-load-enable-minimum-features" function (:user-visible-flag t) nil [2344 2839])
            ("semantic-load-enable-code-helpers" function (:user-visible-flag t) nil [2841 3845])
            ("semantic-load-code-helpers-1" function nil nil [3847 4210])
            ("semantic-load-enable-gaudy-code-helpers" function (:user-visible-flag t) nil [4212 5329])
            ("semantic-load-enable-gaudy-code-helpers-1" function nil nil [5331 5492])
            ("semantic-load-enable-excessive-code-helpers" function (:user-visible-flag t) nil [5494 6593])
            ("semantic-load-enable-excessive-code-helpers-1" function nil nil [6595 6955])
            ("semantic-load-enable-semantic-debugging-helpers" function (:user-visible-flag t) nil [6957 8109])
            ("semantic-load-enable-all-ectags-support" function (:user-visible-flag t) nil [8111 8533])
            ("semantic-alias-obsolete" code nil nil [8535 8666])
            ("semantic/canned-configs" package nil nil [8668 8702]))          
      :file "canned-configs.el"
      :pointmax 8745
      :fsize 8744
      :lastmodtime '(22436 31432 258422 178000)
      :unmatched-syntax '((close-paren 1339 . 1340) (symbol 1268 . 1285) (open-paren 1267 . 1268)))
    (semanticdb-table "db-file.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/db" include nil nil [961 983])
            ("cedet-files" include nil nil [984 1006])
            ("data-debug" include nil nil [1007 1028])
            ("semanticdb-file-version" variable (:default-value semantic-version) nil [1030 1140])
            ("semanticdb-file-incompatible-version" variable (:default-value "1.4") nil [1141 1254])
            ("semanticdb-default-file-name" variable (:default-value "semantic.cache") nil [1272 1407])
            ("semanticdb-default-save-directory" variable (:default-value (locate-user-emacs-file "semanticdb" ".semanticdb")) nil [1409 2070])
            ("semanticdb-persistent-path" variable (:default-value (quote (always))) nil [2072 2775])
            ("define-obsolete-variable-alias" code nil nil [2777 2886])
            ("semanticdb-save-database-functions" variable nil nil [2887 3119])
            ("semanticdb-dir-sep-char" variable (:default-value (if (boundp (quote directory-sep-char)) (symbol-value (quote directory-sep-char)) 47)) nil [3121 3390])
            ("semanticdb-fix-pathname" function (:arguments ("dir")) nil [3392 3607])
            ("semanticdb-project-database-file" type
               (:interfaces ("eieio-persistent")
                :superclasses "semanticdb-project-database"
                :members 
                  ( ("file-header-line" variable (:default-value ";; SEMANTICDB Tags save file") nil nil)
                    ("do-backups" variable (:default-value "nil") nil nil)
                    ("semantic-tag-version" variable
                       (:documentation "The version of the tags saved.
The default value is 1.4.  In semantic 1.4 there was no versioning, so
when those files are loaded, this becomes the version number.
To save the version number, we must hand-set this version string."
                        :default-value "1.4")
                        nil nil)
                    ("semanticdb-version" variable
                       (:documentation "The version of the object system saved.
The default value is 1.4.  In semantic 1.4, there was no versioning,
so when those files are loaded, this becomes the version number.
To save the version number, we must hand-set this version string."
                        :default-value "1.4")
                        nil nil))                  
                :type "class")
                nil [3921 4846])
            ("semanticdb-create-database" function
               (:parent "semanticdb-project-database-file"
                :arguments ("dbc" "directory"))
                nil [4861 5991])
            ("declare-function" code nil nil [6006 6051])
            ("semanticdb-load-database" function (:arguments ("filename")) nil [6053 7361])
            ("semanticdb-file-loaded-p" function (:arguments ("filename")) nil [7363 7550])
            ("semanticdb-file-directory-exists-p" function
               (:parent "semanticdb-project-database-file"
                :arguments ("DB" "suppress-questions"))
                nil [7552 8346])
            ("semanticdb-save-db" function
               (:parent "semanticdb-project-database-file"
                :arguments ("DB" "suppress-questions"))
                nil [8348 9748])
            ("semanticdb-live-p" function
               (:parent "semanticdb-project-database"
                :arguments ("obj"))
                nil [9750 10041])
            ("semanticdb-live-p" function
               (:parent "semanticdb-table"
                :arguments ("obj"))
                nil [10043 10368])
            ("semanticdb-data-debug-on-write-error" variable nil nil [10370 10560])
            ("declare-function" code nil nil [10562 10617])
            ("object-write" function
               (:parent "semanticdb-table"
                :arguments ("obj"))
                nil [10619 12106])
            ("semanticdb-write-directory-p" function
               (:parent "semanticdb-project-database-file"
                :arguments ("obj"))
                nil [12129 13445])
            ("semanticdb-file-table" function
               (:parent "semanticdb-project-database-file"
                :arguments ("obj" "filename"))
                nil [13476 13811])
            ("semanticdb-file-name-non-directory" function
               (:parent "semanticdb-project-database-file"
                :arguments ("dbclass"))
                nil [13813 14027])
            ("semanticdb-file-name-directory" function
               (:parent "semanticdb-project-database-file"
                :arguments ("dbclass" "directory"))
                nil [14029 14568])
            ("semanticdb-cache-filename" function
               (:parent "semanticdb-project-database-file"
                :arguments ("dbclass" "path"))
                nil [14570 15044])
            ("semanticdb-full-filename" function
               (:parent "semanticdb-project-database-file"
                :arguments ("obj"))
                nil [15046 15189])
            ("semanticdb-cleanup-cache-files" function
               (:user-visible-flag t
                :arguments ("noerror"))
                nil [15214 16693])
            ("semantic/db-file" package nil nil [16695 16722]))          
      :file "db-file.el"
      :pointmax 16881
      :fsize 16880
      :lastmodtime '(22436 31432 258422 178000)
      :unmatched-syntax nil)
    (semanticdb-table "grammar.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1018 1037])
            ("semantic/wisent" include nil nil [1038 1064])
            ("semantic/ctxt" include nil nil [1065 1089])
            ("semantic/format" include nil nil [1090 1116])
            ("semantic/idle" include nil nil [1117 1141])
            ("help-fns" include nil nil [1142 1161])
            ("or" code nil nil [1234 1316])
            ("declare-function" code nil nil [1318 1389])
            ("declare-function" code nil nil [1390 1452])
            ("declare-function" code nil nil [1453 1539])
            ("or" code nil nil [1660 1744])
            ("semantic/db" include nil nil [1635 1657])
            ("semantic/find" include nil nil [1608 1632])
            ("semantic/edit" include nil nil [1581 1605])
            ("eldoc" include nil nil [1562 1578])
            ("declare-function" code nil nil [1747 1833])
            ("semantic-grammar-lex-c-char-re" variable
               (:constant-flag t
                :default-value "'\\s\\?.'")
                nil [1866 1966])
            ("define-lex-regex-analyzer" code nil nil [2088 2458])
            ("semantic-grammar-epilogue-start" function nil nil [2460 2718])
            ("define-lex-regex-analyzer" code nil nil [2720 3138])
            ("semantic-grammar-lexer" function (:lexical-analyzer-flag t) nil [3140 4206])
            ("semantic-grammar-lex-buffer" function (:user-visible-flag t) nil [4230 4686])
            ("semantic-grammar-ASSOC" function (:arguments ("args")) nil [4731 5141])
            ("semantic-grammar-quote-p" function (:arguments ("sym")) nil [5143 5355])
            ("semantic-grammar-backquote-p" function (:arguments ("sym")) nil [5357 5581])
            ("semantic-tag-components" function
               (:parent "semantic-grammar-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [5627 5790])
            ("semantic-grammar-first-tag-name" function (:arguments ("class")) nil [5792 6217])
            ("semantic-grammar-tag-symbols" function (:arguments ("class")) nil [6219 6722])
            ("semantic-grammar-item-text" function (:arguments ("item")) nil [6724 6921])
            ("semantic-grammar-item-value" function (:arguments ("item")) nil [6923 7300])
            ("semantic-grammar-prologue" function nil nil [7302 7923])
            ("semantic-grammar-epilogue" function nil nil [7925 8760])
            ("semantic-grammar-buffer-file" function (:arguments ("buffer")) nil [8762 8993])
            ("semantic-grammar-package" function (:arguments ("fromfile")) nil [8995 9670])
            ("semantic-grammar-languagemode" function nil nil [9672 9826])
            ("semantic-grammar-start" function nil nil [9828 9961])
            ("semantic-grammar-scopestart" function nil nil [9963 10125])
            ("semantic-grammar-quotemode" function nil nil [10127 10286])
            ("semantic-grammar-keywords" function nil nil [10288 10692])
            ("semantic-grammar-keyword-properties" function (:arguments ("keywords")) nil [10694 11710])
            ("semantic-grammar-tokens" function nil nil [11712 13552])
            ("semantic-grammar-token-%type-properties" function (:arguments ("props")) nil [13554 14202])
            ("semantic-grammar-token-%put-properties" function (:arguments ("tokens")) nil [14204 14872])
            ("semantic-grammar-token-properties" function (:arguments ("tokens")) nil [14874 15350])
            ("semantic-grammar-use-macros" function nil nil [15352 15958])
            ("semantic-grammar-macros" variable nil nil [15960 16046])
            ("make-variable-buffer-local" code nil nil [16047 16100])
            ("semantic-grammar-macros" function nil nil [16102 16329])
            ("semantic-grammar-keywordtable-builder-default" function nil nil [16422 16689])
            ("semantic-grammar-keywordtable-builder" function (:overloadable t) nil [16691 16798])
            ("semantic-grammar-tokentable-builder-default" function nil nil [16827 17089])
            ("semantic-grammar-tokentable-builder" function (:overloadable t) nil [17091 17213])
            ("semantic-grammar-parsetable-builder-default" function nil nil [17243 17408])
            ("semantic-grammar-parsetable-builder" function (:overloadable t) nil [17410 17514])
            ("semantic-grammar-setupcode-builder-default" function nil nil [17549 17716])
            ("semantic-grammar-setupcode-builder" function (:overloadable t) nil [17718 17825])
            ("semantic--grammar-input-buffer" variable nil nil [17864 17908])
            ("semantic--grammar-output-buffer" variable nil nil [17909 17953])
            ("semantic--grammar-package" variable nil nil [17954 17992])
            ("semantic--grammar-provide" variable nil nil [17993 18031])
            ("semantic-grammar-keywordtable" function nil nil [18033 18192])
            ("semantic-grammar-tokentable" function nil nil [18194 18347])
            ("semantic-grammar-parsetable" function nil nil [18349 18502])
            ("semantic-grammar-setupfunction" function nil nil [18504 18664])
            ("semantic-grammar-as-string" function (:arguments ("object")) nil [18666 18839])
            ("semantic-grammar-insert-defconst" function (:arguments ("name" "value" "docstring")) nil [18841 19130])
            ("semantic-grammar-insert-defun" function (:arguments ("name" "body" "docstring")) nil [19132 19417])
            ("semantic-grammar-insert-define" function (:arguments ("define")) nil [19419 19933])
            ("semantic-grammar-header-template" variable
               (:constant-flag t
                :default-value (quote (";;; " file " --- Generated parser support file

" copy "

;; Author: " user-full-name " <" user-mail-address ">
;; Created: " date "
;; Keywords: syntax
;; X-RCS: " vcid "

;; This file is not part of GNU Emacs.

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation, either version 3 of
;; the License, or (at your option) any later version.

;; This software is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:
;;
;; PLEASE DO NOT MANUALLY EDIT THIS FILE!  It is automatically
;; generated from the grammar file " gram ".

;;; History:
;;

;;; Code:

(require 'semantic/lex)
(eval-when-compile (require 'semantic/bovine))
")))
                nil [19935 21182])
            ("semantic-grammar-footer-template" variable
               (:constant-flag t
                :default-value (quote ("
(provide '" libr ")

;;; " file " ends here
")))
                nil [21184 21388])
            ("semantic-grammar-copyright-line" function nil nil [21390 21791])
            ("semantic-grammar-header" function nil nil [21793 22590])
            ("semantic-grammar-footer" function nil nil [22592 23043])
            ("semantic-grammar-token-data" function nil nil [23045 23215])
            ("semantic-grammar-keyword-data" function nil nil [23217 23385])
            ("semantic-grammar-parser-data" function nil nil [23387 23545])
            ("semantic-grammar-setup-data" function nil nil [23547 23713])
            ("semantic-grammar--lex-block-specs" variable nil nil [23756 23798])
            ("semantic-grammar--lex-delim-spec" function (:arguments ("block-spec")) nil [23800 24364])
            ("semantic-grammar--lex-block-specs" function nil nil [24366 26246])
            ("semantic-grammar-quoted-form" function (:arguments ("exp")) nil [26248 26465])
            ("semantic-grammar-insert-defanalyzer" function (:arguments ("type")) nil [26467 28572])
            ("semantic-grammar-insert-defanalyzers" function nil nil [28574 29092])
            ("semantic-grammar-file-regexp" variable (:default-value "\\.[wb]y$") nil [29142 29276])
            ("semantic-grammar-noninteractive" function nil nil [29278 29451])
            ("semantic-grammar-create-package" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [29453 34420])
            ("semantic-grammar-recreate-package" function (:user-visible-flag t) nil [34422 34654])
            ("semantic-grammar-batch-build-one-package" function (:arguments ("file")) nil [34656 36037])
            ("semantic-grammar-batch-build-packages" function nil nil [36039 37643])
            ("semantic--grammar-macros-regexp-1" variable nil nil [37682 37728])
            ("make-variable-buffer-local" code nil nil [37729 37792])
            ("semantic--grammar-macros-regexp-1" function nil nil [37794 38383])
            ("semantic--grammar-macdecl-re" variable
               (:constant-flag t
                :default-value "\\<%use-macros\\>[ 	
]+\\(\\sw\\|\\s_\\)+[ 	
]+{")
                nil [38385 38540])
            ("semantic--grammar-macros-regexp-2" variable nil nil [38542 38588])
            ("make-variable-buffer-local" code nil nil [38589 38652])
            ("semantic--grammar-clear-macros-regexp-2" function (:arguments ("ignore")) nil [38654 38926])
            ("semantic--grammar-macros-regexp-2" function nil nil [38928 39881])
            ("semantic--grammar-macros-matcher" function (:arguments ("end")) nil [39883 40231])
            ("define-obsolete-variable-alias" code nil nil [40268 40376])
            ("semantic-grammar-mode-syntax-table" variable (:default-value (let ((table (make-syntax-table (standard-syntax-table)))) (modify-syntax-entry 58 "." table) (modify-syntax-entry 62 "." table) (modify-syntax-entry 60 "." table) (modify-syntax-entry 124 "." table) (modify-syntax-entry 59 ". 12" table) (modify-syntax-entry 10 ">" table) (modify-syntax-entry 34 "\"" table) (modify-syntax-entry 37 "w" table) (modify-syntax-entry 45 "_" table) (modify-syntax-entry 46 "_" table) (modify-syntax-entry 92 "\\" table) (modify-syntax-entry 96 "'" table) (modify-syntax-entry 39 "'" table) (modify-syntax-entry 44 "'" table) (modify-syntax-entry 35 "'" table) table)) nil [40377 41404])
            ("semantic-grammar-mode-hook" variable nil nil [41406 41495])
            ("semantic-grammar-mode-keywords-1" variable (:default-value (\` (("\\(\\<%%\\>\\|\\<%[{}]\\)" 0 font-lock-reference-face) ("\\(%\\)\\(\\(\\sw\\|\\s_\\)+\\)" (1 font-lock-reference-face) (2 font-lock-keyword-face)) ("\\<error\\>" 0 (unless (semantic-grammar-in-lisp-p) (quote bold))) ("^\\(\\(\\sw\\|\\s_\\)+\\)[ 
	]*:" 1 font-lock-function-name-face) (semantic--grammar-macros-matcher 1 (\, (if (boundp (quote font-lock-builtin-face)) (quote font-lock-builtin-face) (quote font-lock-preprocessor-face)))) ("\\$\\(\\sw\\|\\s_\\)*" 0 font-lock-variable-name-face) ("<\\(\\(\\sw\\|\\s_\\)+\\)>" 1 font-lock-type-face) ((\, semantic-grammar-lex-c-char-re) 0 (\, (if (boundp (quote font-lock-constant-face)) (quote font-lock-constant-face) (quote font-lock-string-face))) t) ("[
	 ]+:\\sw+\\>" 0 font-lock-builtin-face)))) nil [41497 42607])
            ("semantic-grammar-mode-keywords-2" variable (:default-value (append semantic-grammar-mode-keywords-1 (if (boundp (quote lisp-font-lock-keywords-1)) lisp-font-lock-keywords-1 lisp-el-font-lock-keywords-1))) nil [42609 42872])
            ("semantic-grammar-mode-keywords-3" variable (:default-value (append semantic-grammar-mode-keywords-1 (if (boundp (quote lisp-font-lock-keywords-2)) lisp-font-lock-keywords-2 lisp-el-font-lock-keywords-2))) nil [42874 43137])
            ("semantic-grammar-mode-keywords" variable (:default-value semantic-grammar-mode-keywords-1) nil [43139 43280])
            ("define-obsolete-variable-alias" code nil nil [43282 43372])
            ("semantic-grammar-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km "|" (quote semantic-grammar-electric-punctuation)) (define-key km ";" (quote semantic-grammar-electric-punctuation)) (define-key km "%" (quote semantic-grammar-electric-punctuation)) (define-key km "(" (quote semantic-grammar-electric-punctuation)) (define-key km ")" (quote semantic-grammar-electric-punctuation)) (define-key km ":" (quote semantic-grammar-electric-punctuation)) (define-key km "	" (quote semantic-grammar-indent)) (define-key km "" (quote semantic-grammar-create-package)) (define-key km "" (quote semantic-grammar-find-macro-expander)) (define-key km "" (quote semantic-grammar-insert-keyword)) km)) nil [43373 44268])
            ("semantic-grammar-menu" variable (:default-value (quote ("Grammar" ["Indent Line" semantic-grammar-indent] ["Complete Symbol" completion-at-point] ["Find Macro" semantic-grammar-find-macro-expander] "--" ["Insert %keyword" semantic-grammar-insert-keyword] "--" ["Update Lisp Package" semantic-grammar-create-package] ["Recreate Lisp Package" semantic-grammar-recreate-package]))) nil [44270 44696])
            ("semantic-grammar-setup-menu-emacs" function (:arguments ("symbol" "mode-menu")) nil [44698 45320])
            ("semantic-grammar-setup-menu-xemacs" function (:arguments ("symbol" "mode-menu")) nil [45322 46067])
            ("semantic-grammar-setup-menu" function (:arguments ("mode-menu")) nil [46069 46459])
            ("semantic-grammar-in-lisp-p" function nil nil [46461 46713])
            ("semantic-grammar-edits-new-change-hook-fcn" function (:arguments ("overlay")) nil [46715 47389])
            ("define-derived-mode" code nil nil [47391 49956])
            ("semantic-grammar-skip-quoted-syntax-table" variable (:default-value (let ((st (copy-syntax-table semantic-grammar-mode-syntax-table))) (modify-syntax-entry 39 "$" st) st)) nil [49991 50318])
            ("semantic-grammar-backward-item" function nil nil [50320 50861])
            ("semantic-grammar-anchored-indentation" function nil nil [50863 51467])
            ("semantic-grammar-do-grammar-indent" function nil nil [51469 52483])
            ("semantic-grammar-brackets-as-parens-syntax-table" variable (:default-value (let ((st (copy-syntax-table emacs-lisp-mode-syntax-table))) (modify-syntax-entry 123 "(}  " st) (modify-syntax-entry 125 "){  " st) st)) nil [52485 52804])
            ("semantic-grammar-do-lisp-indent" function nil nil [52806 53785])
            ("semantic-grammar-indent" function (:user-visible-flag t) nil [53787 54271])
            ("semantic-grammar-electric-punctuation" function (:user-visible-flag t) nil [54273 54466])
            ("semantic-grammar-insert-keyword" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [54468 54796])
            ("semantic--grammar-macro-function-tag" function (:arguments ("name")) nil [54823 55260])
            ("semantic--grammar-find-macro-symbol-library" function (:arguments ("def")) nil [55262 55564])
            ("semantic--grammar-macro-lib-part" function (:arguments ("def")) nil [55566 55836])
            ("semantic--grammar-macro-compl-elt" function (:arguments ("def" "full")) nil [55838 56253])
            ("semantic--grammar-macro-compl-dict" function nil nil [56255 56787])
            ("semantic-grammar-find-macro-expander" function
               (:user-visible-flag t
                :arguments ("macro-name" "library"))
                nil [56789 58110])
            ("semantic-grammar-syntax-help" variable (:default-value (\` (("symbol" . "Syntax: A symbol of alpha numeric and symbol characters") ("number" . "Syntax: Numeric characters.") ("punctuation" . "Syntax: Punctuation character.") ("semantic-list" . "Syntax: A list delimited by any valid list characters") ("open-paren" . "Syntax: Open Parenthesis character") ("close-paren" . "Syntax: Close Parenthesis character") ("string" . "Syntax: String character delimited text") ("comment" . "Syntax: Comment character delimited text") ("EMPTY" . "Syntax: Match empty text") ("ASSOC" . "Lambda Key: (ASSOC key1 value1 key2 value2 ...)") ("EXPAND" . "Lambda Key: (EXPAND <list id> <rule>)") ("EXPANDFULL" . "Lambda Key: (EXPANDFULL <list id> <rule>)") ("TAG" . "Generic Tag Generation: (TAG <name> <tag-class> [ :key value ]*)") ("VARIABLE-TAG" . "(VARIABLE-TAG <name> <lang-type> <default-value> [ :key value ]*)") ("FUNCTION-TAG" . "(FUNCTION-TAG <name> <lang-type> <arg-list> [ :key value ]*)") ("TYPE-TAG" . "(TYPE-TAG <name> <lang-type> <part-list> <parents> [ :key value ]*)") ("INCLUDE-TAG" . "(INCLUDE-TAG <name> <system-flag> [ :key value ]*)") ("PACKAGE-TAG" . "(PACKAGE-TAG <name> <detail> [ :key value ]*)") ("CODE-TAG" . "(CODE-TAG <name> <detail> [ :key value ]*)") ("ALIAS-TAG" . "(ALIAS-TAG <name> <aliasclass> <definition> [:key value]*)") ("$1" . "Match Value: Value from match list in slot 1") ("$2" . "Match Value: Value from match list in slot 2") ("$3" . "Match Value: Value from match list in slot 3") ("$4" . "Match Value: Value from match list in slot 4") ("$5" . "Match Value: Value from match list in slot 5") ("$6" . "Match Value: Value from match list in slot 6") ("$7" . "Match Value: Value from match list in slot 7") ("$8" . "Match Value: Value from match list in slot 8") ("$9" . "Match Value: Value from match list in slot 9") (",$1" . "Match Value: Value from match list in slot 1") (",$2" . "Match Value: Value from match list in slot 2") (",$3" . "Match Value: Value from match list in slot 3") (",$4" . "Match Value: Value from match list in slot 4") (",$5" . "Match Value: Value from match list in slot 5") (",$6" . "Match Value: Value from match list in slot 6") (",$7" . "Match Value: Value from match list in slot 7") (",$8" . "Match Value: Value from match list in slot 8") (",$9" . "Match Value: Value from match list in slot 9")))) nil [58136 60844])
            ("declare-function" code nil nil [60846 60897])
            ("declare-function" code nil nil [60898 60955])
            ("declare-function" code nil nil [60956 61004])
            ("declare-function" code nil nil [61005 61059])
            ("declare-function" code nil nil [61060 61110])
            ("semantic-grammar-eldoc-get-macro-docstring" function (:arguments ("macro" "expander")) nil [61112 61946])
            ("semantic-idle-summary-current-symbol-info" function
               (:parent "semantic-grammar-mode"
                :override-function-flag t)
                nil [61948 63444])
            ("semantic-tag-boundary-p" function
               (:parent "semantic-grammar-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [63446 63704])
            ("semantic-ctxt-current-function" function
               (:parent "semantic-grammar-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [63706 64038])
            ("semantic-ctxt-current-argument" function
               (:parent "semantic-grammar-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [64040 64381])
            ("semantic-ctxt-current-assignment" function
               (:parent "semantic-grammar-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [64383 64714])
            ("semantic-ctxt-current-class-list" function
               (:parent "semantic-grammar-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [64716 65091])
            ("semantic-ctxt-current-mode" function
               (:parent "semantic-grammar-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [65093 65544])
            ("semantic-format-tag-abbreviate" function
               (:parent "semantic-grammar-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [65546 66108])
            ("semantic-format-tag-summarize" function
               (:parent "semantic-grammar-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [66110 68829])
            ("semantic-analyze-current-context" function
               (:parent "semantic-grammar-mode"
                :override-function-flag t
                :arguments ("point"))
                nil [68854 69891])
            ("semantic-analyze-possible-completions" function
               (:parent "semantic-grammar-mode"
                :override-function-flag t
                :arguments ("context" "&rest" "flags"))
                nil [69893 70712])
            ("semantic/grammar" package nil nil [70714 70741]))          
      :file "grammar.el"
      :pointmax 70777
      :fsize 70776
      :lastmodtime '(22436 31432 262422 179000)
      :unmatched-syntax '((close-paren 1744 . 1745) (symbol 1542 . 1559) (open-paren 1541 . 1542)))
    (semanticdb-table "wisent.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1068 1087])
            ("semantic/wisent/wisent" include nil nil [1088 1121])
            ("wisent-lex-istream" variable nil nil [1148 1232])
            ("wisent-lex-lookahead" variable nil nil [1234 1357])
            ("semantic-alias-obsolete" code nil nil [1467 1583])
            ("wisent-lex-eoi" function nil nil [1585 1811])
            ("define-wisent-lexer" function (:arguments ("name" "doc" "body")) nil [1813 2667])
            ("define-wisent-lexer" code nil nil [2669 3204])
            ("wisent-error-function" variable nil nil [3230 3351])
            ("make-variable-buffer-local" code nil nil [3352 3403])
            ("wisent-lexer-function" variable (:default-value (quote wisent-lex)) nil [3405 3573])
            ("make-variable-buffer-local" code nil nil [3574 3625])
            ("wisent-raw-tag" function (:arguments ("semantic-tag")) nil [3648 4021])
            ("wisent-cook-tag" function (:arguments ("raw-tag")) nil [4023 4398])
            ("wisent-collect-unmatched-syntax" function (:arguments ("nomatch")) nil [4433 5000])
            ("wisent-parse-stream" function (:arguments ("stream" "goal")) nil [5546 9973])
            ("wisent-parse-region" function (:arguments ("start" "end" "goal" "depth" "returnonerror")) nil [9975 12865])
            ("add-hook" code nil nil [12899 13042])
            ("semantic/wisent" package nil nil [13044 13070]))          
      :file "wisent.el"
      :pointmax 13105
      :fsize 13104
      :lastmodtime '(22436 31432 278422 179000)
      :unmatched-syntax nil)
    (semanticdb-table "grammar-wy.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/lex" include nil nil [1074 1097])
            ("semantic/bovine" include nil nil [1117 1143])
            ("semantic-grammar-wy--nterm" variable nil nil [1201 1240])
            ("semantic-grammar-wy--rindx" variable nil nil [1287 1326])
            ("semantic-grammar-wy--keyword-table" variable
               (:constant-flag t
                :default-value (semantic-lex-make-keyword-table (quote (("%default-prec" . DEFAULT-PREC) ("%no-default-prec" . NO-DEFAULT-PREC) ("%keyword" . KEYWORD) ("%languagemode" . LANGUAGEMODE) ("%left" . LEFT) ("%nonassoc" . NONASSOC) ("%package" . PACKAGE) ("%provide" . PROVIDE) ("%prec" . PREC) ("%put" . PUT) ("%quotemode" . QUOTEMODE) ("%right" . RIGHT) ("%scopestart" . SCOPESTART) ("%start" . START) ("%token" . TOKEN) ("%type" . TYPE) ("%use-macros" . USE-MACROS))) (quote nil)))
                nil [1349 1963])
            ("semantic-grammar-wy--token-table" variable
               (:constant-flag t
                :default-value (semantic-lex-make-type-table (quote (("punctuation" (GT . ">") (LT . "<") (OR . "|") (SEMI . ";") (COLON . ":")) ("close-paren" (RBRACE . "}") (RPAREN . ")")) ("open-paren" (LBRACE . "{") (LPAREN . "(")) ("block" (BRACE_BLOCK . "(LBRACE RBRACE)") (PAREN_BLOCK . "(LPAREN RPAREN)")) ("code" (EPILOGUE . "%%...EOF") (PROLOGUE . "%{...%}")) ("sexp" (SEXP)) ("qlist" (PREFIXED_LIST)) ("char" (CHARACTER)) ("symbol" (PERCENT_PERCENT . "\\`%%\\'") (SYMBOL)) ("string" (STRING)))) (quote (("punctuation" :declared t) ("block" :declared t) ("sexp" matchdatatype sexp) ("sexp" syntax "\\=") ("sexp" :declared t) ("qlist" matchdatatype sexp) ("qlist" syntax "\\s'\\s-*(") ("qlist" :declared t) ("char" syntax semantic-grammar-lex-c-char-re) ("char" :declared t) ("symbol" syntax ":?\\(\\sw\\|\\s_\\)+") ("symbol" :declared t) ("string" :declared t) ("keyword" :declared t)))))
                nil [1965 3122])
            ("semantic-grammar-wy--parse-table" variable
               (:constant-flag t
                :default-value (progn (eval-when-compile (require (quote semantic/wisent/comp))) (wisent-compile-grammar (quote ((DEFAULT-PREC NO-DEFAULT-PREC KEYWORD LANGUAGEMODE LEFT NONASSOC PACKAGE PROVIDE PREC PUT QUOTEMODE RIGHT SCOPESTART START TOKEN TYPE USE-MACROS STRING SYMBOL PERCENT_PERCENT CHARACTER PREFIXED_LIST SEXP PROLOGUE EPILOGUE PAREN_BLOCK BRACE_BLOCK LPAREN RPAREN LBRACE RBRACE COLON SEMI OR LT GT) nil (grammar ((prologue)) ((epilogue)) ((declaration)) ((nonterminal)) ((PERCENT_PERCENT))) (prologue ((PROLOGUE) (wisent-raw-tag (semantic-tag-new-code "prologue" nil)))) (epilogue ((EPILOGUE) (wisent-raw-tag (semantic-tag-new-code "epilogue" nil)))) (declaration ((decl) (eval $1))) (decl ((default_prec_decl)) ((no_default_prec_decl)) ((languagemode_decl)) ((package_decl)) ((provide_decl)) ((precedence_decl)) ((put_decl)) ((quotemode_decl)) ((scopestart_decl)) ((start_decl)) ((keyword_decl)) ((token_decl)) ((type_decl)) ((use_macros_decl))) (default_prec_decl ((DEFAULT-PREC) (\` (wisent-raw-tag (semantic-tag "default-prec" (quote assoc) :value (quote ("t"))))))) (no_default_prec_decl ((NO-DEFAULT-PREC) (\` (wisent-raw-tag (semantic-tag "default-prec" (quote assoc) :value (quote ("nil"))))))) (languagemode_decl ((LANGUAGEMODE symbols) (\` (wisent-raw-tag (semantic-tag (quote (\, (car $2))) (quote languagemode) :rest (quote (\, (cdr $2)))))))) (package_decl ((PACKAGE SYMBOL) (\` (wisent-raw-tag (semantic-tag-new-package (quote (\, $2)) nil))))) (provide_decl ((PROVIDE SYMBOL) (\` (wisent-raw-tag (semantic-tag (quote (\, $2)) (quote provide)))))) (precedence_decl ((associativity token_type_opt items) (\` (wisent-raw-tag (semantic-tag (quote (\, $1)) (quote assoc) :type (quote (\, $2)) :value (quote (\, $3))))))) (associativity ((LEFT) (progn "left")) ((RIGHT) (progn "right")) ((NONASSOC) (progn "nonassoc"))) (put_decl ((PUT put_name put_value) (\` (wisent-raw-tag (semantic-tag (quote (\, $2)) (quote put) :value (quote (\, (list $3))))))) ((PUT put_name put_value_list) (\` (wisent-raw-tag (semantic-tag (quote (\, $2)) (quote put) :value (quote (\, $3)))))) ((PUT put_name_list put_value) (\` (wisent-raw-tag (semantic-tag (quote (\, (car $2))) (quote put) :rest (quote (\, (cdr $2))) :value (quote (\, (list $3))))))) ((PUT put_name_list put_value_list) (\` (wisent-raw-tag (semantic-tag (quote (\, (car $2))) (quote put) :rest (quote (\, (cdr $2))) :value (quote (\, $3))))))) (put_name_list ((BRACE_BLOCK) (mapcar (quote semantic-tag-name) (semantic-parse-region (car $region1) (cdr $region1) (quote put_names) 1)))) (put_names ((LBRACE) nil) ((RBRACE) nil) ((put_name) (wisent-raw-tag (semantic-tag $1 (quote put-name))))) (put_name ((SYMBOL)) ((token_type))) (put_value_list ((BRACE_BLOCK) (mapcar (quote semantic-tag-code-detail) (semantic-parse-region (car $region1) (cdr $region1) (quote put_values) 1)))) (put_values ((LBRACE) nil) ((RBRACE) nil) ((put_value) (wisent-raw-tag (semantic-tag-new-code "put-value" $1)))) (put_value ((SYMBOL any_value) (cons $1 $2))) (scopestart_decl ((SCOPESTART SYMBOL) (\` (wisent-raw-tag (semantic-tag (quote (\, $2)) (quote scopestart)))))) (quotemode_decl ((QUOTEMODE SYMBOL) (\` (wisent-raw-tag (semantic-tag (quote (\, $2)) (quote quotemode)))))) (start_decl ((START symbols) (\` (wisent-raw-tag (semantic-tag (quote (\, (car $2))) (quote start) :rest (quote (\, (cdr $2)))))))) (keyword_decl ((KEYWORD SYMBOL string_value) (\` (wisent-raw-tag (semantic-tag (quote (\, $2)) (quote keyword) :value (quote (\, $3))))))) (token_decl ((TOKEN token_type_opt SYMBOL string_value) (\` (wisent-raw-tag (semantic-tag (quote (\, $3)) (quote (\, (if $2 (quote token) (quote keyword)))) :type (quote (\, $2)) :value (quote (\, $4)))))) ((TOKEN token_type_opt symbols) (\` (wisent-raw-tag (semantic-tag (quote (\, (car $3))) (quote token) :type (quote (\, $2)) :rest (quote (\, (cdr $3)))))))) (token_type_opt (nil) ((token_type))) (token_type ((LT SYMBOL GT) (progn $2))) (type_decl ((TYPE token_type plist_opt) (\` (wisent-raw-tag (semantic-tag (quote (\, $2)) (quote type) :value (quote (\, $3))))))) (plist_opt (nil) ((plist))) (plist ((plist put_value) (append (list $2) $1)) ((put_value) (list $1))) (use_name_list ((BRACE_BLOCK) (mapcar (quote semantic-tag-name) (semantic-parse-region (car $region1) (cdr $region1) (quote use_names) 1)))) (use_names ((LBRACE) nil) ((RBRACE) nil) ((SYMBOL) (wisent-raw-tag (semantic-tag $1 (quote use-name))))) (use_macros_decl ((USE-MACROS SYMBOL use_name_list) (\` (wisent-raw-tag (semantic-tag "macro" (quote macro) :type (quote (\, $2)) :value (quote (\, $3))))))) (string_value ((STRING) (read $1))) (any_value ((SYMBOL)) ((STRING)) ((PAREN_BLOCK)) ((PREFIXED_LIST)) ((SEXP))) (symbols ((lifo_symbols) (nreverse $1))) (lifo_symbols ((lifo_symbols SYMBOL) (cons $2 $1)) ((SYMBOL) (list $1))) (nonterminal ((SYMBOL (setq semantic-grammar-wy--nterm $1 semantic-grammar-wy--rindx 0) COLON rules SEMI) (wisent-raw-tag (semantic-tag $1 (quote nonterminal) :children $4)))) (rules ((lifo_rules) (apply (quote nconc) (nreverse $1)))) (lifo_rules ((lifo_rules OR rule) (cons $3 $1)) ((rule) (list $1))) (rule ((rhs) (let* ((nterm semantic-grammar-wy--nterm) (rindx semantic-grammar-wy--rindx) (rhs $1) comps prec action elt) (setq semantic-grammar-wy--rindx (1+ semantic-grammar-wy--rindx)) (while rhs (setq elt (car rhs) rhs (cdr rhs)) (cond ((vectorp elt) (if prec (error "Duplicate %%prec in `%s:%d' rule" nterm rindx)) (setq prec (aref elt 0))) ((consp elt) (if (or action comps) (setq comps (cons elt comps) semantic-grammar-wy--rindx (1+ semantic-grammar-wy--rindx)) (setq action (car elt)))) (t (setq comps (cons elt comps))))) (wisent-cook-tag (wisent-raw-tag (semantic-tag (format "%s:%d" nterm rindx) (quote rule) :type (if comps "group" "empty") :value comps :prec prec :expr action)))))) (rhs (nil) ((rhs item) (cons $2 $1)) ((rhs action) (cons (list $2) $1)) ((rhs PREC item) (cons (vector $3) $1))) (action ((PAREN_BLOCK)) ((PREFIXED_LIST)) ((BRACE_BLOCK) (format "(progn
%s)" (let ((s $1)) (if (string-match "^{[
	 ]*" s) (setq s (substring s (match-end 0)))) (if (string-match "[
	 ]*}$" s) (setq s (substring s 0 (match-beginning 0)))) s)))) (items ((lifo_items) (nreverse $1))) (lifo_items ((lifo_items item) (cons $2 $1)) ((item) (list $1))) (item ((SYMBOL)) ((CHARACTER))))) (quote (grammar prologue epilogue declaration nonterminal rule put_names put_values use_names)))))
                nil [3124 9944])
            ("semantic-grammar-wy--install-parser" function nil nil [9946 10571])
            ("define-lex-block-type-analyzer" code nil nil [10592 10822])
            ("define-lex-string-type-analyzer" code nil nil [10824 11080])
            ("define-lex-regex-type-analyzer" code nil nil [11082 11249])
            ("define-lex-regex-type-analyzer" code nil nil [11251 11441])
            ("define-lex-sexp-type-analyzer" code nil nil [11443 11587])
            ("define-lex-sexp-type-analyzer" code nil nil [11589 11723])
            ("define-lex-keyword-type-analyzer" code nil nil [11725 11873])
            ("define-lex-sexp-type-analyzer" code nil nil [11875 12001])
            ("semantic/grammar-wy" package nil nil [12022 12052]))          
      :file "grammar-wy.el"
      :pointmax 12082
      :fsize 12081
      :lastmodtime '(22436 31472 318423 167000)
      :unmatched-syntax '((close-paren 1143 . 1144) (symbol 1099 . 1116) (open-paren 1098 . 1099)))
    (semanticdb-table "db-ref.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("eieio" include nil nil [1437 1453])
            ("semantic" include nil nil [1454 1473])
            ("semantic/db" include nil nil [1474 1496])
            ("semantic/tag" include nil nil [1497 1520])
            ("semantic/find" include nil nil [1593 1617])
            ("semanticdb-add-reference" function
               (:parent "semanticdb-abstract-table"
                :arguments ("dbt" "include-tag"))
                nil [1620 2460])
            ("semanticdb-check-references" function
               (:parent "semanticdb-abstract-table"
                :arguments ("dbt"))
                nil [2462 2701])
            ("semanticdb-includes-in-table" function
               (:parent "semanticdb-abstract-table"
                :arguments ("dbt"))
                nil [2703 2895])
            ("semanticdb-check-references" function
               (:parent "semanticdb-table"
                :arguments ("dbt"))
                nil [2898 3786])
            ("semanticdb-refresh-references" function
               (:parent "semanticdb-abstract-table"
                :arguments ("dbt"))
                nil [3788 3978])
            ("semanticdb-refresh-references" function
               (:parent "semanticdb-table"
                :arguments ("dbt"))
                nil [3980 4305])
            ("semanticdb-notify-references" function
               (:parent "semanticdb-table"
                :arguments ("dbt" "method"))
                nil [4307 4664])
            ("semanticdb-ref-adebug" type
               (:members 
                  ( ("i-depend-on" variable nil nil nil)
                    ("local-table" variable nil nil nil)
                    ("i-include" variable nil nil nil))                  
                :type "class")
                nil [4679 4882])
            ("declare-function" code nil nil [4884 4937])
            ("declare-function" code nil nil [4938 5005])
            ("semanticdb-ref-test" function
               (:user-visible-flag t
                :arguments ("refresh"))
                nil [5007 5746])
            ("semantic/db-ref" package nil nil [5748 5774]))          
      :file "db-ref.el"
      :pointmax 5809
      :fsize 5808
      :lastmodtime '(22436 31432 262422 179000)
      :unmatched-syntax '((close-paren 1617 . 1618) (symbol 1575 . 1592) (open-paren 1574 . 1575)))
    (semanticdb-table "symref.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [2521 2540])
            ("semantic/find" include nil nil [2541 2565])
            ("ede-minor-mode" variable nil nil [2567 2590])
            ("declare-function" code nil nil [2591 2644])
            ("declare-function" code nil nil [2645 2712])
            ("declare-function" code nil nil [2713 2755])
            ("declare-function" code nil nil [2756 2813])
            ("declare-function" code nil nil [2814 2861])
            ("semantic-symref-tool" variable
               (:user-visible-flag t
                :default-value (quote detect))
                nil [2873 3066])
            ("make-variable-buffer-local" code nil nil [3067 3117])
            ("semantic-symref-tool-alist" variable (:default-value (quote (((lambda (rootdir) (file-exists-p (expand-file-name "GPATH" rootdir))) . global) ((lambda (rootdir) (file-exists-p (expand-file-name "ID" rootdir))) . idutils) ((lambda (rootdir) (file-exists-p (expand-file-name "cscope.out" rootdir))) . cscope)))) nil [3137 3763])
            ("semantic-symref-calculate-rootdir" function nil nil [3765 4280])
            ("semantic-symref-detect-symref-tool" function nil nil [4282 4911])
            ("semantic-symref-instantiate" function (:arguments ("args")) nil [4913 5370])
            ("semantic-symref-last-result" variable nil nil [5372 5451])
            ("semantic-symref-data-debug-last-result" function (:user-visible-flag t) nil [5453 5797])
            ("semantic-symref-find-references-by-name" function
               (:user-visible-flag t
                :arguments ("name" "scope" "tool-return"))
                nil [5835 6758])
            ("semantic-symref-find-tags-by-name" function
               (:user-visible-flag t
                :arguments ("name" "scope"))
                nil [6775 7485])
            ("semantic-symref-find-tags-by-regexp" function
               (:user-visible-flag t
                :arguments ("name" "scope"))
                nil [7502 8222])
            ("semantic-symref-find-tags-by-completion" function
               (:user-visible-flag t
                :arguments ("name" "scope"))
                nil [8239 8968])
            ("semantic-symref-find-file-references-by-name" function
               (:user-visible-flag t
                :arguments ("name" "scope"))
                nil [8985 9711])
            ("semantic-symref-find-text" function
               (:user-visible-flag t
                :arguments ("text" "scope"))
                nil [9728 10497])
            ("semantic-symref-result" type
               (:members 
                  ( ("created-by" variable
                       (:documentation "Back-pointer to the symref tool creating these results."
                        :type "semantic-symref-tool-baseclass")
                        nil nil)
                    ("hit-files" variable
                       (:documentation "The list of files hit."
                        :type "list")
                        nil nil)
                    ("hit-text" variable
                       (:documentation "If the result doesn't provide full lines, then fill in hit-text.
GNU Global does completion search this way."
                        :type "list")
                        nil nil)
                    ("hit-lines" variable
                       (:documentation "The list of line hits.
Each element is a cons cell of the form (LINE . FILENAME)."
                        :type "list")
                        nil nil)
                    ("hit-tags" variable
                       (:documentation "The list of tags with hits in them.
Use the  `semantic-symref-hit-tags' method to get this list."
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [10584 11481])
            ("semantic-symref-result-get-files" function
               (:parent "semantic-symref-result"
                :arguments ("result"))
                nil [11483 12147])
            ("semantic-symref-recently-opened-buffers" variable nil nil [12149 12266])
            ("semantic-symref-cleanup-recent-buffers-fcn" function nil nil [12268 12991])
            ("semantic-symref-result-get-tags" function
               (:parent "semantic-symref-result"
                :arguments ("result" "open-buffers"))
                nil [12995 14590])
            ("semantic-symref-hit-to-tag-via-db" function (:arguments ("hit" "searchtxt" "searchtype")) nil [14592 15991])
            ("semantic-symref-hit-to-tag-via-buffer" function (:arguments ("hit" "searchtxt" "searchtype" "open-buffers")) nil [15993 18485])
            ("semantic-symref-tool-baseclass" type
               (:members 
                  ( ("searchfor" variable
                       (:documentation "The thing to search for."
                        :type "string")
                        nil nil)
                    ("searchtype" variable
                       (:documentation "The type of search to do.
Values could be `symbol, `regexp, 'tagname, or 'completion."
                        :type "symbol")
                        nil nil)
                    ("searchscope" variable
                       (:documentation "The scope to search for.
Can be 'project, 'target, or 'file."
                        :type "symbol")
                        nil nil)
                    ("resulttype" variable
                       (:documentation "The kind of search results desired.
Can be 'line, 'file, or 'tag.
The type of result can be converted from 'line to 'file, or 'line to 'tag,
but not from 'file to 'line or 'tag."
                        :type "symbol")
                        nil nil))                  
                :type "class")
                nil [18609 19645])
            ("semantic-symref-get-result" function
               (:parent "semantic-symref-tool-baseclass"
                :arguments ("tool"))
                nil [19647 20171])
            ("semantic-symref-perform-search" function
               (:parent "semantic-symref-tool-baseclass"
                :arguments ("tool"))
                nil [20173 20391])
            ("semantic-symref-parse-tool-output" function
               (:parent "semantic-symref-tool-baseclass"
                :arguments ("tool" "outputbuffer"))
                nil [20393 20890])
            ("semantic-symref-parse-tool-output-one-line" function
               (:parent "semantic-symref-tool-baseclass"
                :arguments ("tool"))
                nil [20892 21126])
            ("semantic/symref" package nil nil [21128 21154]))          
      :file "symref.el"
      :pointmax 21311
      :fsize 21310
      :lastmodtime '(22436 31432 266422 179000)
      :unmatched-syntax nil)
    (semanticdb-table "db-typecache.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1069 1088])
            ("semantic/db" include nil nil [1089 1111])
            ("semantic/db-find" include nil nil [1112 1139])
            ("semantic/analyze/fcn" include nil nil [1140 1171])
            ("semantic/find" include nil nil [1230 1254])
            ("declare-function" code nil nil [1257 1312])
            ("declare-function" code nil nil [1313 1366])
            ("declare-function" code nil nil [1367 1449])
            ("declare-function" code nil nil [1450 1521])
            ("semanticdb-typecache" type
               (:members 
                  ( ("filestream" variable
                       (:documentation "Fully sorted/merged list of tags within this buffer."
                        :default-value "nil")
                        nil nil)
                    ("includestream" variable
                       (:documentation "Fully sorted/merged list of tags from this file's includes list."
                        :default-value "nil")
                        nil nil)
                    ("stream" variable
                       (:documentation "The searchable tag stream for this cache.
NOTE: Can I get rid of this?  Use a hashtable instead?"
                        :default-value "nil")
                        nil nil)
                    ("dependants" variable
                       (:documentation "Any other object that is dependent on typecache results.
Said object must support `semantic-reset' methods."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [1571 2383])
            ("semantic-reset" function
               (:parent "semanticdb-typecache"
                :arguments ("tc"))
                nil [2385 2623])
            ("semanticdb-typecache-notify-reset" function
               (:parent "semanticdb-typecache"
                :arguments ("tc"))
                nil [2625 2860])
            ("semanticdb-partial-synchronize" function
               (:parent "semanticdb-typecache"
                :arguments ("tc" "new-tags"))
                nil [2862 3379])
            ("semanticdb-typecache-add-dependant" function (:arguments ("dep")) nil [3381 3661])
            ("semanticdb-typecache-length" function (:arguments ("thing")) nil [3663 3997])
            ("semanticdb-get-typecache" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table"))
                nil [4000 4558])
            ("semanticdb-have-typecache-p" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table"))
                nil [4560 4789])
            ("semanticdb-database-typecache" type
               (:superclasses "semanticdb-abstract-db-cache"
                :members 
                  ( ("stream" variable
                       (:documentation "The searchable tag stream for this cache."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [5009 5221])
            ("semantic-reset" function
               (:parent "semanticdb-database-typecache"
                :arguments ("tc"))
                nil [5223 5338])
            ("semanticdb-synchronize" function
               (:parent "semanticdb-database-typecache"
                :arguments ("cache" "new-tags"))
                nil [5340 5477])
            ("semanticdb-partial-synchronize" function
               (:parent "semanticdb-database-typecache"
                :arguments ("cache" "new-tags"))
                nil [5479 5633])
            ("semanticdb-get-typecache" function
               (:parent "semanticdb-project-database"
                :arguments ("db"))
                nil [5635 5875])
            ("semanticdb-typecache-apply-filename" function (:arguments ("file" "stream")) nil [6030 6417])
            ("semanticdb-typecache-safe-tag-members" function (:arguments ("tag")) nil [6420 6724])
            ("semanticdb-typecache-safe-tag-list" function (:arguments ("tags" "table")) nil [6726 6971])
            ("semanticdb-typecache-faux-namespace" function (:arguments ("name" "members")) nil [6973 7318])
            ("semanticdb-typecache-merge-streams" function (:arguments ("cache1" "cache2")) nil [7320 10131])
            ("semanticdb-expand-nested-tag" function
               (:overloadable t
                :arguments ("tag"))
                nil [10208 10408])
            ("semanticdb-typecache-file-tags" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table"))
                nil [10410 10544])
            ("semanticdb-typecache-file-tags" function
               (:parent "semanticdb-table"
                :arguments ("table"))
                nil [10546 11321])
            ("semanticdb-typecache-include-tags" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table"))
                nil [11323 11460])
            ("semanticdb-typecache-include-tags" function
               (:parent "semanticdb-table"
                :arguments ("table"))
                nil [11462 13022])
            ("semanticdb-typecache-find" function
               (:overloadable t
                :arguments ("type" "path" "find-file-match"))
                nil [13139 13540])
            ("semanticdb-typecache-find-default" function (:arguments ("type" "path" "find-file-match")) nil [13542 14085])
            ("semanticdb-typecache-find-by-name-helper" function (:arguments ("name" "table")) nil [14087 14513])
            ("semanticdb-typecache-find-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "type" "find-file-match"))
                nil [14515 18701])
            ("semanticdb-typecache-for-database" function
               (:parent "semanticdb-project-database"
                :arguments ("db" "mode"))
                nil [18906 19480])
            ("semanticdb-typecache-refresh-for-buffer" function (:arguments ("buffer")) nil [19482 19833])
            ("semanticdb-typecache-complete-flush" function (:user-visible-flag t) nil [19850 20239])
            ("semanticdb-typecache-dump" function (:user-visible-flag t) nil [20241 20679])
            ("semanticdb-db-typecache-dump" function (:user-visible-flag t) nil [20681 21250])
            ("semantic/db-typecache" package nil nil [21252 21284]))          
      :file "db-typecache.el"
      :pointmax 21453
      :fsize 21452
      :lastmodtime '(22436 31432 262422 179000)
      :unmatched-syntax '((close-paren 1254 . 1255) (symbol 1212 . 1229) (open-paren 1211 . 1212)))
    (semanticdb-table "db-mode.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/db" include nil nil [924 946])
            ("declare-function" code nil nil [948 1020])
            ("semanticdb-hooks" variable (:default-value (quote ((semanticdb-semantic-init-hook-fcn semantic-init-db-hook) (semanticdb-synchronize-table semantic-after-toplevel-cache-change-hook) (semanticdb-partial-synchronize-table semantic-after-partial-cache-change-hook) (semanticdb-revert-hook before-revert-hook) (semanticdb-kill-hook kill-buffer-hook) (semanticdb-kill-hook change-major-mode-hook) (semanticdb-kill-emacs-hook kill-emacs-hook) (semanticdb-save-all-db-idle auto-save-hook)))) nil [1053 1670])
            ("semanticdb-minor-mode-p" function nil nil [1710 1894])
            ("define-minor-mode" code nil nil [1911 2418])
            ("defvaralias" code nil nil [2420 2490])
            ("defvaralias" code nil nil [2491 2558])
            ("semantic-varalias-obsolete" code nil nil [2559 2659])
            ("semanticdb-toggle-global-mode" function (:user-visible-flag t) nil [2662 3024])
            ("semanticdb-semantic-init-hook-fcn" function nil nil [3109 5022])
            ("semanticdb-revert-hook" function nil nil [5024 5403])
            ("semanticdb-kill-hook" function nil nil [5405 6835])
            ("semanticdb-kill-emacs-hook" function nil nil [6837 6967])
            ("semanticdb-synchronize-table" function (:arguments ("new-table")) nil [6998 7221])
            ("semanticdb-partial-synchronize-table" function (:arguments ("new-table")) nil [7223 7462])
            ("semantic/db-mode" package nil nil [7465 7492]))          
      :file "db-mode.el"
      :pointmax 7651
      :fsize 7650
      :lastmodtime '(22436 31432 262422 179000)
      :unmatched-syntax nil)
    (semanticdb-table "ia-sb.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/analyze" include nil nil [963 990])
            ("speedbar" include nil nil [991 1010])
            ("semantic-ia-sb-key-map" variable nil nil [1022 1113])
            ("if" code nil nil [1115 1379])
            ("semantic-ia-sb-easymenu-definition" variable (:default-value (quote ("---" ["Tag Information" semantic-ia-sb-show-tag-info t] ["Jump to Tag" speedbar-edit-line t] ["Complete" speedbar-edit-line t]))) nil [1381 1713])
            ("speedbar-add-expansion-list" code nil nil [1770 1921])
            ("speedbar-add-mode-functions-list" code nil nil [1923 2094])
            ("semantic-speedbar-analysis" function (:user-visible-flag t) nil [2111 2486])
            ("semantic-ia-speedbar" function (:arguments ("directory" "zero")) nil [2488 4409])
            ("semantic-ia-sb-show-doc" function
               (:parent "semantic-analyze-context"
                :arguments ("context"))
                nil [4411 4809])
            ("semantic-ia-sb-show-scope" function (:arguments ("scope")) nil [4811 5153])
            ("semantic-ia-sb-more-buttons" function
               (:parent "semantic-analyze-context"
                :arguments ("context"))
                nil [5155 5491])
            ("semantic-ia-sb-more-buttons" function
               (:parent "semantic-analyze-context-assignment"
                :arguments ("context"))
                nil [5493 5866])
            ("semantic-ia-sb-more-buttons" function
               (:parent "semantic-analyze-context-functionarg"
                :arguments ("context"))
                nil [5868 6793])
            ("semantic-ia-sb-string-list" function (:arguments ("list" "face" "function" "idx" "idxface")) nil [6795 7786])
            ("semantic-ia-sb-completion-list" function (:arguments ("list" "face" "function")) nil [7788 8465])
            ("semantic-ia-sb-show-tag-info" function (:user-visible-flag t) nil [8467 8843])
            ("semantic-ia-sb-tag-info" function (:arguments ("text" "tag" "indent")) nil [8845 10446])
            ("semantic-ia-sb-line-path" function (:arguments ("depth")) nil [10448 10734])
            ("semantic-ia-sb-complete" function (:arguments ("text" "tag" "indent")) nil [10736 11767])
            ("semantic/ia-sb" package nil nil [11769 11794]))          
      :file "ia-sb.el"
      :pointmax 11949
      :fsize 11948
      :lastmodtime '(22436 31432 262422 179000)
      :unmatched-syntax nil)
    (semanticdb-table "complete.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [4338 4351])
            ("semantic" include nil nil [4353 4372])
            ("eieio-opt" include nil nil [4373 4393])
            ("semantic/analyze" include nil nil [4394 4421])
            ("semantic/ctxt" include nil nil [4422 4446])
            ("semantic/decorate" include nil nil [4447 4475])
            ("semantic/format" include nil nil [4476 4502])
            ("semantic/idle" include nil nil [4503 4527])
            ("semantic/find" include nil nil [4604 4628])
            ("semantic/db-find" include nil nil [4630 4657])
            ("declare-function" code nil nil [4711 4787])
            ("semantic-complete-inline-overlay" variable nil nil [4800 4903])
            ("semantic-completion-inline-active-p" function nil nil [4905 5260])
            ("semantic-completion-text" function nil nil [5361 5700])
            ("semantic-completion-delete-text" function nil nil [5702 5981])
            ("semantic-completion-message" function (:arguments ("fmt" "args")) nil [5983 6248])
            ("semantic-completion-collector-engine" variable nil nil [6361 6552])
            ("semantic-completion-display-engine" variable nil nil [6554 6694])
            ("semantic-complete-key-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km " " (quote semantic-complete-complete-space)) (define-key km "	" (quote semantic-complete-complete-tab)) (define-key km "" (quote semantic-complete-done)) (define-key km "" (quote abort-recursive-edit)) (define-key km "\356" (quote next-history-element)) (define-key km "\360" (quote previous-history-element)) (define-key km "" (quote next-history-element)) (define-key km "" (quote previous-history-element)) km)) nil [6696 7278])
            ("semantic-completion-default-history" variable nil nil [7280 7420])
            ("semantic-complete-read-tag-engine" function (:arguments ("collector" "displayor" "prompt" "default-tag" "initial-input" "history")) nil [7423 9675])
            ("semantic-complete-active-default" variable nil nil [9721 9822])
            ("semantic-complete-default-to-tag" function (:arguments ("default")) nil [9824 11382])
            ("semantic-complete-current-matched-tag" variable nil nil [11734 11848])
            ("declare-function" code nil nil [11985 12073])
            ("semantic-complete-current-match" function nil nil [12075 14845])
            ("semantic-complete-merge-tags" function (:arguments ("result")) nil [14847 16689])
            ("semantic-complete-done" function (:user-visible-flag t) nil [16796 17028])
            ("semantic-complete-complete-space" function (:user-visible-flag t) nil [17030 17177])
            ("semantic-complete-complete-tab" function (:user-visible-flag t) nil [17179 17341])
            ("semantic-complete-hack-word-boundaries" function (:arguments ("original" "new")) nil [17446 18133])
            ("semantic-complete-try-completion" function (:arguments ("partial")) nil [18135 19916])
            ("semantic-complete-do-completion" function (:arguments ("partial" "inline")) nil [19918 21835])
            ("semantic-complete-inline-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km "	" (quote semantic-complete-inline-TAB)) (define-key km "\360" (quote semantic-complete-inline-up)) (define-key km "\356" (quote semantic-complete-inline-down)) (define-key km "" (quote semantic-complete-inline-done)) (define-key km "\203" (quote semantic-complete-inline-exit)) (define-key km "" (quote semantic-complete-inline-quit)) (define-key km "?" (lambda nil (interactive) (describe-variable (quote semantic-complete-inline-map)))) km)) nil [22192 22788])
            ("semantic-complete-inline-face" variable
               (:user-visible-flag t
                :default-value (quote ((((class color) (background dark)) (:underline "yellow")) (((class color) (background light)) (:underline "brown"))))
                :type "face")
                nil [22790 23106])
            ("semantic-complete-inline-text" function nil nil [23108 23466])
            ("semantic-complete-inline-delete-text" function nil nil [23468 23722])
            ("semantic-complete-inline-done" function (:user-visible-flag t) nil [23724 24456])
            ("semantic-complete-inline-quit" function (:user-visible-flag t) nil [24458 24591])
            ("semantic-complete-inline-exit" function (:user-visible-flag t) nil [24593 25889])
            ("semantic-complete-pre-command-hook" function nil nil [25891 26475])
            ("semantic-complete-post-command-hook" function nil nil [26477 28335])
            ("semantic-complete-inline-force-display" function nil nil [28337 29096])
            ("semantic-complete-inline-tag-engine" function (:arguments ("collector" "displayor" "buffer" "start" "end")) nil [29098 30678])
            ("semantic-complete-inline-TAB" function (:user-visible-flag t) nil [30722 31020])
            ("semantic-complete-inline-down" function (:user-visible-flag t) nil [31022 31279])
            ("semantic-complete-inline-up" function (:user-visible-flag t) nil [31281 31540])
            ("semantic-complete-next-action" function (:arguments ("partial")) nil [31783 33257])
            ("semantic-collector-per-buffer-list" variable nil nil [33813 33906])
            ("make-variable-buffer-local" code nil nil [33907 33971])
            ("semantic-collector-list" variable nil nil [33973 34060])
            ("semantic-collector-abstract" type
               (:members 
                  ( ("buffer" variable
                       (:documentation "Originating buffer for this collector.
Some collectors use a given buffer as a starting place while looking up
tags."
                        :type "buffer")
                        nil nil)
                    ("cache" variable
                       (:documentation "Cache of tags.
These tags are re-used during a completion session.
Sometimes these tags are cached between completion sessions."
                        :default-value "nil"
                        :type "(or null semanticdb-find-result-with-nil)")
                        nil nil)
                    ("last-all-completions" variable
                       (:documentation "Last result of `all-completions'.
This result can be used for refined completions as `last-prefix' gets
closer to a specific result."
                        :type "semanticdb-find-result-with-nil")
                        nil nil)
                    ("last-prefix" variable
                       (:documentation "The last queried prefix.
This prefix can be used to cache intermediate completion offers.
making the action of homing in on a token faster."
                        :protection ":protected"
                        :type "string")
                        nil nil)
                    ("last-completion" variable
                       (:documentation "The last calculated completion.
This completion is calculated and saved for future use."
                        :type "(or null string)")
                        nil nil)
                    ("last-whitespace-completion" variable
                       (:documentation "The last whitespace completion.
For partial completion, SPC will disambiguate over whitespace type
characters.  This is the last calculated version."
                        :type "(or null string)")
                        nil nil)
                    ("current-exact-match" variable
                       (:documentation "The list of matched tags.
When tokens are matched, they are added to this list."
                        :protection ":protected"
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [34062 35712])
            ("semantic-collector-analyze-completions" type
               (:superclasses "semantic-collector-abstract"
                :members 
                  ( ("context" variable
                       (:documentation "An analysis context.
Specifies some context location from whence completion lists will be drawn."
                        :type "semantic-analyze-context")
                        nil nil)
                    ("first-pass-completions" variable
                       (:documentation "List of valid completion tags.
This list of tags is generated when completion starts.  All searches
derive from this list."
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [35745 36389])
            ("semantic-collector-calculate-completions-raw" function
               (:parent "semantic-collector-analyze-completions"
                :arguments ("obj" "prefix" "completionlist"))
                nil [36391 37082])
            ("semantic-collector-cleanup" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj"))
                nil [37084 37211])
            ("semantic-collector-next-action" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj" "partial"))
                nil [37213 38191])
            ("semantic-collector-last-prefix=" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj" "last-prefix"))
                nil [38193 38435])
            ("semantic-collector-get-cache" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj"))
                nil [38437 38670])
            ("semantic-collector-calculate-completions-raw" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj" "prefix" "completionlist"))
                nil [38672 39397])
            ("semantic-collector-calculate-completions" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj" "prefix" "partial"))
                nil [39399 42353])
            ("semantic-collector-try-completion-whitespace" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj" "prefix"))
                nil [42355 43685])
            ("semantic-collector-current-exact-match" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj"))
                nil [43688 44070])
            ("semantic-collector-current-whitespace-completion" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj"))
                nil [44072 44316])
            ("semantic-collector-get-match" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj"))
                nil [44318 44731])
            ("semantic-collector-all-completions" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj" "prefix"))
                nil [44733 45034])
            ("semantic-collector-try-completion" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj" "prefix"))
                nil [45036 45427])
            ("semantic-collector-calculate-cache" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj"))
                nil [45429 45566])
            ("semantic-collector-flush" function
               (:parent "semantic-collector-abstract"
                :arguments ("this"))
                nil [45568 45910])
            ("semantic-collector-buffer-abstract" type
               (:superclasses "semantic-collector-abstract"
                :type "class")
                nil [45930 46131])
            ("constructor" function
               (:parent "semantic-collector-buffer-abstract"
                :arguments ("this" "newname" "fields"))
                nil [46133 46728])
            ("semantic-collector-buffer-flush" function (:arguments ("newcache")) nil [46784 47097])
            ("add-hook" code nil nil [47099 47188])
            ("semantic-collector-buffer-deep" type
               (:superclasses "semantic-collector-buffer-abstract"
                :type "class")
                nil [47229 47473])
            ("semantic-collector-calculate-cache" function
               (:parent "semantic-collector-buffer-deep"
                :arguments ("obj"))
                nil [47475 47840])
            ("semantic-collector-project-abstract" type
               (:superclasses "semantic-collector-abstract"
                :members 
                  ( ("path" variable
                       (:documentation "List of database tables to search.
At creation time, it can be anything accepted by
`semanticdb-find-translate-path' as a PATH argument."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [47877 48284])
            ("semantic-collector-project" type
               (:superclasses "semantic-collector-project-abstract"
                :type "class")
                nil [48305 48430])
            ("semantic-collector-calculate-completions-raw" function
               (:parent "semantic-collector-project"
                :arguments ("obj" "prefix" "completionlist"))
                nil [48433 48673])
            ("semantic-collector-project-brutish" type
               (:superclasses "semantic-collector-project-abstract"
                :type "class")
                nil [48702 48835])
            ("declare-function" code nil nil [48837 48925])
            ("semantic-collector-calculate-completions-raw" function
               (:parent "semantic-collector-project-brutish"
                :arguments ("obj" "prefix" "completionlist"))
                nil [48927 49216])
            ("semantic-collector-local-members" type
               (:superclasses "semantic-collector-project-abstract"
                :members 
                  ( ("scope" variable
                       (:documentation "The scope the local members are being completed from."
                        :default-value "nil"
                        :type "(or null semantic-scope-cache)")
                        nil nil))                  
                :type "class")
                nil [49254 49523])
            ("semantic-collector-calculate-completions-raw" function
               (:parent "semantic-collector-local-members"
                :arguments ("obj" "prefix" "completionlist"))
                nil [49525 49942])
            ("semantic-displayor-abstract" type
               (:members 
                  ( ("table" variable
                       (:documentation "List of tags this displayor is showing."
                        :protection ":protected"
                        :default-value "nil"
                        :type "(or null semanticdb-find-result-with-nil)")
                        nil nil)
                    ("last-prefix" variable
                       (:documentation "Prefix associated with slot `table'"
                        :protection ":protected"
                        :type "string")
                        nil nil))                  
                :type "class")
                nil [50914 51447])
            ("semantic-displayor-cleanup" function
               (:parent "semantic-displayor-abstract"
                :arguments ("obj"))
                nil [51449 51576])
            ("semantic-displayor-next-action" function
               (:parent "semantic-displayor-abstract"
                :arguments ("obj"))
                nil [51578 51961])
            ("semantic-displayor-set-completions" function
               (:parent "semantic-displayor-abstract"
                :arguments ("obj" "table" "prefix"))
                nil [51963 52183])
            ("semantic-displayor-show-request" function
               (:parent "semantic-displayor-abstract"
                :arguments ("obj"))
                nil [52185 52319])
            ("semantic-displayor-focus-request" function
               (:parent "semantic-displayor-abstract"
                :arguments ("obj"))
                nil [52321 52474])
            ("semantic-displayor-scroll-request" function
               (:parent "semantic-displayor-abstract"
                :arguments ("obj"))
                nil [52476 52776])
            ("semantic-displayor-focus-previous" function
               (:parent "semantic-displayor-abstract"
                :arguments ("obj"))
                nil [52778 52913])
            ("semantic-displayor-focus-next" function
               (:parent "semantic-displayor-abstract"
                :arguments ("obj"))
                nil [52915 53042])
            ("semantic-displayor-current-focus" function
               (:parent "semantic-displayor-abstract"
                :arguments ("obj"))
                nil [53044 53244])
            ("semantic-completion-displayor-format-tag-function" variable
               (:user-visible-flag t
                :default-value (function semantic-format-tag-name))
                nil [53271 53480])
            ("semantic-displayor-traditional" type
               (:superclasses "semantic-displayor-abstract"
                :type "class")
                nil [53482 53780])
            ("semantic-displayor-show-request" function
               (:parent "semantic-displayor-traditional"
                :arguments ("obj"))
                nil [53782 54187])
            ("semantic-displayor-focus-abstract" type
               (:superclasses "semantic-displayor-abstract"
                :members 
                  ( ("focus" variable
                       (:documentation "A tag index from `table' which has focus.
Multiple calls to the display function can choose to focus on a
given tag, by highlighting its location."
                        :protection ":protected"
                        :type "number")
                        nil nil)
                    ("find-file-focus" variable
                       (:documentation "Non-nil if focusing requires a tag's buffer be in memory."
                        :static-flag t
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [54251 54890])
            ("semantic-displayor-next-action" function
               (:parent "semantic-displayor-focus-abstract"
                :arguments ("obj"))
                nil [54892 55451])
            ("semantic-displayor-set-completions" function
               (:parent "semantic-displayor-focus-abstract"
                :arguments ("obj" "table" "prefix"))
                nil [55453 55675])
            ("semantic-displayor-focus-previous" function
               (:parent "semantic-displayor-focus-abstract"
                :arguments ("obj"))
                nil [55677 56117])
            ("semantic-displayor-focus-next" function
               (:parent "semantic-displayor-focus-abstract"
                :arguments ("obj"))
                nil [56119 56567])
            ("semantic-displayor-focus-tag" function
               (:parent "semantic-displayor-focus-abstract"
                :arguments ("obj"))
                nil [56569 56840])
            ("semantic-displayor-current-focus" function
               (:parent "semantic-displayor-focus-abstract"
                :arguments ("obj"))
                nil [56842 57603])
            ("semantic-displayor-traditional-with-focus-highlight" type
               (:interfaces ("semantic-displayor-traditional")
                :superclasses "semantic-displayor-focus-abstract"
                :members 
                  ( ("find-file-focus" variable (:default-value "t") nil nil))                  
                :type "class")
                nil [57712 58201])
            ("semantic-displayor-focus-request" function
               (:parent "semantic-displayor-traditional-with-focus-highlight"
                :arguments ("obj"))
                nil [58203 60357])
            ("semantic-displayor-tooltip-mode" variable (:default-value (quote standard)) nil [60610 61368])
            ("semantic-displayor-tooltip-initial-max-tags" variable (:default-value 5) nil [61385 61615])
            ("semantic-displayor-tooltip-max-tags" variable (:default-value 25) nil [61617 62291])
            ("semantic-displayor-tooltip" type
               (:superclasses "semantic-displayor-traditional"
                :members 
                  ( ("mode" variable
                       (:documentation "See `semantic-displayor-tooltip-mode'."
                        :default-value "(symbol-value (quote semantic-displayor-tooltip-mode))")
                        nil nil)
                    ("max-tags-initial" variable
                       (:documentation "See `semantic-displayor-tooltip-initial-max-tags'."
                        :default-value "(symbol-value (quote semantic-displayor-tooltip-initial-max-tags))")
                        nil nil)
                    ("typing-count" variable
                       (:documentation "Counter holding how many times the user types space or tab continuously before showing tags."
                        :default-value "0"
                        :type "integer")
                        nil nil)
                    ("shown" variable
                       (:documentation "Flag representing whether tooltip has been shown yet."
                        :default-value "nil"
                        :type "boolean")
                        nil nil))                  
                :type "class")
                nil [62294 63133])
            ("initialize-instance" function
               (:parent "semantic-displayor-tooltip"
                :arguments ("obj" "args"))
                nil [63135 63327])
            ("tooltip-mode" variable nil nil [63329 63350])
            ("semantic-displayor-show-request" function
               (:parent "semantic-displayor-tooltip"
                :arguments ("obj"))
                nil [63352 66275])
            ("if" code nil nil [66318 66543])
            ("semantic-displayor-point-position" function nil nil [66546 67273])
            ("tooltip-frame-parameters" variable nil nil [67276 67309])
            ("declare-function" code nil nil [67310 67382])
            ("semantic-displayor-tooltip-show" function (:arguments ("text")) nil [67384 67833])
            ("semantic-displayor-scroll-request" function
               (:parent "semantic-displayor-tooltip"
                :arguments ("obj"))
                nil [67835 68103])
            ("semantic-displayor-ghost" type
               (:superclasses "semantic-displayor-focus-abstract"
                :members 
                  ( ("ghostoverlay" variable
                       (:documentation "The overlay the ghost text is displayed in."
                        :type "overlay")
                        nil nil)
                    ("first-show" variable
                       (:documentation "Non nil if we have not seen our first show request."
                        :default-value "t")
                        nil nil))                  
                :type "class")
                nil [68194 68697])
            ("semantic-displayor-next-action" function
               (:parent "semantic-displayor-ghost"
                :arguments ("obj"))
                nil [68699 69069])
            ("semantic-displayor-cleanup" function
               (:parent "semantic-displayor-ghost"
                :arguments ("obj"))
                nil [69071 69287])
            ("semantic-displayor-set-completions" function
               (:parent "semantic-displayor-ghost"
                :arguments ("obj" "table" "prefix"))
                nil [69289 69509])
            ("semantic-displayor-show-request" function
               (:parent "semantic-displayor-ghost"
                :arguments ("obj"))
                nil [69512 69968])
            ("semantic-displayor-focus-request" function
               (:parent "semantic-displayor-ghost"
                :arguments ("obj"))
                nil [69970 71356])
            ("semantic-complete-inline-custom-type" variable (:default-value (append (quote (radio)) (mapcar (lambda (class) (let* ((C (intern (car class))) (doc (documentation-property C (quote variable-documentation))) (doc1 (car (split-string doc "
")))) (list (quote const) :tag doc1 C))) (eieio-build-class-alist semantic-displayor-abstract t)))) nil [71449 71902])
            ("semantic-complete-inline-analyzer-displayor-class" variable
               (:user-visible-flag t
                :default-value (quote semantic-displayor-traditional))
                nil [71904 72122])
            ("semantic-complete-read-tag-buffer-deep" function (:arguments ("prompt" "default-tag" "initial-input" "history")) nil [72124 72986])
            ("semantic-complete-read-tag-local-members" function (:arguments ("prompt" "default-tag" "initial-input" "history")) nil [72988 73828])
            ("semantic-complete-read-tag-project" function (:arguments ("prompt" "default-tag" "initial-input" "history")) nil [73830 74700])
            ("semantic-complete-inline-tag-project" function nil nil [74702 76523])
            ("semantic-complete-read-tag-analyzer" function (:arguments ("prompt" "context" "history")) nil [76525 77874])
            ("semantic-complete-inline-analyzer" function (:arguments ("context")) nil [77876 79860])
            ("semantic-complete-inline-analyzer-idle-displayor-class" variable
               (:user-visible-flag t
                :default-value (quote semantic-displayor-ghost))
                nil [79862 80092])
            ("semantic-complete-inline-analyzer-idle" function (:arguments ("context")) nil [80094 80775])
            ("semantic-complete-jump-local" function (:user-visible-flag t) nil [80794 81223])
            ("semantic-complete-jump" function (:user-visible-flag t) nil [81240 81684])
            ("semantic-complete-jump-local-members" function (:user-visible-flag t) nil [81701 82261])
            ("semantic-complete-analyze-and-replace" function (:user-visible-flag t) nil [82278 82964])
            ("semantic-complete-analyze-inline" function (:user-visible-flag t) nil [82981 83934])
            ("semantic-complete-analyze-inline-idle" function (:user-visible-flag t) nil [83951 84772])
            ("semantic-complete-self-insert" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [84789 85729])
            ("semantic-complete-inline-project" function (:user-visible-flag t) nil [85746 86409])
            ("semantic/complete" package nil nil [86411 86439]))          
      :file "complete.el"
      :pointmax 86600
      :fsize 86599
      :lastmodtime '(22436 31432 258422 178000)
      :unmatched-syntax '((close-paren 66543 . 66544) (symbol 66299 . 66315) (open-paren 66298 . 66299) (close-paren 4628 . 4629) (symbol 4530 . 4547) (open-paren 4529 . 4530) (close-paren 4351 . 4352) (symbol 4320 . 4337) (open-paren 4319 . 4320)))
    (semanticdb-table "imenu.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1222 1241])
            ("semantic/format" include nil nil [1242 1268])
            ("semantic/db" include nil nil [1269 1291])
            ("semantic/db-file" include nil nil [1292 1319])
            ("semantic/sort" include nil nil [1320 1344])
            ("imenu" include nil nil [1345 1361])
            ("declare-function" code nil nil [1363 1443])
            ("declare-function" code nil nil [1444 1506])
            ("if" code nil nil [1619 1739])
            ("semantic-imenu" customgroup (:user-visible-flag t) nil [1741 1841])
            ("semantic-imenu-summary-function" variable
               (:user-visible-flag t
                :default-value (quote semantic-format-tag-abbreviate))
                nil [1858 2117])
            ("make-variable-buffer-local" code nil nil [2118 2179])
            ("semantic-imenu-bucketize-file" variable
               (:user-visible-flag t
                :default-value t)
                nil [2196 2344])
            ("make-variable-buffer-local" code nil nil [2345 2404])
            ("semantic-imenu-adopt-external-members" variable
               (:user-visible-flag t
                :default-value t)
                nil [2406 2652])
            ("semantic-imenu-buckets-to-submenu" variable
               (:user-visible-flag t
                :default-value t)
                nil [2654 2873])
            ("make-variable-buffer-local" code nil nil [2874 2937])
            ("semantic-imenu-expand-type-members" variable
               (:user-visible-flag t
                :default-value t)
                nil [2954 3109])
            ("make-variable-buffer-local" code nil nil [3110 3174])
            ("semantic-varalias-obsolete" code nil nil [3175 3308])
            ("semantic-imenu-bucketize-type-members" variable
               (:user-visible-flag t
                :default-value t)
                nil [3310 3580])
            ("make-variable-buffer-local" code nil nil [3581 3648])
            ("semantic-varalias-obsolete" code nil nil [3649 3788])
            ("semantic-imenu-sort-bucket-function" variable (:user-visible-flag t) nil [3790 4474])
            ("make-variable-buffer-local" code nil nil [4475 4540])
            ("semantic-imenu-index-directory" variable (:user-visible-flag t) nil [4542 4869])
            ("semantic-imenu-auto-rebuild-directory-indexes" variable (:user-visible-flag t) nil [4871 5161])
            ("semantic-imenu-directory-current-file" variable nil nil [5163 5290])
            ("semantic-imenu-auto-rebuild-running" variable nil nil [5292 5410])
            ("semantic-imenu-expandable-tag-classes" variable (:default-value (quote (type))) nil [5427 5683])
            ("make-variable-buffer-local" code nil nil [5684 5751])
            ("semantic-varalias-obsolete" code nil nil [5752 5887])
            ("semantic-imenu-tag-overlay" function (:arguments ("tag")) nil [5899 6327])
            ("semantic-imenu-goto-function" function (:arguments ("name" "position" "rest")) nil [6330 8253])
            ("semantic-imenu-flush-fcn" function (:arguments ("ignore")) nil [8255 8774])
            ("semantic-create-imenu-index" function (:arguments ("stream")) nil [8791 9785])
            ("semantic-create-imenu-directory-index" function (:arguments ("stream")) nil [9787 11677])
            ("semantic-create-imenu-index-1" function (:arguments ("stream" "parent")) nil [11679 13766])
            ("semantic-create-imenu-subindex" function (:arguments ("tags")) nil [13768 16121])
            ("semantic-imenu-rebuild-directory-indexes" function (:arguments ("db")) nil [16158 17127])
            ("semantic-imenu-semanticdb-hook" function nil nil [17129 17579])
            ("add-hook" code nil nil [17581 17645])
            ("semantic-imenu-toggle-bucketize-file" function (:user-visible-flag t) nil [17676 17929])
            ("semantic-imenu-toggle-buckets-to-submenu" function (:user-visible-flag t) nil [17931 18196])
            ("semantic-imenu-toggle-bucketize-type-parts" function (:user-visible-flag t) nil [18198 18473])
            ("advice" include nil nil [18812 18829])
            ("semantic-which-function" variable (:default-value (quote semantic-default-which-function)) nil [18831 18962])
            ("semantic-which-function-use-color" variable (:user-visible-flag t) nil [18964 19130])
            ("semantic-default-which-function" function (:arguments ("taglist")) nil [19132 19961])
            ("semantic/imenu" package nil nil [20298 20323]))          
      :file "imenu.el"
      :pointmax 20478
      :fsize 20477
      :lastmodtime '(22436 31432 266422 179000)
      :unmatched-syntax nil)
    (semanticdb-table "custom.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("widget" include nil nil [1247 1264])
            ("wid-edit" include nil nil [1265 1284])
            ("semantic/tag" include nil nil [1285 1308])
            ("define-widget" code nil nil [1585 1976])
            ("semantic-tag-widget-match" function (:arguments ("widget" "value")) nil [1993 2101])
            ("semantic-tag-widget-value-create" function (:arguments ("widget")) nil [2118 3786])
            ("semantic-tag-widget-value-get" function (:arguments ("widget")) nil [3803 4355])
            ("define-widget" code nil nil [4557 4769])
            ("semantic-tag-widget-to-internal" function (:arguments ("widget" "value")) nil [4786 4995])
            ("semantic-tag-widget-to-external" function (:arguments ("widget" "value")) nil [5012 5129])
            ("semantic-tag-wo" variable nil nil [5219 5322])
            ("semantic-tag-co" variable nil nil [5323 5423])
            ("semantic-tag-customize" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [5440 6616])
            ("semantic-tag-custom-apply-reset" function (:arguments ("tag")) nil [6618 7652])
            ("semantic-tag-custom-widget-insert" function (:arguments ("tag" "flags")) nil [7654 7908])
            ("semantic/custom" package nil nil [7911 7937]))          
      :file "custom.el"
      :pointmax 8094
      :fsize 8093
      :lastmodtime '(22436 31432 258422 178000)
      :unmatched-syntax nil)
    (semanticdb-table "elp.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("elp" include nil nil [1015 1029])
            ("eieio" include nil nil [1030 1046])
            ("data-debug" include nil nil [1047 1068])
            ("semantic/adebug" include nil nil [1069 1095])
            ("semantic/tag-ls" include nil nil [1096 1122])
            ("semantic/tag-file" include nil nil [1123 1151])
            ("semantic/db" include nil nil [1152 1174])
            ("semantic/db-find" include nil nil [1175 1202])
            ("semantic/db-typecache" include nil nil [1203 1235])
            ("semantic/scope" include nil nil [1236 1261])
            ("semantic/analyze/fcn" include nil nil [1262 1293])
            ("semantic/analyze" include nil nil [1294 1321])
            ("semantic/analyze/complete" include nil nil [1322 1358])
            ("semantic/idle" include nil nil [1359 1383])
            ("semantic/symref/filter" include nil nil [1384 1417])
            ("semantic-elp-emacs-core-list" variable (:default-value (quote (append copy-sequence expand-file-name file-exists-p file-name-directory file-name-nondirectory file-attributes file-truename find-buffer-visiting length locate-file nconc nreverse sort string< string=))) nil [1429 1785])
            ("semantic-elp-eieio-core-list" variable (:default-value (quote (eieio-generic-call eieio-generic-call-primary-only eieiomt-method-list eieio-generic-form eieio-oref eieio-oset obj-of-class-p))) nil [1787 2033])
            ("semantic-elp-ede-core-list" variable (:default-value (quote (ede-current-project ede-directory-get-open-project ede-expand-filename ede-expand-filename-impl ede-locate-file-in-project ede-locate-file-in-project-impl ede-system-include-path ede-toplevel ede-toplevel-project ede-directory-project-p))) nil [2035 2402])
            ("semantic-elp-semantic-core-list" variable (:default-value (quote (semantic-ctxt-current-argument semantic-ctxt-current-assignment semantic-ctxt-current-class-list semantic-ctxt-current-function semantic-ctxt-current-symbol-and-bounds semantic-current-tag semantic-dependency-tag-file semantic-equivalent-tag-p semantic-fetch-tags semantic-fetch-tags-fast semantic-find-tag-by-overlay semantic-sort-tags-by-name-decreasing semantic-sort-tags-by-name-increasing semantic-sort-tags-by-name-then-type-increasing semantic-sort-tags-by-type-decreasing semantic-sort-tags-by-type-increasing semantic-tag-clone semantic-tag-components semantic-tag-copy semantic-tag-external-member-children semantic-tag-file-name semantic-tag-function-arguments semantic-tag-function-parent semantic-tag-get-attribute semantic-tag-in-buffer-p semantic-tag-include-filename semantic-tag-name semantic-tag-new-type semantic-tag-of-class-p semantic-tag-of-type-p semantic-tag-of-type-p semantic-tag-p semantic-tag-prototype-p semantic-tag-set-faux semantic-tag-type semantic-tag-type-members semantic-tag-type-superclasses semantic-tag-with-position-p))) nil [2404 3757])
            ("semantic-elp-semantic-find-core-list" variable (:default-value (quote (semantic-find-tags-by-class semantic-find-tags-by-name semantic-find-tags-by-name-regexp semantic-find-tags-by-scope-protection semantic-find-tags-by-type semantic-find-tags-for-completion semantic-find-tags-included semantic-find-tags-of-compound-type))) nil [3758 4149])
            ("semantic-elp-semanticdb-core-list" variable (:default-value (quote (semanticdb-cache-get semanticdb-current-database-list semanticdb-file-table semanticdb-file-table-object semanticdb-full-filename semanticdb-get-buffer semanticdb-get-table-index semanticdb-refresh-references semanticdb-refresh-table semanticdb-needs-refresh-p semanticdb-directory-loaded-p semanticdb-full-filename semanticdb-create-table-for-file))) nil [4151 4658])
            ("semantic-elp-include-path-list" variable (:default-value (quote (semanticdb-find-incomplete-cache-entries-p semanticdb-find-load-unloaded semanticdb-find-table-for-include semanticdb-find-throttle-active-p semanticdb-find-translate-path-default semanticdb-find-translate-path-brutish-default semanticdb-find-translate-path-includes--internal semanticdb-find-translate-path-includes-default))) nil [4660 5129])
            ("semantic-elp-semanticdb-find-list" variable (:default-value (quote (semanticdb-fast-strip-find-results semanticdb-find-results-p semanticdb-find-tags-by-class semanticdb-find-tags-by-name semanticdb-find-tags-by-name-regexp semanticdb-find-tags-collector semanticdb-find-tags-external-children-of-type semanticdb-find-tags-for-completion semanticdb-strip-find-results))) nil [5131 5622])
            ("semantic-elp-core-enable" function nil nil [5624 6126])
            ("semantic-elp-include-path-enable" function nil nil [6129 6322])
            ("semantic-elp-typecache-list" variable (:default-value (quote (semantic-analyze-split-name semanticdb-get-typecache semanticdb-typecache-merge-streams semanticdb-typecache-safe-tag-members semanticdb-typecache-apply-filename semanticdb-typecache-file-tags semanticdb-typecache-include-tags))) nil [6324 6675])
            ("semantic-elp-profile-typecache" function (:arguments ("tab")) nil [6677 6909])
            ("semantic-elp-typecache-enable" function nil nil [6911 7147])
            ("semantic-elp-scope-list" variable (:default-value (quote (semantic-analyze-find-tag semantic-analyze-scope-nested-tags semantic-analyze-scoped-types semantic-analyze-scoped-types semantic-tag-prototype-p semantic-analyze-scoped-type-parts semantic-calculate-scope semantic-ctxt-scoped-types semantic-get-all-local-variables semantic-scope-find semanticdb-typecache-find semanticdb-typecache-merge-streams))) nil [7149 7642])
            ("semantic-elp-scope-enable" function nil nil [7644 7912])
            ("semantic-elp-analyze-list" variable (:default-value (quote (semantic-analyze-current-symbol semantic-analyze-current-context semantic-analyze-dereference-metatype semantic-analyze-find-tag-sequence semantic-analyze-interesting-tag semantic-analyze-pop-to-context semantic-analyze-select-best-tag semantic-analyze-tag-type semantic-analyze-type-to-name semantic-analyze-type-constraint semantic-analyze-scoped-type-parts semantic-cache-data-to-buffer))) nil [7914 8455])
            ("semantic-elp-analyze-enable" function nil nil [8457 8694])
            ("semantic-elp-symref-list" variable (:default-value (quote (semantic-symref-hits-in-region semantic-symref-test-count-hits-in-tag))) nil [8696 8862])
            ("semantic-elp-analyze-symref-hits" function nil nil [8864 9113])
            ("semantic-elp-complete-list" variable (:default-value (quote (semantic-analyze-possible-completions semantic-analyze-possible-completions-default semantic-analyze-tags-of-class-list semantic-analyze-type-constants semantic-unique-tag-table-by-name))) nil [9115 9421])
            ("semantic-elp-complete-enable" function nil nil [9423 9669])
            ("semantic-elp-data" type
               (:members 
                  ( ("raw" variable
                       (:documentation "The raw ELP data."
                        :type "list")
                        nil nil)
                    ("sort" variable
                       (:documentation "Which column do we sort our data by during various dumps."
                        :default-value "time")
                        nil nil)
                    ("sorted" variable
                       (:documentation "The sorted and filtered version of this data."
                        :default-value "nil")
                        nil nil)
                    ("total" variable
                       (:documentation "The total time spent in the operation.
Recorded outside of ELP."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [9697 10170])
            ("semantic-elp-change-sort" function
               (:parent "semantic-elp-data"
                :arguments ("data" "newsort"))
                nil [10172 11167])
            ("semantic-elp-goto-function" function (:arguments ("point")) nil [11169 11406])
            ("semantic-elp-dump-table" function
               (:parent "semantic-elp-data"
                :arguments ("data" "prefix"))
                nil [11408 12257])
            ("data-debug/eieio-insert-slots" function
               (:parent "semantic-elp-data"
                :arguments ("data" "prefix"))
                nil [12259 13604])
            ("semantic-elp-change-sort-adebug" function (:arguments ("point")) nil [13606 14256])
            ("semantic-elp-object-base" type
               (:superclasses "eieio-persistent"
                :members 
                  ( ("file-header-line" variable (:default-value ";; SEMANTIC ELP Profiling Save File") nil nil)
                    ("total" variable
                       (:documentation "Amount of time spent during the entire collection."
                        :type "number")
                        nil nil))                  
                :type "class")
                nil [14258 14525])
            ("semantic-elp-object" type
               (:superclasses "semantic-elp-object-base"
                :members 
                  ( ("time" variable
                       (:documentation "Times for calculating something."
                        :type "semantic-elp-data")
                        nil nil)
                    ("answer" variable (:documentation "Any answer that might be useful.") nil nil))                  
                :type "class")
                nil [14527 14833])
            ("semantic-elp-object-analyze" type
               (:superclasses "semantic-elp-object-base"
                :members 
                  ( ("pathtime" variable
                       (:documentation "Times for calculating the include path."
                        :type "semantic-elp-data")
                        nil nil)
                    ("typecachetime" variable
                       (:documentation "Times for calculating the typecache."
                        :type "semantic-elp-data")
                        nil nil)
                    ("scopetime" variable
                       (:documentation "Times for calculating the typecache"
                        :type "semantic-elp-data")
                        nil nil)
                    ("ctxttime" variable
                       (:documentation "Times for calculating the context."
                        :type "semantic-elp-data")
                        nil nil)
                    ("completiontime" variable
                       (:documentation "Times for calculating the completions."
                        :type "semantic-elp-data")
                        nil nil))                  
                :type "class")
                nil [14835 15602])
            ("semantic-elp-last-results" variable nil nil [15625 15731])
            ("semantic-elp-results" function (:arguments ("name")) nil [15733 16542])
            ("semantic-elp-last-run" variable nil nil [16591 16664])
            ("semantic-elp-analyze" function (:user-visible-flag t) nil [16681 19580])
            ("semantic-elp-idle-work" function (:user-visible-flag t) nil [19582 20522])
            ("semantic-elp-searchdb" function (:user-visible-flag t) nil [20524 21658])
            ("semantic-elp-symref-hit-count" function (:user-visible-flag t) nil [21660 22847])
            ("semantic-elp-show-last-run" function (:user-visible-flag t) nil [22849 23042])
            ("semantic-elp-load-old-run" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [23059 23308])
            ("semantic-elp" package nil nil [23310 23333]))          
      :file "elp.el"
      :pointmax 23484
      :fsize 23483
      :lastmodtime '(22436 31432 262422 179000)
      :unmatched-syntax nil)
    (semanticdb-table "tag-file.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/tag" include nil nil [999 1022])
            ("ede-minor-mode" variable nil nil [1024 1047])
            ("declare-function" code nil nil [1048 1109])
            ("declare-function" code nil nil [1110 1164])
            ("declare-function" code nil nil [1165 1236])
            ("declare-function" code nil nil [1237 1279])
            ("semantic-go-to-tag" function
               (:overloadable t
                :arguments ("tag" "parent"))
                nil [1340 4054])
            ("make-obsolete-overload" code nil nil [4056 4158])
            ("semantic-dependency-tag-file" function
               (:overloadable t
                :arguments ("tag"))
                nil [4354 6897])
            ("make-obsolete-overload" code nil nil [6899 7010])
            ("semantic-prototype-file" function
               (:overloadable t
                :arguments ("buffer"))
                nil [7277 7937])
            ("semantic-alias-obsolete" code nil nil [7939 8043])
            ("semantic-alias-obsolete" code nil nil [8045 8158])
            ("semantic/tag-file" package nil nil [8161 8189]))          
      :file "tag-file.el"
      :pointmax 8350
      :fsize 8349
      :lastmodtime '(22436 31432 274422 179000)
      :unmatched-syntax nil)
    (semanticdb-table "db-search.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/db" include nil nil [1984 2006])
            ("semantic/find" include nil nil [2007 2031])
            ("semanticdb-collect-find-results" function (:arguments ("result-in-databases" "result-finding-function" "ignore-system" "find-file-on-match")) nil [2097 3802])
            ("semanticdb-find-nonterminal-by-token" function (:arguments ("token" "databases" "search-parts" "search-includes" "diff-mode" "find-file-match" "ignore-system")) nil [3992 4633])
            ("make-obsolete" code nil nil [4634 4732])
            ("semanticdb-find-nonterminal-by-name" function (:arguments ("name" "databases" "search-parts" "search-includes" "diff-mode" "find-file-match" "ignore-system")) nil [4749 5379])
            ("make-obsolete" code nil nil [5380 5477])
            ("semanticdb-find-nonterminal-by-name-regexp" function (:arguments ("regex" "databases" "search-parts" "search-includes" "diff-mode" "find-file-match" "ignore-system")) nil [5494 6154])
            ("make-obsolete" code nil nil [6155 6259])
            ("semanticdb-find-nonterminal-by-type" function (:arguments ("type" "databases" "search-parts" "search-includes" "diff-mode" "find-file-match" "ignore-system")) nil [6277 6902])
            ("make-obsolete" code nil nil [6903 7000])
            ("semanticdb-find-nonterminal-by-property" function (:arguments ("property" "value" "databases" "search-parts" "search-includes" "diff-mode" "find-file-match" "ignore-system")) nil [7018 7682])
            ("make-obsolete" code nil nil [7683 7784])
            ("semanticdb-find-nonterminal-by-extra-spec" function (:arguments ("spec" "databases" "search-parts" "search-includes" "diff-mode" "find-file-match" "ignore-system")) nil [7801 8430])
            ("make-obsolete" code nil nil [8431 8534])
            ("semanticdb-find-nonterminal-by-extra-spec-value" function (:arguments ("spec" "value" "databases" "search-parts" "search-includes" "diff-mode" "find-file-match" "ignore-system")) nil [8551 9219])
            ("make-obsolete" code nil nil [9220 9329])
            ("semanticdb-find-nonterminal-external-children-of-type" function (:arguments ("type" "databases" "search-parts" "search-includes" "diff-mode" "find-file-match" "ignore-system")) nil [9363 10024])
            ("semanticdb-find-nonterminal-by-function" function (:arguments ("function" "databases" "search-parts" "search-includes" "diff-mode" "find-file-match" "ignore-system")) nil [10072 11232])
            ("semanticdb-find-nonterminal-by-token-method" function
               (:parent "semanticdb-project-database"
                :arguments ("database" "token" "search-parts" "search-includes" "diff-mode" "find-file-match"))
                nil [11406 12083])
            ("semanticdb-find-nonterminal-by-name-method" function
               (:parent "semanticdb-project-database"
                :arguments ("database" "name" "search-parts" "search-includes" "diff-mode" "find-file-match"))
                nil [12085 12707])
            ("semanticdb-find-nonterminal-by-name-regexp-method" function
               (:parent "semanticdb-project-database"
                :arguments ("database" "regex" "search-parts" "search-includes" "diff-mode" "find-file-match"))
                nil [12709 13355])
            ("semanticdb-find-nonterminal-by-type-method" function
               (:parent "semanticdb-project-database"
                :arguments ("database" "type" "search-parts" "search-includes" "diff-mode" "find-file-match"))
                nil [13357 13968])
            ("semanticdb-find-nonterminal-by-property-method" function
               (:parent "semanticdb-project-database"
                :arguments ("database" "property" "value" "search-parts" "search-includes" "diff-mode" "find-file-match"))
                nil [13970 14620])
            ("semanticdb-find-nonterminal-by-extra-spec-method" function
               (:parent "semanticdb-project-database"
                :arguments ("database" "spec" "search-parts" "search-includes" "diff-mode" "find-file-match"))
                nil [14622 15236])
            ("semanticdb-find-nonterminal-by-extra-spec-value-method" function
               (:parent "semanticdb-project-database"
                :arguments ("database" "spec" "value" "search-parts" "search-includes" "diff-mode" "find-file-match"))
                nil [15238 15891])
            ("semanticdb-find-nonterminal-external-children-of-type-method" function
               (:parent "semanticdb-project-database"
                :arguments ("database" "type" "search-parts" "search-includes" "diff-mode" "find-file-match"))
                nil [15918 16652])
            ("semanticdb-find-nonterminal-by-function-method" function
               (:parent "semanticdb-project-database"
                :arguments ("database" "function" "search-parts" "search-includes" "diff-mode" "find-file-match"))
                nil [16676 18336])
            ("semantic/db-search" package nil nil [18338 18367]))          
      :file "db-search.el"
      :pointmax 18530
      :fsize 18529
      :lastmodtime '(22436 31432 262422 179000)
      :unmatched-syntax nil)
    (semanticdb-table "m3.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cedet-m3" include nil nil [1011 1030])
            ("semantic/analyze" include nil nil [1031 1058])
            ("semantic/analyze/refs" include nil nil [1059 1091])
            ("semantic/idle" include nil nil [1092 1116])
            ("semantic-m3-install" function (:user-visible-flag t) nil [1296 1690])
            ("semantic-m3-add-whatisit" function nil nil [1766 1945])
            ("semantic-m3-print-tagstack" function (:arguments ("tagstack")) nil [1947 2546])
            ("semantic-m3-whatisit" function (:user-visible-flag t) nil [2548 5223])
            ("semantic-m3-add-doc" function nil nil [5240 5927])
            ("semantic-m3-context-items" function nil nil [5944 8732])
            ("semantic-m3-ref-items" function nil nil [8749 9610])
            ("semantic-m3-complete-from-menu" function (:arguments ("tag")) nil [9612 10126])
            ("semantic/m3" package nil nil [10129 10151]))          
      :file "m3.el"
      :pointmax 10300
      :fsize 10299
      :lastmodtime '(22436 31432 266422 179000)
      :unmatched-syntax nil)
    (semanticdb-table "ia.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/analyze" include nil nil [1215 1242])
            ("semantic/format" include nil nil [1243 1269])
            ("pulse" include nil nil [1270 1286])
            ("semantic/senator" include nil nil [1287 1314])
            ("semantic/analyze/refs" include nil nil [1315 1347])
            ("semantic/find" include nil nil [1399 1423])
            ("semantic/analyze" include nil nil [1369 1396])
            ("declare-function" code nil nil [1426 1470])
            ("semantic-ia-completion-format-tag-function" variable (:default-value (quote semantic-format-tag-prototype)) nil [1577 1789])
            ("semantic-ia-insert-tag" function
               (:overloadable t
                :arguments ("tag"))
                nil [2148 2267])
            ("semantic-ia-insert-tag-default" function (:arguments ("tag")) nil [2269 2507])
            ("defalias" code nil nil [2509 2688])
            ("semantic-ia-get-completions-deprecated" function (:arguments ("context" "point")) nil [2690 3026])
            ("semantic-ia-complete-symbol" function
               (:user-visible-flag t
                :arguments ("pos"))
                nil [3043 5264])
            ("semantic-ia-completion-menu-format-tag-function" variable
               (:user-visible-flag t
                :default-value (quote semantic-format-tag-uml-concise-prototype))
                nil [5266 5496])
            ("semantic-ia-complete-symbol-menu" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [5513 7114])
            ("semantic-ia-complete-tip" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [7281 8033])
            ("semantic-ia-show-summary" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [8150 8664])
            ("semantic-ia-show-variants" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [8747 10144])
            ("semantic-ia--fast-jump-helper" function (:arguments ("dest")) nil [10336 11646])
            ("declare-function" code nil nil [11648 11728])
            ("semantic-ia-fast-jump" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [11745 14132])
            ("semantic-ia-fast-mouse-jump" function
               (:user-visible-flag t
                :arguments ("evt"))
                nil [14149 14474])
            ("semantic-ia-show-doc" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [14647 16029])
            ("semantic-ia-describe-class" function
               (:user-visible-flag t
                :arguments ("typename"))
                nil [16046 17587])
            ("semantic/ia" package nil nil [17589 17611]))          
      :file "ia.el"
      :pointmax 17760
      :fsize 17759
      :lastmodtime '(22436 31432 262422 179000)
      :unmatched-syntax '((close-paren 1423 . 1424) (symbol 1349 . 1366) (open-paren 1348 . 1349)))
    (semanticdb-table "tag-write.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1253 1272])
            ("semantic-tag-write-one-tag" function (:arguments ("tag" "indent")) nil [1284 2856])
            ("semantic-tag-write-tag-list" function (:arguments ("tlist" "indent" "dontaddnewline")) nil [2858 3842])
            ("semantic-tag-write-one-attribute" function (:arguments ("attrs" "indent")) nil [3874 4305])
            ("semantic-tag-write-one-value" function (:arguments ("value" "indent")) nil [4307 5006])
            ("semantic-tag-write-list-slot-value" function (:arguments ("value")) nil [5038 5277])
            ("semantic/tag-write" package nil nil [5279 5308]))          
      :file "tag-write.el"
      :pointmax 5471
      :fsize 5470
      :lastmodtime '(22436 31432 274422 179000)
      :unmatched-syntax nil)
    (semanticdb-table "debug.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [1593 1606])
            ("semantic" include nil nil [1608 1627])
            ("eieio" include nil nil [1628 1644])
            ("semantic/find" include nil nil [1664 1688])
            ("semantic-debug-parser-source" variable nil nil [1717 1913])
            ("make-variable-buffer-local" code nil nil [1929 1987])
            ("semantic-debug-parser-class" variable nil nil [2004 2101])
            ("make-variable-buffer-local" code nil nil [2117 2174])
            ("semantic-debug-parser-debugger-source" variable nil nil [2191 2281])
            ("make-variable-buffer-local" code nil nil [2297 2355])
            ("semantic-debug-enabled" variable nil nil [2357 2429])
            ("semantic-debug-current-interface" variable nil nil [2474 2580])
            ("semantic-debug-current-parser" variable nil nil [2582 2671])
            ("semantic-debug-interface" type
               (:members 
                  ( ("parser-buffer" variable
                       (:documentation "The buffer containing the parser we are debugging."
                        :type "buffer")
                        nil nil)
                    ("parser-local-map" variable
                       (:documentation "The local keymap originally in the PARSER buffer."
                        :type "keymap")
                        nil nil)
                    ("parser-location" variable
                       (:documentation "A marker representing where we are in the parser buffer."
                        :type "marker")
                        nil nil)
                    ("source-buffer" variable
                       (:documentation "The buffer containing the source we are parsing.
The :parser-buffer defines a parser that can parse the text in the
:source-buffer."
                        :type "buffer")
                        nil nil)
                    ("source-local-map" variable
                       (:documentation "The local keymap originally in the SOURCE buffer."
                        :type "keymap")
                        nil nil)
                    ("source-location" variable
                       (:documentation "A marker representing where we are in the parser buffer."
                        :type "marker")
                        nil nil)
                    ("data-buffer" variable
                       (:documentation "Buffer being used to display some useful data.
These buffers are brought into view when layout occurs."
                        :type "buffer")
                        nil nil)
                    ("current-frame" variable
                       (:documentation "The currently displayed frame."
                        :type "semantic-debug-frame")
                        nil nil)
                    ("overlays" variable
                       (:documentation "Any active overlays being used to show the debug position."
                        :default-value "nil"
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [2703 4121])
            ("semantic-debug-set-frame" function
               (:parent "semantic-debug-interface"
                :arguments ("iface" "frame"))
                nil [4134 4352])
            ("semantic-debug-set-parser-location" function
               (:parent "semantic-debug-interface"
                :arguments ("iface" "point"))
                nil [4354 4691])
            ("semantic-debug-set-source-location" function
               (:parent "semantic-debug-interface"
                :arguments ("iface" "point"))
                nil [4693 5030])
            ("semantic-debug-interface-layout" function
               (:parent "semantic-debug-interface"
                :arguments ("iface"))
                nil [5032 6014])
            ("semantic-debug-highlight-lexical-token" function
               (:parent "semantic-debug-interface"
                :arguments ("iface" "token"))
                nil [6016 6397])
            ("semantic-debug-highlight-rule" function
               (:parent "semantic-debug-interface"
                :arguments ("iface" "nonterm" "rule" "match"))
                nil [6399 8084])
            ("semantic-debug-unhighlight" function
               (:parent "semantic-debug-interface"
                :arguments ("iface"))
                nil [8086 8278])
            ("semantic-debug-user-command" variable nil nil [8320 8400])
            ("semantic-debug-break" function (:arguments ("frame")) nil [8402 9429])
            ("semantic-debug-frame" type (:type "class") nil [9497 9570])
            ("semantic-debug-frame-highlight" function
               (:parent "semantic-debug-frame"
                :arguments ("frame"))
                nil [9572 9681])
            ("semantic-debug-frame-info" function
               (:parent "semantic-debug-frame"
                :arguments ("frame"))
                nil [9683 9801])
            ("semantic-debug-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km "n" (quote semantic-debug-next)) (define-key km " " (quote semantic-debug-next)) (define-key km "s" (quote semantic-debug-step)) (define-key km "u" (quote semantic-debug-up)) (define-key km "d" (quote semantic-debug-down)) (define-key km "f" (quote semantic-debug-fail-match)) (define-key km "h" (quote semantic-debug-print-state)) (define-key km "s" (quote semantic-debug-jump-to-source)) (define-key km "p" (quote semantic-debug-jump-to-parser)) (define-key km "q" (quote semantic-debug-quit)) (define-key km "a" (quote semantic-debug-abort)) (define-key km "g" (quote semantic-debug-go)) (define-key km "b" (quote semantic-debug-set-breakpoint)) (define-key km "e" (quote eval-expression)) km)) nil [9821 10637])
            ("semantic-debug-mode" function (:arguments ("onoff")) nil [10639 11814])
            ("semantic-debug" function (:user-visible-flag t) nil [11831 13105])
            ("semantic-debug-find-parser-source" function nil nil [13107 13584])
            ("semantic-debug-next" function (:user-visible-flag t) nil [13611 13934])
            ("semantic-debug-step" function (:user-visible-flag t) nil [13936 14139])
            ("semantic-debug-up" function (:user-visible-flag t) nil [14141 14274])
            ("semantic-debug-down" function (:user-visible-flag t) nil [14276 14413])
            ("semantic-debug-fail-match" function (:user-visible-flag t) nil [14415 14631])
            ("semantic-debug-print-state" function (:user-visible-flag t) nil [14633 14825])
            ("semantic-debug-jump-to-source" function (:user-visible-flag t) nil [14827 15298])
            ("semantic-debug-jump-to-parser" function (:user-visible-flag t) nil [15300 15739])
            ("semantic-debug-quit" function (:user-visible-flag t) nil [15741 16025])
            ("semantic-debug-abort" function (:user-visible-flag t) nil [16027 16252])
            ("semantic-debug-go" function (:user-visible-flag t) nil [16254 16467])
            ("semantic-debug-set-breakpoint" function (:user-visible-flag t) nil [16469 16806])
            ("semantic-debug-parser" type (:type "class") nil [16836 17151])
            ("semantic-debug-parser-next" function
               (:parent "semantic-debug-parser"
                :arguments ("parser"))
                nil [17153 17304])
            ("semantic-debug-parser-step" function
               (:parent "semantic-debug-parser"
                :arguments ("parser"))
                nil [17306 17459])
            ("semantic-debug-parser-go" function
               (:parent "semantic-debug-parser"
                :arguments ("parser"))
                nil [17461 17639])
            ("semantic-debug-parser-fail" function
               (:parent "semantic-debug-parser"
                :arguments ("parser"))
                nil [17641 17823])
            ("semantic-debug-parser-quit" function
               (:parent "semantic-debug-parser"
                :arguments ("parser"))
                nil [17825 18007])
            ("semantic-debug-parser-abort" function
               (:parent "semantic-debug-parser"
                :arguments ("parser"))
                nil [18009 18193])
            ("semantic-debug-parser-print-state" function
               (:parent "semantic-debug-parser"
                :arguments ("parser"))
                nil [18195 18476])
            ("semantic-debug-parser-break" function
               (:parent "semantic-debug-parser"
                :arguments ("parser"))
                nil [18478 18591])
            ("semantic-debug-parser-frames" function
               (:parent "semantic-debug-parser"
                :arguments ("parser"))
                nil [18608 18833])
            ("semantic/debug" package nil nil [18836 18861]))          
      :file "debug.el"
      :pointmax 19016
      :fsize 19015
      :lastmodtime '(22436 31432 262422 179000)
      :unmatched-syntax '((close-paren 1688 . 1689) (symbol 1646 . 1663) (open-paren 1645 . 1646) (close-paren 1606 . 1607) (symbol 1575 . 1592) (open-paren 1574 . 1575)))
    (semanticdb-table "doc.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/tag" include nil nil [1193 1216])
            ("semantic-documentation-for-tag" function
               (:overloadable t
                :arguments ("tag" "nosnarf"))
                nil [1244 2471])
            ("semantic-documentation-comment-preceeding-tag" function (:arguments ("tag" "nosnarf")) nil [2521 3406])
            ("semantic-doc-snarf-comment-for-tag" function (:arguments ("nosnarf")) nil [3408 5116])
            ("semantic/doc" package nil nil [5118 5141]))          
      :file "doc.el"
      :pointmax 5292
      :fsize 5291
      :lastmodtime '(22436 31432 262422 179000)
      :unmatched-syntax nil)
    (semanticdb-table "db-javap.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cedet-java" include nil nil [2117 2138])
            ("ede" include nil nil [2139 2153])
            ("semantic/find" include nil nil [2154 2178])
            ("semantic/db" include nil nil [2179 2201])
            ("semantic/analyze" include nil nil [2202 2229])
            ("semantic/db-find" include nil nil [2230 2257])
            ("semantic/db-typecache" include nil nil [2258 2290])
            ("eieio" include nil nil [2337 2353])
            ("mode-local" include nil nil [2313 2334])
            ("semanticdb-javap-classpath" variable (:default-value (quote nil)) nil [2392 2536])
            ("semanticdb-find-translate-path" function
               (:parent "java-mode"
                :override-function-flag t
                :arguments ("path" "brutish"))
                nil [2538 3661])
            ("semantic-analyze-find-tag-sequence" function
               (:parent "java-mode"
                :override-function-flag t
                :arguments ("sequence" "&optional" "scope" "typereturn" "throwsym" "flags"))
                nil [3993 5505])
            ("semanticdb-javap-directory-tracker" variable nil nil [5632 5713])
            ("semanticdb-table-java-directory" type
               (:interfaces ("eieio-instance-tracker")
                :superclasses "semanticdb-abstract-table"
                :members 
                  ( ("tracking-symbol" variable (:default-value "(quote semanticdb-javap-directory-tracker)") nil nil)
                    ("major-mode" variable (:default-value "(quote java-mode)") nil nil)
                    ("directory" variable
                       (:documentation "The directory this table is trying to represent."
                        :type "string")
                        nil nil)
                    ("proxy" variable
                       (:documentation "The proxy symbol used when creating proxy tags based on files.
See `semantic-create-proxy-tag' for details."
                        :type "symbol")
                        nil nil))                  
                :type "class")
                nil [5715 6313])
            ("semanticdb-table-java-package" function
               (:parent "semanticdb-table-java-directory"
                :arguments ("table"))
                nil [6315 6489])
            ("initialize-instance" function
               (:parent "semanticdb-table-java-directory"
                :arguments ("table" "args"))
                nil [6491 6738])
            ("semanticdb-refresh-table" function
               (:parent "semanticdb-table-java-directory"
                :arguments ("obj" "force"))
                nil [6740 6934])
            ("semanticdb-needs-refresh-p" function
               (:parent "semanticdb-table-java-directory"
                :arguments ("obj"))
                nil [6936 7100])
            ("semanticdb-equivalent-mode" function
               (:parent "semanticdb-table-java-directory"
                :arguments ("table" "buffer"))
                nil [7102 7354])
            ("semanticdb-normalize-tags" function
               (:parent "semanticdb-table-java-directory"
                :arguments ("obj" "tags"))
                nil [7570 8340])
            ("semanticdb-javap-resolve-proxy" function
               (:parent "semanticdb-table-java-directory"
                :arguments ("obj" "tag"))
                nil [8342 8534])
            ("semanticdb-typecache-file-tags" function
               (:parent "semanticdb-table-java-directory"
                :arguments ("table"))
                nil [8773 9251])
            ("semanticdb-javap-file-to-tag" function (:arguments ("file" "db")) nil [9273 9783])
            ("semanticdb-find-tags-by-name-method" function
               (:parent "semanticdb-table-java-directory"
                :arguments ("table" "name" "tags"))
                nil [9785 10378])
            ("semanticdb-find-tags-by-name-regexp-method" function
               (:parent "semanticdb-table-java-directory"
                :arguments ("table" "regexp" "tags"))
                nil [10381 10955])
            ("semanticdb-find-tags-for-completion-method" function
               (:parent "semanticdb-table-java-directory"
                :arguments ("table" "prefix" "tags"))
                nil [10958 11565])
            ("semanticdb-table-jar-directory" type
               (:superclasses "semanticdb-abstract-table"
                :members 
                  ( ("major-mode" variable (:default-value "(quote java-mode)") nil nil)
                    ("directory" variable
                       (:documentation "The directory in the jar file this table is trying to represent."
                        :type "string")
                        nil nil)
                    ("filenamecache" variable
                       (:documentation "The list of files in the jar file in directory."
                        :type "list")
                        nil nil)
                    ("packagenamecache" variable
                       (:documentation "The list of subpackages in a jar file in directory."
                        :type "list")
                        nil nil)
                    ("filetaghash" variable
                       (:documentation "As files are parsed w/ javap, hash the tag tables against
the file name form filenamecache."
                        :default-value "(make-hash-table :test (quote equal) :size 11)"
                        :type "hash-table")
                        nil nil)
                    ("proxy" variable
                       (:documentation "The proxy symbol used when creating proxy tags based on file names.
See `semantic-create-proxy-tag' for details."
                        :type "symbol")
                        nil nil))                  
                :type "class")
                nil [11706 12644])
            ("semanticdb-table-java-package" function
               (:parent "semanticdb-table-jar-directory"
                :arguments ("table"))
                nil [12646 12804])
            ("initialize-instance" function
               (:parent "semanticdb-table-jar-directory"
                :arguments ("table" "args"))
                nil [12806 13052])
            ("semanticdb-refresh-table" function
               (:parent "semanticdb-table-jar-directory"
                :arguments ("obj" "force"))
                nil [13054 13247])
            ("semanticdb-needs-refresh-p" function
               (:parent "semanticdb-table-jar-directory"
                :arguments ("obj"))
                nil [13249 13412])
            ("semanticdb-equivalent-mode" function
               (:parent "semanticdb-table-jar-directory"
                :arguments ("table" "buffer"))
                nil [13414 13665])
            ("object-print" function
               (:parent "semanticdb-table-jar-directory"
                :arguments ("obj" "strings"))
                nil [13667 14058])
            ("semanticdb-jar-extract-and-save-tags" function
               (:parent "semanticdb-table-jar-directory"
                :arguments ("obj" "tagfname"))
                nil [14274 15127])
            ("semanticdb-normalize-tags" function
               (:parent "semanticdb-table-jar-directory"
                :arguments ("obj" "tags"))
                nil [15129 15861])
            ("semanticdb-javap-resolve-proxy" function
               (:parent "semanticdb-table-jar-directory"
                :arguments ("obj" "tag"))
                nil [15863 16054])
            ("semanticdb-typecache-file-tags" function
               (:parent "semanticdb-table-jar-directory"
                :arguments ("table"))
                nil [16293 16762])
            ("semanticdb-table-javap-table-as-faux-tag" function
               (:parent "semanticdb-table-jar-directory"
                :arguments ("table"))
                nil [16764 18103])
            ("semanticdb-find-tags-by-name-method" function
               (:parent "semanticdb-table-jar-directory"
                :arguments ("table" "name" "tags"))
                nil [18125 18769])
            ("semanticdb-find-tags-by-name-regexp-method" function
               (:parent "semanticdb-table-jar-directory"
                :arguments ("table" "regexp" "tags"))
                nil [18772 19375])
            ("semanticdb-find-tags-for-completion-method" function
               (:parent "semanticdb-table-jar-directory"
                :arguments ("table" "prefix" "tags"))
                nil [19378 20034])
            ("semanticdb-table-jar-file" type
               (:superclasses "semanticdb-abstract-table"
                :members 
                  ( ("major-mode" variable (:default-value "(quote java-mode)") nil nil)
                    ("filename" variable
                       (:documentation "The full filename in the jar file."
                        :type "string")
                        nil nil)
                    ("needsrefresh" variable
                       (:documentation "Track if this table is up to date."
                        :default-value "t")
                        nil nil))                  
                :type "class")
                nil [20262 20651])
            ("semanticdb-table-java-package" function
               (:parent "semanticdb-table-jar-file"
                :arguments ("table"))
                nil [20653 20842])
            ("semanticdb-refresh-table" function
               (:parent "semanticdb-table-jar-file"
                :arguments ("obj" "force"))
                nil [20844 21281])
            ("semanticdb-needs-refresh-p" function
               (:parent "semanticdb-table-jar-file"
                :arguments ("obj"))
                nil [21283 21461])
            ("semanticdb-equivalent-mode" function
               (:parent "semanticdb-table-jar-file"
                :arguments ("table" "buffer"))
                nil [21463 21751])
            ("semanticdb-typecache-find" function
               (:parent "java-mode"
                :override-function-flag t
                :arguments ("type" "&optional" "path" "find-file-match"))
                nil [22046 22980])
            ("semanticdb-javap-typecache-find-by-include-hack" function (:arguments ("type" "path" "find-file-match")) nil [22982 24709])
            ("semanticdb-typecache-file-tags" function
               (:parent "semanticdb-table-jar-file"
                :arguments ("table"))
                nil [24948 25557])
            ("semanticdb-java-jar-database" type
               (:superclasses "semanticdb-project-database"
                :members 
                  ( ("new-table-class" variable (:default-value "semanticdb-table-jar-file") nil nil)
                    ("new-table-dir-class" variable
                       (:documentation "The class to use for creating new dir tables.
Directory tables are used to simulate a tag table where file names match
some tags in those files."
                        :static-flag t
                        :default-value "semanticdb-table-jar-directory")
                        nil nil)
                    ("jarfilecache" variable
                       (:documentation "A Cache of all the file names in the Jar file.
This is the cache searched for creating tables from package names
and file names."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [25811 26510])
            ("semanticdb-create-database" function
               (:parent "semanticdb-java-jar-database"
                :arguments ("dbc" "jarfile"))
                nil [26512 27422])
            ("object-print" function
               (:parent "semanticdb-java-jar-database"
                :arguments ("obj" "strings"))
                nil [27424 27749])
            ("semanticdb-java-jar-extract-names" function
               (:parent "semanticdb-java-jar-database"
                :arguments ("dbc"))
                nil [27751 28062])
            ("semanticdb-file-table" function
               (:parent "semanticdb-java-jar-database"
                :arguments ("dbc" "dir"))
                nil [28064 28847])
            ("semanticdb-create-table" function
               (:parent "semanticdb-java-jar-database"
                :arguments ("db" "dirorfile"))
                nil [28849 30392])
            ("semanticdb-java-jar-package-files" function
               (:parent "semanticdb-java-jar-database"
                :arguments ("dbc" "dir"))
                nil [30394 30789])
            ("semanticdb-java-jar-package-one-file" function
               (:parent "semanticdb-java-jar-database"
                :arguments ("dbc" "file"))
                nil [30791 31191])
            ("semanticdb-java-jar-package-packages" function
               (:parent "semanticdb-java-jar-database"
                :arguments ("dbc" "dir"))
                nil [31193 31667])
            ("semanticdb-javap-extract-tag-table" function (:arguments ("jarfile" "qualifiedclassfile")) nil [31855 33189])
            ("semanticdb-javap-paths-for-package" function (:arguments ("buffer")) nil [33191 34647])
            ("semanticdb-javap-java-lang-name" variable
               (:constant-flag t
                :default-value "java/lang")
                nil [34649 34757])
            ("semanticdb-javap-java-lang-table" variable nil nil [34759 34863])
            ("semanticdb-javap-paths-for-java-lang" function nil nil [34865 35452])
            ("semanticdb-javap-java-lang-classes" variable nil nil [35454 35559])
            ("semanticdb-javap-get-java-lang-classes" function nil nil [35576 36222])
            ("semanticdb-javap-java-lang-classes-map" variable nil nil [36224 36280])
            ("semanticdb-javap-get-java-lang-classes-map" function nil nil [36282 36780])
            ("semanticdb-javap-file-is-jar" function (:arguments ("file-name")) nil [36782 37070])
            ("semanticdb-javap-classpath-objects" function (:arguments ("buffer")) nil [37072 38510])
            ("semanticdb-find-table-for-include" function
               (:parent "java-mode"
                :override-function-flag t
                :arguments ("importtag" "&optional" "table"))
                nil [38512 40562])
            ("semanticdb-javap-dir-to-compound-table" function (:arguments ("packagedir" "classpath")) nil [40564 41525])
            ("semantic/db-javap" package nil nil [41527 41555]))          
      :file "db-javap.el"
      :pointmax 41715
      :fsize 41714
      :lastmodtime '(22436 31432 258422 178000)
      :unmatched-syntax '((close-paren 2353 . 2354) (symbol 2293 . 2310) (open-paren 2292 . 2293)))
    (semanticdb-table "db-cscope.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/symref/cscope" include nil nil [1138 1171])
            ("semantic/db" include nil nil [1172 1194])
            ("data-debug" include nil nil [1195 1216])
            ("eieio-opt" include nil nil [1295 1315])
            ("eieio" include nil nil [1276 1292])
            ("semanticdb-enable-cscope-databases" function (:arguments ("noerror")) nil [1346 2309])
            ("semanticdb-enable-cscope-hook" function nil nil [2311 2467])
            ("semanticdb-project-database-cscope" type
               (:interfaces ("eieio-instance-tracker")
                :superclasses "semanticdb-project-database"
                :type "class")
                nil [2469 2666])
            ("semanticdb-enable-cscope-in-buffer" function
               (:user-visible-flag t
                :arguments ("dont-err-if-not-available"))
                nil [2668 3610])
            ("semanticdb-table-cscope" type
               (:superclasses "semanticdb-search-results-table"
                :members 
                  ( ("major-mode" variable (:default-value "nil") nil nil))                  
                :type "class")
                nil [3625 3782])
            ("semanticdb-equivalent-mode" function
               (:parent "semanticdb-table-cscope"
                :arguments ("table" "buffer"))
                nil [3784 4060])
            ("object-print" function
               (:parent "semanticdb-table-cscope"
                :arguments ("obj" "strings"))
                nil [4062 4313])
            ("semanticdb-get-database-tables" function
               (:parent "semanticdb-project-database-cscope"
                :arguments ("obj"))
                nil [4345 4936])
            ("semanticdb-file-table" function
               (:parent "semanticdb-project-database-cscope"
                :arguments ("obj" "filename"))
                nil [4938 5201])
            ("semanticdb-find-tags-by-name-method" function
               (:parent "semanticdb-table-cscope"
                :arguments ("table" "name" "tags"))
                nil [5301 5866])
            ("semanticdb-find-tags-by-name-regexp-method" function
               (:parent "semanticdb-table-cscope"
                :arguments ("table" "regex" "tags"))
                nil [5868 6322])
            ("semanticdb-find-tags-for-completion-method" function
               (:parent "semanticdb-table-cscope"
                :arguments ("table" "prefix" "tags"))
                nil [6324 7007])
            ("semanticdb-deep-find-tags-by-name-method" function
               (:parent "semanticdb-table-cscope"
                :arguments ("table" "name" "tags"))
                nil [7179 7488])
            ("semanticdb-deep-find-tags-by-name-regexp-method" function
               (:parent "semanticdb-table-cscope"
                :arguments ("table" "regex" "tags"))
                nil [7490 7830])
            ("semanticdb-deep-find-tags-for-completion-method" function
               (:parent "semanticdb-table-cscope"
                :arguments ("table" "prefix" "tags"))
                nil [7832 8188])
            ("semanticdb-test-cscope-startfile" variable (:default-value "~/src/cscope-15.7/src/main.c") nil [8272 8373])
            ("semanticdb-test-cscope" function
               (:user-visible-flag t
                :arguments ("searchfor" "standardfile"))
                nil [8375 9344])
            ("semantic/db-cscope" package nil nil [9346 9375]))          
      :file "db-cscope.el"
      :pointmax 9538
      :fsize 9537
      :lastmodtime '(22436 31432 258422 178000)
      :unmatched-syntax '((close-paren 1318 . 1319) (symbol 1219 . 1236) (open-paren 1218 . 1219)))
    (semanticdb-table "db-mozrepl.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/db" include nil nil [1378 1400])
            ("semantic/db-find" include nil nil [1401 1428])
            ("semanticdb-mozrepl-port" variable (:default-value 4242) nil [1430 1489])
            ("semanticdb-mozrepl-host" variable (:default-value "localhost") nil [1491 1557])
            ("semanticdb-mozrepl-URL" variable nil nil [1559 1629])
            ("semanticdb-mozrepl-switch-tabs" variable nil nil [1631 2014])
            ("semanticdb-mozrepl-proc" variable nil nil [2040 2116])
            ("semanticdb-mozrepl-buffer" variable (:default-value " *MOZREPL*") nil [2118 2210])
            ("semanticdb-mozrepl-maxwait" variable (:default-value 0.3) nil [2212 2301])
            ("semanticdb-mozrepl-object" variable nil nil [2303 2374])
            ("semanticdb-mozrepl-selecttab-func" variable (:default-value "
  function semanticselecttab(url) {
     var numTabs=gBrowser.browsers.length;
     for(i=0; i<numTabs-1; i++) {
       if(gBrowser.browsers[i].contentDocument.location.href.indexOf(url)>=0) {
         gBrowser.tabContainer.selectedIndex=i;
         break;
       }
     }
  }
") nil [2376 2767])
            ("semanticdb-mozrepl-activate" function (:user-visible-flag t) nil [2784 4760])
            ("semanticdb-mozrepl-send" function (:arguments ("msg" "raw")) nil [4762 5596])
            ("semanticdb-mozrepl-home-and-check-state" function nil nil [5598 6261])
            ("semanticdb-mozrepl-possibly-switch-tab" function nil nil [6263 6702])
            ("semanticdb-mozrepl-reconnect" function (:user-visible-flag t) nil [6704 7041])
            ("semanticdb-mozrepl-reload" function (:user-visible-flag t) nil [7043 7395])
            ("defalias" code nil nil [7397 7557])
            ("semanticdb-table-mozrepl" type
               (:superclasses "semanticdb-search-results-table"
                :members 
                  ( ("major-mode" variable (:default-value "javascript-mode") nil nil))                  
                :type "class")
                nil [7595 7762])
            ("semanticdb-project-database-mozrepl" type
               (:superclasses "semanticdb-project-database"
                :members 
                  ( ("new-table-class" variable
                       (:documentation "New tables created for this database are of this class."
                        :default-value "semanticdb-table-mozrepl"
                        :type "class")
                        nil nil))                  
                :type "class")
                nil [7764 8035])
            ("semanticdb-project-system-databases" variable
               (:parent "javascript-mode"
                :override-variable-flag t
                :default-value (list (semanticdb-project-database-mozrepl "mozrepl")))
                nil [8114 8277])
            ("semanticdb-find-default-throttle" variable
               (:parent "javascript-mode"
                :override-variable-flag t
                :default-value (quote (local project unloaded system recursive omniscience)))
                nil [8360 8550])
            ("semanticdb-get-database-tables" function
               (:parent "semanticdb-project-database-mozrepl"
                :arguments ("obj"))
                nil [8582 9298])
            ("semanticdb-file-table" function
               (:parent "semanticdb-project-database-mozrepl"
                :arguments ("obj" "filename"))
                nil [9300 9546])
            ("semanticdb-get-tags" function
               (:parent "semanticdb-table-mozrepl"
                :arguments ("table"))
                nil [9548 9871])
            ("semanticdb-equivalent-mode" function
               (:parent "semanticdb-table-mozrepl"
                :arguments ("table" "buffer"))
                nil [9873 10206])
            ("semanticdb-find-translate-path" function
               (:parent "javascript-mode"
                :override-function-flag t
                :arguments ("path" "brutish"))
                nil [10377 11319])
            ("semanticdb-find-tags-by-name-method" function
               (:parent "semanticdb-table-mozrepl"
                :arguments ("table" "name" "tags"))
                nil [11469 12245])
            ("semanticdb-find-tags-by-name-regexp-method" function
               (:parent "semanticdb-table-mozrepl"
                :arguments ("table" "regex" "tags"))
                nil [12247 12555])
            ("semanticdb-find-tags-for-completion-method" function
               (:parent "semanticdb-table-mozrepl"
                :arguments ("table" "prefix" "tags"))
                nil [12557 13296])
            ("semanticdb-deep-find-tags-by-name-method" function
               (:parent "semanticdb-table-mozrepl"
                :arguments ("table" "name" "tags"))
                nil [13468 13770])
            ("semanticdb-deep-find-tags-by-name-regexp-method" function
               (:parent "semanticdb-table-mozrepl"
                :arguments ("table" "regex" "tags"))
                nil [13772 14114])
            ("semanticdb-deep-find-tags-for-completion-method" function
               (:parent "semanticdb-table-mozrepl"
                :arguments ("table" "prefix" "tags"))
                nil [14116 14473])
            ("semantic/db-mozrepl" package nil nil [14475 14505]))          
      :file "db-mozrepl.el"
      :pointmax 14670
      :fsize 14669
      :lastmodtime '(22436 31432 262422 179000)
      :unmatched-syntax nil)
    (semanticdb-table "texi.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/db-find" include nil nil [1109 1136])
            ("semantic/format" include nil nil [1137 1163])
            ("semantic/ctxt" include nil nil [1164 1188])
            ("texinfo" include nil nil [1189 1207])
            ("ede-minor-mode" variable nil nil [1209 1232])
            ("declare-function" code nil nil [1233 1280])
            ("declare-function" code nil nil [1281 1325])
            ("semantic-texi-super-regex" variable (:default-value "^@\\(top\\|chapter\\|\\(sub\\)*section\\|unnumbered\\(\\(sub\\)*sec\\)?\\|\\(chap\\|\\(sub\\)+\\|major\\)?heading\\|appendix\\(\\(sub\\)*sec\\)?\\|centerchap\\|def\\(var\\|un\\|fn\\|opt\\)x?\\)") nil [1327 1635])
            ("semantic-texi-name-field-list" variable (:default-value (quote (("defvar" . 1) ("defvarx" . 1) ("defun" . 1) ("defunx" . 1) ("defopt" . 1) ("deffn" . 2) ("deffnx" . 2)))) nil [1637 1965])
            ("semantic-texi-parse-region" function (:arguments ("ignore")) nil [1977 2419])
            ("semantic-texi-parse-changes" function nil nil [2421 2636])
            ("semantic-texi-expand-tag" function (:arguments ("tag")) nil [2638 2905])
            ("semantic-texi-parse-headings" function nil nil [2907 3693])
            ("semantic-texi-new-section-tag" function (:arguments ("name" "members" "start" "end")) nil [3695 4074])
            ("semantic-texi-new-def-tag" function (:arguments ("name" "start" "end")) nil [4076 4333])
            ("semantic-texi-set-endpoint" function (:arguments ("metataglist" "pnt")) nil [4335 4862])
            ("semantic-texi-recursive-combobulate-list" function (:arguments ("sectionlist" "level")) nil [4864 7890])
            ("semantic-texi-forward-deffn" function nil nil [7892 8178])
            ("semantic-tag-components" function
               (:parent "texinfo-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [8180 8337])
            ("semantic-texi-environment-regexp" variable (:default-value (if (string-match texinfo-environment-regexp "@menu") texinfo-environment-regexp (when (string-match "cartouche" texinfo-environment-regexp) (concat (substring texinfo-environment-regexp 0 (match-beginning 0)) "menu\\|" (substring texinfo-environment-regexp (match-beginning 0)))))) nil [8414 9026])
            ("semantic-up-context" function
               (:parent "texinfo-mode"
                :override-function-flag t)
                nil [9028 10153])
            ("semantic-beginning-of-context" function
               (:parent "texinfo-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [10155 10686])
            ("semantic-ctxt-current-class-list" function
               (:parent "texinfo-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [10688 11161])
            ("semantic-format-tag-abbreviate" function
               (:parent "texinfo-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [11247 11607])
            ("semantic-format-tag-prototype" function
               (:parent "texinfo-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [11609 11795])
            ("semantic-tag-texi-section-text-bounds" function (:arguments ("tag")) nil [11827 12438])
            ("semantic-texi-current-environment" function (:arguments ("point")) nil [12440 12897])
            ("semantic/analyze" include nil nil [12938 12965])
            ("semantic-analyze-current-context" function
               (:parent "texinfo-mode"
                :override-function-flag t
                :arguments ("point"))
                nil [12968 13591])
            ("semantic-texi-command-completion-list" variable (:default-value (append (mapcar (lambda (a) (car a)) texinfo-section-list) (condition-case nil texinfo-environments (error (split-string texinfo-environment-regexp "\\\\|\\|\\^@\\\\(\\|\\\\)"))) "anchor" "asis" "bullet" "code" "copyright" "defun" "deffn" "defoption" "defvar" "dfn" "emph" "end" "ifinfo" "iftex" "inforef" "item" "itemx" "kdb" "node" "ref" "set" "setfilename" "settitle" "value" "var" "xref")) nil [13593 14299])
            ("semantic-analyze-possible-completions" function
               (:parent "texinfo-mode"
                :override-function-flag t
                :arguments ("context" "&rest" "flags"))
                nil [14301 15311])
            ("semantic-imenu-expandable-tag-classes" variable nil nil [15379 15425])
            ("semantic-imenu-bucketize-file" variable nil nil [15426 15464])
            ("semantic-imenu-bucketize-type-members" variable nil nil [15465 15511])
            ("semantic-default-texi-setup" function nil nil [15528 16464])
            ("add-hook" code nil nil [16466 16524])
            ("semantic-texi-associated-files" function (:arguments ("buffer")) nil [16799 17582])
            ("semantic-texi-find-documentation" function (:arguments ("name" "type")) nil [17656 18502])
            ("semantic-texi-goto-source" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [23535 24656])
            ("semantic/texi" package nil nil [24658 24682]))          
      :file "texi.el"
      :pointmax 24835
      :fsize 24834
      :lastmodtime '(22436 31432 278422 179000)
      :unmatched-syntax '((close-paren 12965 . 12966) (symbol 12918 . 12935) (open-paren 12917 . 12918)))
    (semanticdb-table "sb.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1121 1140])
            ("semantic/format" include nil nil [1141 1167])
            ("semantic/sort" include nil nil [1168 1192])
            ("semantic/util" include nil nil [1193 1217])
            ("speedbar" include nil nil [1218 1237])
            ("declare-function" code nil nil [1238 1293])
            ("semantic-sb-autoexpand-length" variable
               (:user-visible-flag t
                :default-value 1)
                nil [1295 1505])
            ("semantic-sb-filter-tags-of-class" variable (:default-value (quote (code))) nil [1507 1692])
            ("semantic-sb-button-format-tag-function" variable
               (:user-visible-flag t
                :default-value (quote semantic-format-tag-abbreviate))
                nil [1694 1899])
            ("semantic-sb-info-format-tag-function" variable
               (:user-visible-flag t
                :default-value (quote semantic-format-tag-summarize))
                nil [1901 2110])
            ("semantic-sb-tag-set-buffer" function (:arguments ("tag")) nil [2176 2491])
            ("semantic-sb-with-tag-buffer" function (:arguments ("tag" "forms")) nil [2493 2735])
            ("put" code nil nil [2736 2794])
            ("semantic-sb-tag-children-to-expand" function
               (:overloadable t
                :arguments ("tag"))
                nil [3090 3319])
            ("semantic-sb-tag-children-to-expand-default" function (:arguments ("tag")) nil [3321 3515])
            ("semantic-sb-one-button" function (:arguments ("tag" "depth" "prefix")) nil [3517 5115])
            ("semantic-sb-speedbar-data-line" function (:arguments ("depth" "button" "text" "text-fun" "text-data")) nil [5117 5864])
            ("semantic-sb-maybe-token-to-button" function (:arguments ("obj" "indent" "prefix" "modifiers")) nil [5866 6676])
            ("semantic-sb-insert-details" function (:arguments ("tag" "indent")) nil [6678 8848])
            ("semantic-sb-detail-parent" function nil nil [8850 9489])
            ("semantic-sb-show-extra" function (:arguments ("text" "token" "indent")) nil [9491 10234])
            ("semantic-sb-token-jump" function (:arguments ("text" "token" "indent")) nil [10236 11532])
            ("semantic-sb-expand-group" function (:arguments ("text" "token" "indent")) nil [11534 12204])
            ("semantic-sb-buttons-plain" function (:arguments ("level" "tokens")) nil [12206 12788])
            ("semantic-sb-insert-tag-table" function (:arguments ("level" "table")) nil [12790 13060])
            ("semantic-sb-buttons" function (:arguments ("level" "lst")) nil [13062 13611])
            ("semantic-sb-fetch-tag-table" function (:arguments ("file")) nil [13613 14882])
            ("add-to-list" code nil nil [14928 15047])
            ("semantic/sb" package nil nil [15049 15071]))          
      :file "sb.el"
      :pointmax 15102
      :fsize 15101
      :lastmodtime '(22436 31432 266422 179000)
      :unmatched-syntax nil)
    (semanticdb-table "ede-grammar.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [931 950])
            ("ede/proj" include nil nil [951 970])
            ("ede/pmake" include nil nil [971 991])
            ("ede/pconf" include nil nil [992 1012])
            ("ede/proj-elisp" include nil nil [1013 1038])
            ("semantic/grammar" include nil nil [1039 1066])
            ("semantic-ede-proj-target-grammar" type
               (:superclasses "ede-proj-target-elisp"
                :members 
                  ( ("menu" variable (:default-value "nil") nil nil)
                    ("keybindings" variable (:default-value "nil") nil nil)
                    ("phony" variable (:default-value "t") nil nil)
                    ("sourcetype" variable (:default-value "(semantic-ede-source-grammar-wisent semantic-ede-source-grammar-bovine)") nil nil)
                    ("availablecompilers" variable (:default-value "(semantic-ede-grammar-compiler-wisent semantic-ede-grammar-compiler-bovine)") nil nil)
                    ("aux-packages" variable (:default-value "(quote (\"cedet-devel-load\" \"semantic\"))") nil nil)
                    ("pre-load-packages" variable (:default-value "(quote (\"cedet-devel-load\" \"semantic/grammar\" \"semantic/bovine/grammar\" \"semantic/wisent/grammar\"))") nil nil))                  
                :type "class")
                nil [1078 1813])
            ("ede-proj-makefile-dependencies" function
               (:parent "semantic-ede-proj-target-grammar"
                :arguments ("this"))
                nil [1815 2540])
            ("semantic-ede-source-grammar-wisent" variable (:default-value (ede-sourcecode "semantic-ede-grammar-source-wisent" :name "Wisent Grammar" :sourcepattern "\\.wy$" :garbagepattern (quote ("*-wy.el")))) nil [2542 2790])
            ("semantic-ede-grammar-compiler-class" type
               (:superclasses "ede-compiler"
                :type "class")
                nil [2792 2907])
            ("semantic-ede-grammar-compiler-wisent" variable (:default-value (semantic-ede-grammar-compiler-class "ede-emacs-wisent-compiler" :name "emacs" :variables (quote (("EMACS" . "emacs") ("EMACSFLAGS" . "-batch --no-site-file --eval '(setq debug-on-error t)'") ("require" . "$(foreach r,$(1),(require (quote $(r))))"))) :rules (list (ede-makefile-rule "elisp-inference-rule" :target "%-wy.el" :dependencies "%.wy" :rules (quote ("$(EMACS) $(EMACSFLAGS) $(addprefix -L ,$(LOADPATH)) --eval '(progn $(call require,$(PRELOADS)))' -f semantic-grammar-batch-build-packages $^")))) :sourcetype (quote (semantic-ede-source-grammar-wisent)) :objectextention "-wy.el")) nil [2909 3599])
            ("semantic-ede-source-grammar-bovine" variable (:default-value (ede-sourcecode "semantic-ede-grammar-source-bovine" :name "Bovine Grammar" :sourcepattern "\\.by$" :garbagepattern (quote ("*-by.el")))) nil [3602 3857])
            ("semantic-ede-grammar-compiler-bovine" variable (:default-value (semantic-ede-grammar-compiler-class "ede-emacs-wisent-compiler" :name "emacs" :variables (quote (("EMACS" . "emacs") ("EMACSFLAGS" . "-batch --no-site-file --eval '(setq debug-on-error t)'") ("require" . "$(foreach r,$(1),(require (quote $(r))))"))) :rules (list (ede-makefile-rule "elisp-inference-rule" :target "%-by.el" :dependencies "%.by" :rules (quote ("$(EMACS) $(EMACSFLAGS) $(addprefix -L ,$(LOADPATH)) --eval '(progn $(call require,$(PRELOADS)))' -f semantic-grammar-batch-build-packages $^")))) :sourcetype (quote (semantic-ede-source-grammar-bovine)) :objectextention "-by.el")) nil [3859 4549])
            ("ede-buffer-mine" function
               (:parent "semantic-ede-proj-target-grammar"
                :arguments ("this" "buffer"))
                nil [4571 5014])
            ("project-compile-target" function
               (:parent "semantic-ede-proj-target-grammar"
                :arguments ("obj"))
                nil [5017 6151])
            ("ede-proj-makefile-sourcevar" function
               (:parent "semantic-ede-proj-target-grammar"
                :arguments ("this"))
                nil [6190 6466])
            ("ede-proj-makefile-insert-variables" function
               (:parent "semantic-ede-proj-target-grammar"
                :arguments ("this"))
                nil [6468 7151])
            ("ede-proj-makefile-insert-rules" function
               (:parent "semantic-ede-proj-target-grammar"
                :arguments ("this"))
                nil [7153 7562])
            ("ede-proj-makefile-insert-dist-dependencies" function
               (:parent "semantic-ede-proj-target-grammar"
                :arguments ("this"))
                nil [7564 7968])
            ("ede-proj-register-target" code nil nil [8087 8170])
            ("semantic/ede-grammar" package nil nil [8172 8203]))          
      :file "ede-grammar.el"
      :pointmax 8243
      :fsize 8242
      :lastmodtime '(22436 31432 262422 179000)
      :unmatched-syntax nil)
    (semanticdb-table "mru-bookmark.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [1577 1590])
            ("semantic" include nil nil [1592 1611])
            ("eieio-base" include nil nil [1612 1633])
            ("ring" include nil nil [1634 1649])
            ("declare-function" code nil nil [1651 1704])
            ("declare-function" code nil nil [1705 1772])
            ("declare-function" code nil nil [1773 1844])
            ("declare-function" code nil nil [1845 1904])
            ("semantic-bookmark" type
               (:superclasses "eieio-named"
                :members 
                  ( ("tag" variable
                       (:documentation "The TAG this bookmark belongs to."
                        :type "semantic-tag")
                        nil nil)
                    ("parent" variable
                       (:documentation "The tag that is the parent of :tag."
                        :type "(or semantic-tag null)")
                        nil nil)
                    ("offset" variable
                       (:documentation "The offset from `tag' start that is
somehow interesting."
                        :type "number")
                        nil nil)
                    ("filename" variable
                       (:documentation "String the tag belongs to.
Set this when the tag gets unlinked from the buffer it belongs to."
                        :type "string")
                        nil nil)
                    ("frequency" variable
                       (:documentation "Track the frequency this tag is visited."
                        :default-value "0"
                        :type "number")
                        nil nil)
                    ("reason" variable
                       (:documentation "The reason this tag is interesting.
Nice values are 'edit, 'read, 'jump, and 'mark.
 edit - created because the tag text was edited.
 read - created because point lingered in tag text.
 jump - jumped to another tag from this tag.
 mark - created a regular mark in this tag."
                        :default-value "t"
                        :type "symbol")
                        nil nil))                  
                :type "class")
                nil [1977 2937])
            ("initialize-instance" function
               (:parent "semantic-bookmark"
                :arguments ("sbm" "fields"))
                nil [2939 3316])
            ("semantic-mrub-visit" function
               (:parent "semantic-bookmark"
                :arguments ("sbm"))
                nil [3318 3995])
            ("semantic-mrub-update" function
               (:parent "semantic-bookmark"
                :arguments ("sbm" "point" "reason"))
                nil [3997 4472])
            ("semantic-mrub-preflush" function
               (:parent "semantic-bookmark"
                :arguments ("sbm"))
                nil [4474 5040])
            ("semantic-bookmark-ring" type
               (:members 
                  ( ("ring" variable
                       (:documentation "List of `semantic-bookmark' objects.
This list is maintained as a list with the first item
being the current location, and the rest being a list of
items that were recently visited."
                        :type "ring")
                        nil nil)
                    ("current-index" variable
                       (:documentation "The current index into RING for some operation.
User commands use this to move through the ring, or reset."
                        :default-value "0"
                        :type "number")
                        nil nil))                  
                :type "class")
                nil [5042 5676])
            ("semantic-mru-bookmark-ring" variable (:default-value (semantic-bookmark-ring "Ring" :ring (make-ring 20))) nil [5678 5867])
            ("semantic-mrub-find-nearby-tag" function (:arguments ("point")) nil [5869 6396])
            ("semantic-mrub-push" function
               (:parent "semantic-bookmark-ring"
                :arguments ("sbr" "point" "reason"))
                nil [6398 7220])
            ("semantic-mrub-cache-flush-fcn" function nil nil [7222 7575])
            ("add-hook" code nil nil [7577 7664])
            ("semantic-mrub-last-overlay" variable nil nil [7686 7797])
            ("semantic-mru-bookmark-change-hook-fcn" function (:arguments ("overlay")) nil [7799 8204])
            ("global-semantic-mru-bookmark-mode" variable nil nil [8249 8718])
            ("define-minor-mode" code nil nil [8735 9164])
            ("semantic-mru-bookmark-mode-hook" variable (:user-visible-flag t) nil [9166 9313])
            ("semantic-mru-bookmark-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km "B" (quote semantic-mrub-switch-tags)) km)) nil [9315 9492])
            ("define-minor-mode" code nil nil [9494 10885])
            ("semantic-add-minor-mode" code nil nil [10887 10969])
            ("semantic-mrub-read-history" function nil nil [11034 11120])
            ("semantic-mrub-ring-to-assoc-list" function (:arguments ("ring")) nil [11122 11448])
            ("semantic-mrub-completing-read" function (:arguments ("prompt")) nil [11450 12977])
            ("semantic-mrub-switch-tags" function
               (:user-visible-flag t
                :arguments ("tagmark"))
                nil [12979 13423])
            ("semantic-adebug-mrub" function (:user-visible-flag t) nil [13442 13751])
            ("semantic/mru-bookmark" package nil nil [13754 13786]))          
      :file "mru-bookmark.el"
      :pointmax 13955
      :fsize 13954
      :lastmodtime '(22436 31432 266422 179000)
      :unmatched-syntax '((close-paren 1590 . 1591) (symbol 1559 . 1576) (open-paren 1558 . 1559)))
    (semanticdb-table "java.el"
      :file "java.el"
      :fsize 16954
      :lastmodtime '(22436 31432 266422 179000)))
  :file "!home!lyra!.emacs.d!cedet!lisp!cedet!semantic!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
