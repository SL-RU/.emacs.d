;; Object auto-complete-20160416.604/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "auto-complete-20160416.604/"
  :tables
  (list
    (semanticdb-table "auto-complete-config.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [892 909])
            ("auto-complete" include nil nil [910 934])
            ("ac-imenu-index" variable nil nil [974 1001])
            ("ac-clear-variable-every-10-minutes" code nil nil [1003 1055])
            ("ac-imenu-candidates" function nil nil [1057 2380])
            ("ac-define-source" code nil nil [2382 2485])
            ("ac-gtags-candidate-face" variable
               (:default-value (quote ((t (:inherit ac-candidate-face :foreground "navy"))))
                :type "face")
                nil [2497 2640])
            ("ac-gtags-selection-face" variable
               (:default-value (quote ((t (:inherit ac-selection-face :background "navy"))))
                :type "face")
                nil [2642 2799])
            ("ac-gtags-candidate" function nil nil [2801 2934])
            ("ac-define-source" code nil nil [2936 3131])
            ("ac-yasnippet-candidate-face" variable
               (:default-value (quote ((t (:inherit ac-candidate-face :background "sandybrown" :foreground "black"))))
                :type "face")
                nil [3147 3342])
            ("ac-yasnippet-selection-face" variable
               (:default-value (quote ((t (:inherit ac-selection-face :background "coral3"))))
                :type "face")
                nil [3344 3511])
            ("ac-yasnippet-table-hash" function (:arguments ("table")) nil [3513 3693])
            ("ac-yasnippet-table-parent" function (:arguments ("table")) nil [3695 3885])
            ("ac-yasnippet-candidate-1" function (:arguments ("table")) nil [3887 4382])
            ("ac-yasnippet-candidates" function nil nil [4384 5287])
            ("ac-define-source" code nil nil [5289 5532])
            ("ac-semantic-candidates" function (:arguments ("prefix")) nil [5547 6056])
            ("ac-semantic-doc" function (:arguments ("symbol")) nil [6058 6337])
            ("ac-semantic-action" function nil nil [6339 7219])
            ("ac-define-source" code nil nil [7221 7535])
            ("ac-define-source" code nil nil [7537 7811])
            ("ac-eclim-candidates" function nil nil [7823 7950])
            ("ac-define-source" code nil nil [7952 8075])
            ("ac-css-property-alist" variable
               (:constant-flag t
                :default-value (quote (("azimuth" angle "left-side" "far-left" "left" "center-left" "center" "center-right" "right" "far-right" "right-side" "behind" "leftwards" "rightwards") ("background" background-color background-image background-repeat background-attachment background-position) ("background-attachment" "scroll" "fixed") ("background-color" color "transparent") ("background-image" uri "none") ("background-position" percentage length "left" "center" "right" percentage length "top" "center" "bottom" "left" "center" "right" "top" "center" "bottom") ("background-repeat" "repeat" "repeat-x" "repeat-y" "no-repeat") ("border" border-width border-style border-color) ("border-bottom" border) ("border-bottom-color" border-color) ("border-bottom-style" border-style) ("border-bottom-width" border-width) ("border-collapse" "collapse" "separate") ("border-color" color "transparent") ("border-left" border) ("border-left-color" border-color) ("border-left-style" border-style) ("border-left-width" border-width) ("border-right" border) ("border-right-color" border-color) ("border-right-style" border-style) ("border-right-width" border-width) ("border-spacing" length length) ("border-style" border-style) ("border-top" border) ("border-top-color" border-color) ("border-top-style" border-style) ("border-top-width" border-width) ("border-width" border-width) ("bottom" length percentage "auto") ("caption-side" "top" "bottom") ("clear" "none" "left" "right" "both") ("clip" shape "auto") ("color" color) ("content" "normal" "none" string uri counter "attr()" "open-quote" "close-quote" "no-open-quote" "no-close-quote") ("counter-increment" identifier integer "none") ("counter-reset" identifier integer "none") ("cue" cue-before cue-after) ("cue-after" uri "none") ("cue-before" uri "none") ("cursor" uri "*" "auto" "crosshair" "default" "pointer" "move" "e-resize" "ne-resize" "nw-resize" "n-resize" "se-resize" "sw-resize" "s-resize" "w-resize" "text" "wait" "help" "progress") ("direction" "ltr" "rtl") ("display" "inline" "block" "list-item" "run-in" "inline-block" "table" "inline-table" "table-row-group" "table-header-group" "table-footer-group" "table-row" "table-column-group" "table-column" "table-cell" "table-caption" "none") ("elevation" angle "below" "level" "above" "higher" "lower") ("empty-cells" "show" "hide") ("float" "left" "right" "none") ("font" font-style font-variant font-weight font-size "/" line-height font-family "caption" "icon" "menu" "message-box" "small-caption" "status-bar") ("font-family" family-name generic-family) ("font-size" absolute-size relative-size length percentage) ("font-style" "normal" "italic" "oblique") ("font-variant" "normal" "small-caps") ("font-weight" "normal" "bold" "bolder" "lighter" "100" "200" "300" "400" "500" "600" "700" "800" "900") ("height" length percentage "auto") ("left" length percentage "auto") ("letter-spacing" "normal" length) ("line-height" "normal" number length percentage) ("list-style" list-style-type list-style-position list-style-image) ("list-style-image" uri "none") ("list-style-position" "inside" "outside") ("list-style-type" "disc" "circle" "square" "decimal" "decimal-leading-zero" "lower-roman" "upper-roman" "lower-greek" "lower-latin" "upper-latin" "armenian" "georgian" "lower-alpha" "upper-alpha" "none") ("margin" margin-width) ("margin-bottom" margin-width) ("margin-left" margin-width) ("margin-right" margin-width) ("margin-top" margin-width) ("max-height" length percentage "none") ("max-width" length percentage "none") ("min-height" length percentage) ("min-width" length percentage) ("orphans" integer) ("outline" outline-color outline-style outline-width) ("outline-color" color "invert") ("outline-style" border-style) ("outline-width" border-width) ("overflow" "visible" "hidden" "scroll" "auto") ("padding" padding-width) ("padding-bottom" padding-width) ("padding-left" padding-width) ("padding-right" padding-width) ("padding-top" padding-width) ("page-break-after" "auto" "always" "avoid" "left" "right") ("page-break-before" "auto" "always" "avoid" "left" "right") ("page-break-inside" "avoid" "auto") ("pause" time percentage) ("pause-after" time percentage) ("pause-before" time percentage) ("pitch" frequency "x-low" "low" "medium" "high" "x-high") ("pitch-range" number) ("play-during" uri "mix" "repeat" "auto" "none") ("position" "static" "relative" "absolute" "fixed") ("quotes" string string "none") ("richness" number) ("right" length percentage "auto") ("speak" "normal" "none" "spell-out") ("speak-header" "once" "always") ("speak-numeral" "digits" "continuous") ("speak-punctuation" "code" "none") ("speech-rate" number "x-slow" "slow" "medium" "fast" "x-fast" "faster" "slower") ("stress" number) ("table-layout" "auto" "fixed") ("text-align" "left" "right" "center" "justify") ("text-decoration" "none" "underline" "overline" "line-through" "blink") ("text-indent" length percentage) ("text-transform" "capitalize" "uppercase" "lowercase" "none") ("top" length percentage "auto") ("unicode-bidi" "normal" "embed" "bidi-override") ("vertical-align" "baseline" "sub" "super" "top" "text-top" "middle" "bottom" "text-bottom" percentage length) ("visibility" "visible" "hidden" "collapse") ("voice-family" specific-voice generic-voice "*" specific-voice generic-voice) ("volume" number percentage "silent" "x-soft" "soft" "medium" "loud" "x-loud") ("white-space" "normal" "pre" "nowrap" "pre-wrap" "pre-line") ("widows" integer) ("width" length percentage "auto") ("word-spacing" "normal" length) ("z-index" "auto" integer))))
                nil [8115 14345])
            ("ac-css-value-classes" variable
               (:constant-flag t
                :default-value (quote ((absolute-size "xx-small" "x-small" "small" "medium" "large" "x-large" "xx-large") (border-style "none" "hidden" "dotted" "dashed" "solid" "double" "groove" "ridge" "inset" "outset") (color "aqua" "black" "blue" "fuchsia" "gray" "green" "lime" "maroon" "navy" "olive" "orange" "purple" "red" "silver" "teal" "white" "yellow" "rgb") (counter "counter") (family-name "Courier" "Helvetica" "Times") (generic-family "serif" "sans-serif" "cursive" "fantasy" "monospace") (generic-voice "male" "female" "child") (margin-width "auto") (relative-size "larger" "smaller") (shape "rect") (uri "url"))))
                nil [14347 15154])
            ("ac-css-pseudo-classes" variable
               (:constant-flag t
                :default-value (quote ("active" "after" "before" "first" "first-child" "first-letter" "first-line" "focus" "hover" "lang" "left" "link" "right" "visited")))
                nil [15156 15388])
            ("ac-css-property" variable nil nil [15390 15448])
            ("ac-css-prefix" function nil nil [15450 15641])
            ("ac-css-property-candidates" function nil nil [15643 16313])
            ("ac-define-source" code nil nil [16315 16441])
            ("ac-define-source" code nil nil [16452 16590])
            ("ac-define-source" code nil nil [16603 16729])
            ("ac-ropemacs-loaded" variable nil nil [16776 16807])
            ("ac-ropemacs-require" function nil nil [16808 17058])
            ("ac-ropemacs-setup" function nil nil [17060 17246])
            ("ac-ropemacs-initialize" function nil nil [17248 17529])
            ("ac-ropemacs-completions-cache" variable nil nil [17531 17573])
            ("ac-source-ropemacs" variable (:default-value (quote ((init lambda nil (setq ac-ropemacs-completions-cache (mapcar (lambda (completion) (concat ac-prefix completion)) (ignore-errors (rope-completions))))) (candidates . ac-ropemacs-completions-cache)))) nil [17574 17906])
            ("ac-source-rcodetools" variable (:default-value (quote ((init lambda nil (require (quote rcodetools)) (condition-case x (save-excursion (rct-exec-and-eval rct-complete-command-name "--completion-emacs-icicles")) (error) (setq rct-method-completion-table nil))) (candidates lambda nil (all-completions ac-prefix (mapcar (lambda (completion) (replace-regexp-in-string "	.*$" "" (car completion))) rct-method-completion-table)))))) nil [17923 18543])
            ("ac-common-setup" function nil nil [18571 18649])
            ("ac-emacs-lisp-mode-setup" function nil nil [18651 18826])
            ("ac-cc-mode-setup" function nil nil [18828 18934])
            ("ac-ruby-mode-setup" function nil nil [18936 18965])
            ("ac-css-mode-setup" function nil nil [18967 19061])
            ("ac-config-default" function nil nil [19078 19507])
            ("auto-complete-config" package nil nil [19509 19540]))          
      :file "auto-complete-config.el"
      :pointmax 19579
      :fsize 19578
      :lastmodtime '(22373 1423 751365 811000)
      :unmatched-syntax nil)
    (semanticdb-table "auto-complete.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("ac-version" variable
               (:constant-flag t
                :default-value "1.5.1")
                nil [1379 1503])
            ("ac-version-major" variable
               (:constant-flag t
                :default-value (car (version-to-list ac-version)))
                nil [1505 1609])
            ("ac-version-minor" variable
               (:constant-flag t
                :default-value (cadr (version-to-list ac-version)))
                nil [1611 1716])
            ("cl-lib" include nil nil [1718 1735])
            ("popup" include nil nil [1736 1752])
            ("ac-error" function (:arguments ("var")) nil [1773 1957])
            ("auto-complete" customgroup (:user-visible-flag t) nil [1982 2068])
            ("ac-delay" variable (:default-value 0.1) nil [2070 2177])
            ("ac-auto-show-menu" variable (:default-value 0.8) nil [2179 2418])
            ("ac-show-menu-immediately-on-auto-complete" variable (:default-value t) nil [2420 2586])
            ("ac-expand-on-auto-complete" variable (:default-value t) nil [2588 2743])
            ("ac-disable-faces" variable (:default-value (quote (font-lock-comment-face font-lock-string-face font-lock-doc-face))) nil [2745 2956])
            ("ac-stop-flymake-on-completing" variable (:default-value t) nil [2958 3102])
            ("ac-flycheck-poll-completion-end-interval" variable (:default-value 0.5) nil [3104 3290])
            ("ac-use-fuzzy" variable (:default-value (and (locate-library "fuzzy") t)) nil [3292 3428])
            ("ac-fuzzy-cursor-color" variable (:default-value "red") nil [3430 3541])
            ("ac-use-comphist" variable (:default-value t) nil [3543 3667])
            ("ac-comphist-threshold" variable (:default-value 0.7) nil [3669 3795])
            ("ac-comphist-file" variable (:default-value (expand-file-name (concat (if (boundp (quote user-emacs-directory)) user-emacs-directory "~/.emacs.d/") "/ac-comphist.dat"))) nil [3797 4109])
            ("ac-user-dictionary" variable nil nil [4111 4222])
            ("ac-dictionary-files" variable (:default-value (quote ("~/.dict"))) nil [4224 4339])
            ("defvaralias" code nil nil [4340 4400])
            ("ac-dictionary-directories" variable (:default-value (ignore-errors (when load-file-name (let ((installed-dir (file-name-directory load-file-name))) (cl-loop for name in (quote ("ac-dict" "dict")) for dir = (concat installed-dir name) if (file-directory-p dir) collect dir))))) nil [4402 4795])
            ("ac-use-quick-help" variable (:default-value t) nil [4797 4903])
            ("ac-quick-help-delay" variable (:default-value 1.5) nil [4905 5009])
            ("ac-menu-height" variable (:default-value 10) nil [5011 5115])
            ("defvaralias" code nil nil [5116 5171])
            ("ac-quick-help-height" variable (:default-value 20) nil [5173 5279])
            ("ac-quick-help-prefer-pos-tip" variable (:default-value t) nil [5281 5449])
            ("defvaralias" code nil nil [5450 5517])
            ("ac-candidate-limit" variable nil nil [5519 5654])
            ("defvaralias" code nil nil [5655 5706])
            ("ac-modes" variable (:default-value (quote (emacs-lisp-mode lisp-mode lisp-interaction-mode slime-repl-mode nim-mode c-mode cc-mode c++-mode go-mode java-mode malabar-mode clojure-mode clojurescript-mode scala-mode scheme-mode ocaml-mode tuareg-mode coq-mode haskell-mode agda-mode agda2-mode perl-mode cperl-mode python-mode ruby-mode lua-mode tcl-mode ecmascript-mode javascript-mode js-mode js-jsx-mode js2-mode js2-jsx-mode php-mode css-mode scss-mode less-css-mode makefile-mode sh-mode fortran-mode f90-mode ada-mode xml-mode sgml-mode web-mode ts-mode sclang-mode verilog-mode qml-mode apples-mode))) nil [5708 6453])
            ("ac-compatible-packages-regexp" variable (:default-value "^ac-") nil [6455 6611])
            ("ac-non-trigger-commands" variable (:default-value (quote (*table--cell-self-insert-command electric-buffer-list))) nil [6613 6824])
            ("ac-trigger-commands" variable (:default-value (quote (self-insert-command))) nil [6826 7010])
            ("ac-trigger-commands-on-completing" variable (:default-value (quote (delete-backward-char backward-delete-char backward-delete-char-untabify autopair-backspace paredit-backward-delete paredit-backward-delete-word))) nil [7012 7388])
            ("ac-trigger-key" variable nil nil [7390 7923])
            ("ac-auto-start" variable (:default-value 2) nil [7925 8338])
            ("ac-stop-words" variable nil nil [8340 8457])
            ("defvaralias" code nil nil [8458 8498])
            ("ac-use-dictionary-as-stop-words" variable (:default-value t) nil [8500 8666])
            ("ac-ignore-case" variable (:default-value (quote smart)) nil [8668 9005])
            ("ac-dwim" variable (:default-value t) nil [9007 9134])
            ("ac-use-menu-map" variable nil nil [9136 9290])
            ("ac-use-overriding-local-map" variable nil nil [9292 9484])
            ("ac-disable-inline" variable nil nil [9486 9609])
            ("ac-candidate-menu-min" variable (:default-value 1) nil [9611 9737])
            ("ac-max-width" variable nil nil [9739 9992])
            ("ac-completion-face" variable
               (:default-value (quote ((t (:foreground "darkgray" :underline t))))
                :type "face")
                nil [9994 10124])
            ("ac-candidate-face" variable
               (:default-value (quote ((t (:inherit popup-face))))
                :type "face")
                nil [10126 10232])
            ("ac-candidate-mouse-face" variable
               (:default-value (quote ((t (:inherit popup-menu-mouse-face))))
                :type "face")
                nil [10234 10363])
            ("ac-selection-face" variable
               (:default-value (quote ((t (:inherit popup-menu-selection-face))))
                :type "face")
                nil [10365 10495])
            ("auto-complete-mode-hook" variable nil nil [10497 10568])
            ("auto-complete-mode" variable nil nil [10598 10679])
            ("ac-cursor-color" variable nil nil [10681 10731])
            ("ac-inline" variable nil nil [10733 10787])
            ("ac-menu" variable nil nil [10789 10828])
            ("ac-show-menu" variable nil nil [10830 10892])
            ("ac-last-completion" variable nil nil [10894 10989])
            ("ac-quick-help" variable nil nil [10991 11041])
            ("ac-completing" variable nil nil [11043 11138])
            ("ac-buffer" variable nil nil [11140 11205])
            ("ac-point" variable nil nil [11207 11255])
            ("ac-last-point" variable nil nil [11257 11319])
            ("ac-prefix" variable nil nil [11321 11362])
            ("defvaralias" code nil nil [11363 11398])
            ("ac-selected-candidate" variable nil nil [11400 11463])
            ("ac-common-part" variable nil nil [11465 11587])
            ("ac-whole-common-part" variable nil nil [11589 11712])
            ("ac-prefix-overlay" variable nil nil [11714 11775])
            ("ac-timer" variable nil nil [11777 11825])
            ("ac-show-menu-timer" variable nil nil [11827 11884])
            ("ac-quick-help-timer" variable nil nil [11886 11945])
            ("ac-triggered" variable nil nil [11947 11992])
            ("ac-limit" variable nil nil [11994 12064])
            ("ac-candidates" variable nil nil [12066 12116])
            ("ac-candidates-cache" variable nil nil [12118 12195])
            ("ac-fuzzy-enable" variable nil nil [12197 12270])
            ("ac-dwim-enable" variable nil nil [12272 12350])
            ("ac-mode-map" variable (:default-value (make-sparse-keymap)) nil [12352 12489])
            ("ac-completing-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "	" (quote ac-expand)) (define-key map [tab] (quote ac-expand)) (define-key map "" (quote ac-complete)) (define-key map (kbd "M-TAB") (quote auto-complete)) (define-key map "\356" (quote ac-next)) (define-key map "\360" (quote ac-previous)) (define-key map [down] (quote ac-next)) (define-key map [up] (quote ac-previous)) (define-key map [f1] (quote ac-help)) (define-key map [M-f1] (quote ac-persist-help)) (define-key map (kbd "C-?") (quote ac-help)) (define-key map (kbd "C-M-?") (quote ac-persist-help)) (define-key map [C-down] (quote ac-quick-help-scroll-down)) (define-key map [C-up] (quote ac-quick-help-scroll-up)) (define-key map "\216" (quote ac-quick-help-scroll-down)) (define-key map "\220" (quote ac-quick-help-scroll-up)) (dotimes (i 9) (let ((symbol (intern (format "ac-complete-select-%d" (1+ i))))) (fset symbol (\` (lambda nil (interactive) (when (and (ac-menu-live-p) (popup-select ac-menu (\, i))) (ac-complete))))) (define-key map (read-kbd-macro (format "M-%s" (1+ i))) symbol))) map)) nil [12491 13660])
            ("defvaralias" code nil nil [13661 13715])
            ("ac-menu-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map ac-completing-map) (define-key map (kbd "RET") (quote ac-complete)) (define-key map "" (quote ac-next)) (define-key map "" (quote ac-previous)) (define-key map "" (quote ac-isearch)) (define-key map [mouse-1] (quote ac-mouse-1)) (define-key map [down-mouse-1] (quote ac-ignore)) (define-key map [mouse-4] (quote ac-mouse-4)) (define-key map [mouse-5] (quote ac-mouse-5)) map)) nil [13717 14214])
            ("ac-current-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map ac-completing-map) map)) nil [14216 14330])
            ("ac-match-function" variable (:default-value (quote all-completions)) nil [14332 14403])
            ("ac-prefix-definitions" variable (:default-value (quote ((symbol . ac-prefix-symbol) (file . ac-prefix-file) (valid-file . ac-prefix-valid-file) (c-dot . ac-prefix-c-dot) (c-dot-ref . ac-prefix-c-dot-ref) (cc-member . ac-prefix-cc-member)))) nil [14405 14681])
            ("ac-sources" variable (:default-value (quote (ac-source-words-in-same-mode-buffers))) nil [14683 14770])
            ("make-variable-buffer-local" code nil nil [14771 14811])
            ("ac-compiled-sources" variable nil nil [14813 14882])
            ("ac-current-sources" variable nil nil [14884 14986])
            ("ac-omni-completion-sources" variable nil nil [14988 15056])
            ("ac-current-prefix-def" variable nil nil [15058 15092])
            ("ac-ignoring-prefix-def" variable nil nil [15094 15129])
            ("ac-comphist" variable nil nil [15171 15231])
            ("ac-comphist-make-tab" function nil nil [15233 15300])
            ("ac-comphist-tab" function (:arguments ("db")) nil [15302 15346])
            ("ac-comphist-cache" function (:arguments ("db")) nil [15348 15394])
            ("ac-comphist-make" function (:arguments ("tab")) nil [15396 15520])
            ("ac-comphist-get" function (:arguments ("db" "string" "create")) nil [15522 15781])
            ("ac-comphist-add" function (:arguments ("db" "string" "prefix")) nil [15783 16079])
            ("ac-comphist-score" function (:arguments ("db" "string" "prefix")) nil [16081 17239])
            ("ac-comphist-sort" function (:arguments ("db" "collection" "prefix" "threshold")) nil [17241 18162])
            ("ac-comphist-serialize" function (:arguments ("db")) nil [18164 18333])
            ("ac-comphist-deserialize" function (:arguments ("sexp")) nil [18335 18701])
            ("ac-comphist-init" function nil nil [18703 18799])
            ("ac-comphist-load" function nil nil [18801 19190])
            ("ac-comphist-save" function nil nil [19192 19418])
            ("ac-buffer-dictionary" variable nil nil [19439 19472])
            ("ac-file-dictionary" variable (:default-value (make-hash-table :test (quote equal))) nil [19473 19531])
            ("ac-clear-dictionary-cache" function nil nil [19533 19789])
            ("ac-file-dictionary" function (:arguments ("filename")) nil [19791 20198])
            ("ac-mode-dictionary" function (:arguments ("mode")) nil [20200 20588])
            ("ac-buffer-dictionary" function (:arguments ("buffer")) nil [20590 21038])
            ("ac-menu-at-wrapper-line-p" function nil nil [21075 21354])
            ("ac-stop-word-p" function (:arguments ("word")) nil [21356 21510])
            ("ac-prefix-default" function nil nil [21512 21838])
            ("ac-prefix-symbol" function nil nil [21840 21978])
            ("ac-prefix-file" function nil nil [21980 22110])
            ("ac-windows-remote-file-p" function (:arguments ("file")) nil [22112 22265])
            ("ac-prefix-valid-file" function nil nil [22267 22926])
            ("ac-prefix-c-dot" function nil nil [22928 23098])
            ("ac-prefix-c-dot-ref" function nil nil [23100 23305])
            ("ac-prefix-cc-member" function nil nil [23307 23510])
            ("ac-define-prefix" function (:arguments ("name" "prefix")) nil [23512 23698])
            ("ac-match-substring" function (:arguments ("prefix" "candidates")) nil [23700 23908])
            ("ac-source-entity" function (:arguments ("source")) nil [23910 24009])
            ("ac-source-available-p" function (:arguments ("source")) nil [24011 24921])
            ("ac-compile-sources" function (:arguments ("sources")) nil [24923 25715])
            ("ac-compiled-sources" function nil nil [25717 25851])
            ("ac-menu-live-p" function nil nil [25853 25906])
            ("ac-menu-create" function (:arguments ("point" "width" "height")) nil [25908 26421])
            ("ac-menu-delete" function nil nil [26423 26515])
            ("ac-inline-overlay" function nil nil [26517 26568])
            ("ac-inline-live-p" function nil nil [26570 26640])
            ("ac-inline-show" function (:arguments ("point" "string")) nil [26642 28575])
            ("ac-inline-delete" function nil nil [28577 28719])
            ("ac-inline-hide" function nil nil [28721 29057])
            ("ac-inline-update" function nil nil [29059 29487])
            ("ac-put-prefix-overlay" function nil nil [29489 29995])
            ("ac-remove-prefix-overlay" function nil nil [29997 30312])
            ("ac-activate-completing-map" function nil nil [30314 30701])
            ("ac-deactivate-completing-map" function nil nil [30703 31043])
            ("ac-selected-candidate" function nil nil [31045 31131])
            ("ac-prefix" function (:arguments ("requires" "ignore-list")) nil [31133 32949])
            ("ac-init" function nil nil [32951 33348])
            ("ac-candidates-1" function (:arguments ("source")) nil [33350 35584])
            ("ac-delete-duplicated-candidates" function (:arguments ("candidates")) nil [35586 35967])
            ("ac-reduce-candidates" function (:arguments ("candidates")) nil [35969 36484])
            ("ac-candidates" function nil nil [36486 38407])
            ("ac-update-candidates" function (:arguments ("cursor" "scroll-top")) nil [38409 39093])
            ("ac-reposition" function nil nil [39095 39455])
            ("ac-cleanup" function nil nil [39457 40910])
            ("ac-abort" function nil nil [40912 40971])
            ("ac-extend-region-to-delete" function (:arguments ("string")) nil [40973 41710])
            ("ac-expand-string" function (:arguments ("string" "remove-undo-boundary")) nil [41712 43265])
            ("ac-set-trigger-key" function (:arguments ("key")) nil [43267 43651])
            ("ac-set-timer" function nil nil [43653 43774])
            ("ac-cancel-timer" function nil nil [43776 43881])
            ("ac-update" function (:arguments ("force")) nil [43883 44715])
            ("ac-update-greedy" function (:arguments ("force")) nil [44717 45033])
            ("ac-set-show-menu-timer" function nil nil [45035 45285])
            ("ac-cancel-show-menu-timer" function nil nil [45287 45432])
            ("ac-show-menu" function nil nil [45434 45584])
            ("ac-help" function (:arguments ("persist")) nil [45586 45701])
            ("ac-persist-help" function nil nil [45703 45759])
            ("ac-last-help" function (:arguments ("persist")) nil [45761 45909])
            ("ac-last-persist-help" function nil nil [45911 45977])
            ("ac-set-quick-help-timer" function nil nil [45979 46194])
            ("ac-cancel-quick-help-timer" function nil nil [46196 46345])
            ("ac-pos-tip-show-quick-help" function (:arguments ("menu" "item" "args")) nil [46347 47319])
            ("ac-quick-help-use-pos-tip-p" function nil nil [47321 47444])
            ("ac-quick-help" function (:arguments ("force")) nil [47446 48170])
            ("ac-remove-quick-help" function nil nil [48172 48371])
            ("ac-last-quick-help" function nil nil [48373 48971])
            ("ac-define-quick-help-command" function (:arguments ("name" "arglist" "body")) nil [48973 49150])
            ("ac-define-quick-help-command" code nil nil [49152 49288])
            ("ac-define-quick-help-command" code nil nil [49290 49422])
            ("ac-isearch-callback" function (:arguments ("list")) nil [49457 49536])
            ("ac-isearch" function nil nil [49538 50083])
            ("cl-defun" code nil nil [50119 51106])
            ("auto-complete" function
               (:user-visible-flag t
                :arguments ("sources"))
                nil [51123 51261])
            ("ac-fuzzy-complete" function (:user-visible-flag t) nil [51263 51872])
            ("ac-next" function (:user-visible-flag t) nil [51874 52111])
            ("ac-previous" function (:user-visible-flag t) nil [52113 52366])
            ("ac-expand" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [52368 53164])
            ("ac-expand-previous" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [53166 53295])
            ("ac-expand-common" function (:user-visible-flag t) nil [53297 53638])
            ("ac-complete-1" function (:arguments ("candidate")) nil [53640 54250])
            ("ac-complete" function (:user-visible-flag t) nil [54252 54350])
            ("cl-defun" code nil nil [54352 55850])
            ("ac-stop" function (:user-visible-flag t) nil [55852 55955])
            ("ac-ignore" function
               (:user-visible-flag t
                :arguments ("ignore"))
                nil [55957 56027])
            ("ac-mouse-1" function (:arguments ("event")) nil [56029 56153])
            ("ac-mouse-4" function (:arguments ("event")) nil [56155 56217])
            ("ac-mouse-5" function (:arguments ("event")) nil [56219 56277])
            ("ac-trigger-key-command" function (:arguments ("force")) nil [56279 56559])
            ("ac-clear-variables-every-minute-timer" variable nil nil [56591 56641])
            ("ac-clear-variables-after-save" variable nil nil [56642 56684])
            ("ac-clear-variables-every-minute" variable nil nil [56685 56729])
            ("ac-minutes-counter" variable nil nil [56730 56759])
            ("ac-clear-variable-after-save" function (:arguments ("variable" "pred")) nil [56761 56891])
            ("ac-clear-variables-after-save" function nil nil [56893 57075])
            ("ac-clear-variable-every-minutes" function (:arguments ("variable" "minutes")) nil [57077 57208])
            ("ac-clear-variable-every-minute" function (:arguments ("variable")) nil [57210 57306])
            ("ac-clear-variable-every-10-minutes" function (:arguments ("variable")) nil [57308 57409])
            ("ac-clear-variables-every-minute" function nil nil [57411 57613])
            ("ac-cursor-on-diable-face-p" function (:arguments ("point")) nil [57643 57766])
            ("ac-trigger-command-p" function (:arguments ("command")) nil [57768 58114])
            ("ac-fallback-key-sequence" function nil nil [58116 58300])
            ("ac-fallback-command" function (:arguments ("except-command")) nil [58302 58638])
            ("ac-compatible-package-command-p" function (:arguments ("command")) nil [58640 58855])
            ("ac-handle-pre-command" function nil nil [58857 59849])
            ("ac-handle-post-command" function nil nil [59851 60240])
            ("ac-flycheck-poll-completion-end-timer" variable nil nil [60242 60329])
            ("ac-syntax-checker-workaround" function nil nil [60331 61336])
            ("ac-setup" function nil nil [61338 61656])
            ("define-minor-mode" code nil nil [61673 62314])
            ("auto-complete-mode-maybe" function nil nil [62316 62514])
            ("define-global-minor-mode" code nil nil [62531 62653])
            ("ac-flyspell-workaround" function (:user-visible-flag t) nil [62702 63094])
            ("ac-linum-workaround" function (:user-visible-flag t) nil [63096 63381])
            ("ac-define-source" function (:arguments ("name" "source")) nil [63409 63996])
            ("ac-word-index" variable nil nil [64024 64050])
            ("ac-candidate-words-in-buffer" function (:arguments ("point" "prefix" "limit")) nil [64052 64958])
            ("ac-incremental-update-word-index" function nil nil [64960 65511])
            ("ac-update-word-index-1" function nil nil [65513 65934])
            ("ac-update-word-index" function nil nil [65936 66150])
            ("ac-word-candidates" function (:arguments ("buffer-pred")) nil [66152 66790])
            ("ac-define-source" code nil nil [66792 66865])
            ("ac-define-source" code nil nil [66867 66978])
            ("ac-define-source" code nil nil [66980 67215])
            ("ac-symbols-cache" variable nil nil [67240 67269])
            ("ac-clear-variable-every-10-minutes" code nil nil [67270 67324])
            ("ac-symbol-file" function (:arguments ("symbol" "type")) nil [67326 68810])
            ("ac-symbol-documentation" function (:arguments ("symbol")) nil [68812 70586])
            ("ac-symbol-candidates" function nil nil [70588 70889])
            ("ac-define-source" code nil nil [70891 71030])
            ("ac-functions-cache" variable nil nil [71057 71088])
            ("ac-clear-variable-every-10-minutes" code nil nil [71089 71145])
            ("ac-function-candidates" function nil nil [71147 71365])
            ("ac-define-source" code nil nil [71367 71555])
            ("ac-variables-cache" variable nil nil [71582 71613])
            ("ac-clear-variable-every-10-minutes" code nil nil [71614 71670])
            ("ac-variable-candidates" function nil nil [71672 71889])
            ("ac-define-source" code nil nil [71891 72034])
            ("ac-emacs-lisp-features" variable nil nil [72060 72095])
            ("ac-clear-variable-every-10-minutes" code nil nil [72096 72156])
            ("ac-emacs-lisp-feature-candidates" function nil nil [72158 72843])
            ("ac-define-source" code nil nil [72845 73022])
            ("defvaralias" code nil nil [73024 73088])
            ("ac-define-source" code nil nil [73107 73302])
            ("ac-define-source" code nil nil [73341 73448])
            ("ac-filename-cache" variable nil nil [73469 73499])
            ("ac-filename-candidate" function nil nil [73501 74292])
            ("ac-define-source" code nil nil [74294 74492])
            ("ac-define-source" code nil nil [74515 74604])
            ("auto-complete" package nil nil [74606 74630]))          
      :file "auto-complete.el"
      :pointmax 74662
      :fsize 74661
      :lastmodtime '(22373 1422 787365 777000)
      :unmatched-syntax nil))
  :file "!home!lyra!.emacs.d!elpa!auto-complete-20160416.604!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
