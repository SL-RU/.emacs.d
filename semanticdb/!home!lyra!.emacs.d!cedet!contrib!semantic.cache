;; Object contrib/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "contrib/"
  :tables
  (list
    (semanticdb-table "semantic-tag-folding.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/decorate/mode" include nil nil [3120 3153])
            ("cl" include nil nil [3173 3186])
            ("when" code nil nil [3319 3949])
            ("when" code nil nil [4067 4509])
            ("global-semantic-tag-folding-mode" variable (:user-visible-flag t) nil [4526 4986])
            ("define-minor-mode" code nil nil [5003 5344])
            ("semantic-tag-folding-mode-hook" variable (:user-visible-flag t) nil [5346 5491])
            ("semantic-tag-folding-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km [left-fringe mouse-1] (quote semantic-tag-folding-click)) km)) nil [5495 5681])
            ("semantic-tag-folding-mode" variable nil nil [5683 5836])
            ("make-variable-buffer-local" code nil nil [5838 5893])
            ("semantic-tag-folding-decoration-mode-hook-enabled" variable (:default-value t) nil [5895 6099])
            ("semantic-tag-folding-saved-decoration-styles" variable nil nil [6102 6210])
            ("make-variable-buffer-local" code nil nil [6211 6285])
            ("semantic-tag-folding-decoration-style" variable (:default-value (quote (("semantic-tag-folding" . t)))) nil [6287 6469])
            ("semantic-tag-folding-mode-setup" function nil nil [6471 8637])
            ("add-hook" code nil nil [8639 8723])
            ("semantic-tag-folding-decoration-mode-hook" function nil nil [8725 10382])
            ("define-minor-mode" code nil nil [10399 11279])
            ("semantic-add-minor-mode" code nil nil [11281 11340])
            ("define-semantic-decoration-style" code nil nil [11343 11425])
            ("make-variable-buffer-local" code nil nil [11637 11693])
            ("semantic-tag-folding-allow-folding-of" variable (:default-value (quote ((type) (function) (variable) (include) (comment) (package)))) nil [11696 13341])
            ("make-variable-buffer-local" code nil nil [13342 13409])
            ("semantic-tag-folding-tag-higlight-time" variable (:default-value 1) nil [13411 13668])
            ("semantic-tag-folding-highlight-tags-shown-by-reveal-mode" variable nil nil [13670 13853])
            ("semantic-tag-folding-show-tooltips" variable nil nil [13855 14315])
            ("semantic-tag-folding-function" variable (:default-value (quote semantic-tag-folding-function-default)) nil [14317 14535])
            ("semantic-tag-folding-set-fringe-image-style" function (:arguments ("symbol" "value")) nil [14537 17081])
            ("semantic-tag-folding-fringe-image-style" variable (:default-value (quote triangles)) nil [17083 17418])
            ("semantic-tag-folding-allow-folding-of" function (:arguments ("class")) nil [17420 17661])
            ("semantic-tag-folding-hidden-by-default" function (:arguments ("class")) nil [17663 17831])
            ("semantic-tag-folding-function-default" function (:arguments ("tag" "comment")) nil [17833 18588])
            ("semantic-tag-folding-p-default" function (:arguments ("tag")) nil [18590 19342])
            ("semantic-tag-folding-highlight-default" function (:arguments ("tag")) nil [19344 21858])
            ("semantic-tag-folding-get-attribute-overlay" function (:arguments ("tag" "create-if-null")) nil [21861 22445])
            ("semantic-tag-folding-get-folding-attribute" function (:arguments ("comment")) nil [22447 22742])
            ("semantic-tag-folding-get-fold-state" function (:arguments ("tag" "comment")) nil [22744 23093])
            ("semantic-tag-folding-set-fold-state" function (:arguments ("tag" "comment" "state")) nil [23095 23448])
            ("semantic-tag-folding-create-folding-overlays" function (:arguments ("tag" "start" "end" "point" "comment")) nil [23451 26526])
            ("semantic-tag-folding-fold-block" function (:user-visible-flag t) nil [26528 26718])
            ("semantic-tag-folding-show-block" function
               (:user-visible-flag t
                :arguments ("ov"))
                nil [26720 26951])
            ("semantic-tag-folding-show-all" function (:user-visible-flag t) nil [26953 27135])
            ("semantic-tag-folding-fold-all" function (:user-visible-flag t) nil [27137 27315])
            ("semantic-tag-folding-show-children" function (:user-visible-flag t) nil [27317 27552])
            ("semantic-tag-folding-fold-children" function (:user-visible-flag t) nil [27554 27787])
            ("semantic-tag-folding-fold-or-show-tags" function (:arguments ("tags" "fold")) nil [27789 28103])
            ("semantic-tag-folding-get-overlay" function nil nil [28105 28583])
            ("semantic-tag-folding-set-overlay-visibility" function (:arguments ("ov" "fold" "called-by-reveal-mode")) nil [28585 29981])
            ("put" code nil nil [30069 30180])
            ("semantic-tag-folding-set-overlay-visibility-for-reveal-mode" function (:arguments ("ov" "fold")) nil [30182 30636])
            ("semantic-tag-folding-highlight-overlay" function (:arguments ("ov")) nil [30638 31760])
            ("semantic-tag-folding-click" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [31762 32472])
            ("semantic-tag-folding" package nil nil [32474 32505]))          
      :file "semantic-tag-folding.el"
      :pointmax 32544
      :fsize 32543
      :lastmodtime '(22436 31432 234422 178000)
      :unmatched-syntax '((close-paren 3186 . 3187) (symbol 3155 . 3172) (open-paren 3154 . 3155)))
    (semanticdb-table "Project.ede"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("ede-proj-project" code nil nil [72 1677]))          
      :file "Project.ede"
      :pointmax 1678
      :fsize 1677
      :lastmodtime '(22436 31432 230422 178000)
      :unmatched-syntax nil)
    (semanticdb-table "eassist.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [4975 4988])
            ("semantic" include nil nil [4991 5010])
            ("semantic/find" include nil nil [5011 5035])
            ("eassist-string-without-last" function (:arguments ("string" "n")) nil [5116 5277])
            ("eassist-string-ends-with" function (:arguments ("string" "end")) nil [5279 5426])
            ("eassist-header-switches" variable (:default-value (quote (("h" "cpp" "cc" "c") ("hpp" "cpp" "cc") ("cpp" "h" "hpp") ("c" "h") ("C" "H") ("H" "C" "CPP" "CC") ("cc" "h" "hpp")))) nil [5601 6016])
            ("eassist-switch-h-cpp" function (:user-visible-flag t) nil [6033 7325])
            ("eassist-current-tag" variable nil nil [7489 7564])
            ("eassist-buffer" variable nil nil [7565 7638])
            ("eassist-names-column" variable nil nil [7639 7720])
            ("eassist-methods" variable nil nil [7721 7818])
            ("eassist-actual-methods" variable nil nil [7819 7930])
            ("eassist-search-string" variable nil nil [7931 8012])
            ("eassist-overlays" variable nil nil [8013 8071])
            ("eassist-function-tags" function nil nil [8073 9271])
            ("eassist-car-if-list" function (:arguments ("thing")) nil [9273 9421])
            ("eassist-function-string-triplet" function (:arguments ("f")) nil [9423 9664])
            ("eassist-format-triplets" function (:arguments ("f")) nil [9666 10766])
            ("eassist-list-methods" function (:user-visible-flag t) nil [10783 11181])
            ("eassist-jump-to-method" function (:user-visible-flag t) nil [11183 11793])
            ("eassist-matches-all" function (:arguments ("string" "substrings")) nil [11795 12012])
            ("eassist-search-string-updated" function nil nil [12014 12989])
            ("eassist-key-pressed" function (:arguments ("key")) nil [12991 13173])
            ("eassist-backspace-pressed" function (:user-visible-flag t) nil [13175 13384])
            ("eassist-make-key-function" function (:arguments ("key")) nil [13386 13513])
            ("eassist-key-itself" function (:arguments ("map" "key")) nil [13515 13664])
            ("eassist-escape" function (:user-visible-flag t) nil [13666 13805])
            ("eassist-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (do ((k (string-to-char "a") (+ 1 k))) ((> k (string-to-char "z"))) (define-key map (read-kbd-macro (char-to-string k)) (eassist-make-key-function k))) (do ((k (string-to-char "A") (+ 1 k))) ((> k (string-to-char "Z"))) (define-key map (read-kbd-macro (char-to-string k)) (eassist-make-key-function k))) (do ((k (string-to-char "0") (+ 1 k))) ((> k (string-to-char "9"))) (define-key map (read-kbd-macro (char-to-string k)) (eassist-make-key-function k))) (dolist (k (string-to-list "=><&!")) (define-key map (read-kbd-macro (char-to-string k)) (eassist-make-key-function k))) (eassist-key-itself map (string-to-char " ")) (eassist-key-itself map (string-to-char "_")) (define-key map (kbd "<RET>") (quote eassist-jump-to-method)) (define-key map (kbd "<backspace>") (quote eassist-backspace-pressed)) (define-key map (kbd "<ESC>") (quote eassist-escape)) map)) nil [13807 14891])
            ("eassist-method" type
               (:members ("full-line" "name" "position" "tag")
                :type "struct")
                nil [14893 14963])
            ("eassist-mode-init" function nil nil [14965 16596])
            ("define-derived-mode" code nil nil [16598 16805])
            ("eassist" package nil nil [16890 16908]))          
      :file "eassist.el"
      :pointmax 16935
      :fsize 16934
      :lastmodtime '(22436 31432 234422 178000)
      :unmatched-syntax '((close-paren 4988 . 4989) (symbol 4955 . 4972) (open-paren 4954 . 4955)))
    (semanticdb-table "wisent-php.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/wisent" include nil nil [1076 1102])
            ("wisent-php-wy" include nil nil [1103 1127])
            ("semantic/senator" include nil nil [1231 1258])
            ("semantic/imenu" include nil nil [1203 1228])
            ("semantic/ctxt" include nil nil [1176 1200])
            ("semantic/util" include nil nil [1149 1173])
            ("wisent-php-parse-error" function (:arguments ("msg")) nil [1316 1611])
            ("semantic-get-local-variables" function
               (:parent "php-mode"
                :override-function-flag t)
                nil [1643 2491])
            ("semantic-tag-protection" function
               (:parent "php-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent"))
                nil [2527 3233])
            ("semantic-analyze-split-name" function
               (:parent "php-mode"
                :override-function-flag t
                :arguments ("name"))
                nil [3280 3717])
            ("semantic-analyze-unsplit-name" function
               (:parent "php-mode"
                :override-function-flag t
                :arguments ("namelist"))
                nil [3719 3953])
            ("wisent-php-default-setup" function nil nil [4030 5266])
            ("wisent-php-create-merge-alias" function (:arguments ("tag" "region")) nil [5322 5679])
            ("wisent-php-merge-alias" function (:arguments ("tag" "region" "merge-tag")) nil [5681 6116])
            ("wisent-php-expand-tag-variable" function (:arguments ("tag")) nil [6118 7229])
            ("wisent-php-expand-tag-alias" function (:arguments ("tag")) nil [7231 8275])
            ("wisent-php-expand-tag" function (:arguments ("tag")) nil [8277 8616])
            ("add-hook" code nil nil [8633 8685])
            ("wisent-php" package nil nil [8687 8708]))          
      :file "wisent-php.el"
      :pointmax 8738
      :fsize 8737
      :lastmodtime '(22436 31432 234422 178000)
      :unmatched-syntax '((close-paren 1258 . 1259) (symbol 1129 . 1146) (open-paren 1128 . 1129)))
    (semanticdb-table "wisent-php-wy.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/lex" include nil nil [1081 1104])
            ("semantic/bovine" include nil nil [1124 1150])
            ("declare-function" code nil nil [1170 1231])
            ("declare-function" code nil nil [1232 1286])
            ("wisent-php-wy--keyword-table" variable
               (:constant-flag t
                :default-value (semantic-lex-make-keyword-table (quote (("exit" . T_EXIT) ("die" . T_EXIT) ("function" . T_FUNCTION) ("const" . T_CONST) ("return" . T_RETURN) ("try" . T_TRY) ("catch" . T_CATCH) ("throw" . T_THROW) ("if" . T_IF) ("elseif" . T_ELSEIF) ("endif" . T_ENDIF) ("else" . T_ELSE) ("while" . T_WHILE) ("endwhile" . T_ENDWHILE) ("do" . T_DO) ("for" . T_FOR) ("endfor" . T_ENDFOR) ("foreach" . T_FOREACH) ("endforeach" . T_ENDFOREACH) ("declare" . T_DECLARE) ("enddeclare" . T_ENDDECLARE) ("instanceof" . T_INSTANCEOF) ("int" . INT) ("as" . T_AS) ("switch" . T_SWITCH) ("endswitch" . T_ENDSWITCH) ("case" . T_CASE) ("default" . T_DEFAULT) ("break" . T_BREAK) ("continue" . T_CONTINUE) ("echo" . T_ECHO) ("print" . T_PRINT) ("namespace" . T_NAMESPACE) ("class" . T_CLASS) ("interface" . T_INTERFACE) ("extends" . T_EXTENDS) ("implements" . T_IMPLEMENTS) ("new" . T_NEW) ("package" . PACKAGE) ("clone" . T_CLONE) ("var" . T_VAR) ("eval" . T_EVAL) ("include" . T_INCLUDE) ("include_once" . T_INCLUDE_ONCE) ("require" . T_REQUIRE) ("require_once" . T_REQUIRE_ONCE) ("use" . T_USE) ("global" . T_GLOBAL) ("isset" . T_ISSET) ("empty" . T_EMPTY) ("__halt_compiler" . T_HALT_COMPILER) ("static" . T_STATIC) ("abstract" . T_ABSTRACT) ("final" . T_FINAL) ("private" . T_PRIVATE) ("protected" . T_PROTECTED) ("public" . T_PUBLIC) ("unset" . T_UNSET) ("list" . T_LIST) ("array" . T_ARRAY) ("or" . T_LOGICAL_OR) ("and" . T_LOGICAL_AND) ("xor" . T_LOGICAL_XOR) ("__CLASS__" . T_CLASS_C) ("__FUNCTION__" . T_FUNC_C) ("__METHOD__" . T_METHOD_C) ("__LINE__" . T_LINE) ("__FILE__" . T_FILE) ("@author" . _AUTHOR) ("@version" . _VERSION) ("@param" . _PARAM) ("@return" . _RETURN) ("@exception" . _EXCEPTION) ("@throws" . _THROWS) ("@see" . _SEE) ("@since" . _SINCE) ("@serial" . _SERIAL) ("@serialData" . _SERIALDATA) ("@serialField" . _SERIALFIELD) ("@deprecated" . _DEPRECATED))) (quote (("@deprecated" phpdoc (seq 12 usage (type function variable) opt t)) ("@serialField" phpdoc (seq 11 usage (variable) opt t)) ("@serialData" phpdoc (seq 10 usage (function) opt t)) ("@serial" phpdoc (seq 9 usage (variable) opt t)) ("@since" phpdoc (seq 8 usage (type function variable) opt t)) ("@see" phpdoc (seq 7 usage (type function variable) opt t with-ref t)) ("@throws" phpdoc (seq 6 usage (function) with-name t)) ("@exception" phpdoc (seq 5 usage (function) with-name t)) ("@return" phpdoc (seq 4 usage (function))) ("@param" phpdoc (seq 3 usage (function) with-name t)) ("@version" phpdoc (seq 2 usage (type))) ("@author" phpdoc (seq 1 usage (type))) ("public" summary "Access level modifier: public {class|interface|<type>} <name> ...") ("protected" summary "Access level modifier: protected {class|interface|<type>} <name> ...") ("private" summary "Access level modifier: private {class|interface|<type>} <name> ...") ("final" summary "Class|Member declaration modifier: final {class|<type>} <name> ...") ("abstract" summary "Class|Method declaration modifier: abstract {class|<type>} <name> ...") ("static" summary "Declaration modifier: static {class|interface|<type>} <name> ...") ("use" summary "Alias definition: use <imported> {as <name>}") ("implements" summary "Class SuperInterfaces declaration: implements <name> [, ...]") ("extends" summary "SuperClass|SuperInterfaces declaration: extends <name> [, ...]") ("interface" summary "Interface declaration: interface <name>") ("class" summary "Class declaration: class <name>") ("namespace" summary "Namespace declaration: namespace <name>") ("continue" summary "continue [<label>] ;") ("break" summary "break [<label>] ;") ("default" summary "switch(<expr>) { ... default: <stmts>}") ("case" summary "switch(<expr>) {case <const-expr>: <stmts> ... }") ("for" summary "for ([<init-expr>]; [<expr>]; [<update-expr>]) <stmt>") ("do" summary "do <stmt> while (<expr>);") ("while" summary "while (<expr>) <stmt> | do <stmt> while (<expr>);") ("else" summary "if (<expr>) <stmt> else <stmt>") ("if" summary "if (<expr>) <stmt> [else <stmt>]") ("catch" summary "try {<stmts>} catch(<parm>) {<stmts>} ... ") ("try" summary "try {<stmts>} [catch(<parm>) {<stmts>} ...] [finally {<stmts>}]") ("return" summary "return [<expr>] ;") ("const" summary "const <var> [= <expr>]")))))
                nil [1309 6302])
            ("wisent-php-wy--token-table" variable
               (:constant-flag t
                :default-value (semantic-lex-make-type-table (quote (("<no-type>" (T_IF) (T_EXIT)) ("code" (EPILOGUE) (PROLOGUE)) ("number" (NUMBER_LITERAL)) ("string" (STRING_LITERAL)) ("variable" (T_VARIABLE)) ("symbol" (IDENTIFIER)) ("punctuation" (T_NAMESPACE_SEP . "\\") (T_ASTERISK . "@") (T_COMP . "~") (T_OR . "|") (T_XOR . "^") (T_QUESTION . "?") (T_URSHIFTEQ . ">>>=") (T_URSHIFT . ">>>") (T_GT . ">") (T_EQ . "=") (T_LT . "<") (T_SEMI . ";") (T_COLON . ":") (T_DIV . "/") (T_DOT . ".") (T_MINUS . "-") (T_COMMA . ",") (T_PLUS . "+") (T_MULT . "*") (T_AND . "&") (T_MOD . "%") (T_NOT . "!") (T_HEREDOC . "<<<") (T_DOUBLE_ARROW . "=>") (T_SR . ">>") (T_SL . "<<") (T_BOOLEAN_AND . "&&") (T_BOOLEAN_OR . "||") (T_XOR_EQUAL . "^=") (T_OR_EQUAL . "|=") (T_AND_EQUAL . "&=") (T_SR_EQUAL . ">>=") (T_SL_EQUAL . "<<=") (T_MOD_EQUAL . "%=") (T_CONCAT_EQUAL . ".=") (T_DIV_EQUAL . "/=") (T_MUL_EQUAL . "*=") (T_MINUS_EQUAL . "-=") (T_PLUS_EQUAL . "+=") (T_IS_GREATER_OR_EQUAL . ">=") (T_IS_SMALLER_OR_EQUAL . "<=") (T_IS_NOT_EQUAL . "<>") (T_IS_NOT_EQUAL . "!=") (T_IS_EQUAL . "==") (T_IS_NOT_IDENTICAL . "!==") (T_IS_IDENTICAL . "===") (T_DEC . "--") (T_INC . "++") (T_PAAMAYIM_NEKUDOTAYIM . "::") (T_DEREF . "->")) ("close-paren" (RBRACK . "]") (RBRACE . "}") (RPAREN . ")")) ("open-paren" (LBRACK . "[") (LBRACE . "{") (LPAREN . "(")) ("block" (BRACK_BLOCK . "(LBRACK RBRACK)") (BRACE_BLOCK . "(LBRACE RBRACE)") (PAREN_BLOCK . "(LPAREN RPAREN)")))) (quote (("keyword" :declared t) ("code" :declared t) ("number" :declared t) ("string" :declared t) ("variable" syntax "\\$\\(\\sw\\|\\s_\\)+") ("variable" :declared t) ("symbol" syntax "[a-zA-Z_]\\(\\sw\\|\\s_\\)*") ("symbol" :declared t) ("punctuation" syntax "\\(\\s.\\|\\s'\\)+") ("punctuation" matchdatatype string) ("punctuation" :declared t) ("block" :declared t)))))
                nil [6304 8661])
            ("wisent-php-wy--parse-table" variable
               (:constant-flag t
                :default-value (progn (eval-when-compile (require (quote semantic/wisent/comp))) (wisent-compile-grammar (quote ((PAREN_BLOCK BRACE_BLOCK BRACK_BLOCK LPAREN RPAREN LBRACE RBRACE LBRACK RBRACK T_DEREF T_PAAMAYIM_NEKUDOTAYIM T_INC T_DEC T_IS_IDENTICAL T_IS_NOT_IDENTICAL T_IS_EQUAL T_IS_NOT_EQUAL T_IS_SMALLER_OR_EQUAL T_IS_GREATER_OR_EQUAL T_PLUS_EQUAL T_MINUS_EQUAL T_MUL_EQUAL T_DIV_EQUAL T_CONCAT_EQUAL T_MOD_EQUAL T_SL_EQUAL T_SR_EQUAL T_AND_EQUAL T_OR_EQUAL T_XOR_EQUAL T_BOOLEAN_OR T_BOOLEAN_AND T_SL T_SR T_DOUBLE_ARROW T_HEREDOC T_NOT T_MOD T_AND T_MULT T_PLUS T_COMMA T_MINUS T_DOT T_DIV T_COLON T_SEMI T_LT T_EQ T_GT T_URSHIFT T_URSHIFTEQ T_QUESTION T_XOR T_OR T_COMP T_ASTERISK T_NAMESPACE_SEP IDENTIFIER T_VARIABLE STRING_LITERAL NUMBER_LITERAL PROLOGUE EPILOGUE T_EXIT T_FUNCTION T_CONST T_RETURN T_TRY T_CATCH T_THROW T_IF T_ELSEIF T_ENDIF T_ELSE T_WHILE T_ENDWHILE T_DO T_FOR T_ENDFOR T_FOREACH T_ENDFOREACH T_DECLARE T_ENDDECLARE T_INSTANCEOF INT T_AS T_SWITCH T_ENDSWITCH T_CASE T_DEFAULT T_BREAK T_CONTINUE T_ECHO T_PRINT T_NAMESPACE T_CLASS T_INTERFACE T_EXTENDS T_IMPLEMENTS T_NEW PACKAGE T_CLONE T_VAR T_EVAL T_INCLUDE T_INCLUDE_ONCE T_REQUIRE T_REQUIRE_ONCE T_USE T_GLOBAL T_ISSET T_EMPTY T_HALT_COMPILER T_STATIC T_ABSTRACT T_FINAL T_PRIVATE T_PROTECTED T_PUBLIC T_UNSET T_LIST T_ARRAY T_LOGICAL_OR T_LOGICAL_AND T_LOGICAL_XOR T_CLASS_C T_FUNC_C T_METHOD_C T_LINE T_FILE _AUTHOR _VERSION _PARAM _RETURN _EXCEPTION _THROWS _SEE _SINCE _SERIAL _SERIALDATA _SERIALFIELD _DEPRECATED) ((left T_INCLUDE T_INCLUDE_ONCE T_EVAL T_REQUIRE T_REQUIRE_ONCE) (left T_COMMA) (left T_LOGICAL_OR) (left T_LOGICAL_XOR) (left T_LOGICAL_AND) (right T_PRINT) (left T_EQ T_PLUS_EQUAL T_MINUS_EQUAL T_MUL_EQUAL T_DIV_EQUAL T_CONCAT_EQUAL T_MOD_EQUAL T_AND_EQUAL T_OR_EQUAL T_XOR_EQUAL T_SL_EQUAL T_SR_EQUAL) (left T_QUESTION T_COLON) (left T_BOOLEAN_OR) (left T_BOOLEAN_AND) (left T_OR) (left T_XOR) (left T_AND) (nonassoc T_IS_EQUAL T_IS_NOT_EQUAL T_IS_IDENTICAL T_IS_NOT_IDENTICAL) (nonassoc T_LT T_IS_SMALLER_OR_EQUAL 62 T_IS_GREATER_OR_EQUAL) (left T_SL T_SR) (left T_PLUS T_MINUS T_DOT) (left T_MULT T_DIV T_MOD) (right T_NOT) (nonassoc T_INSTANCEOF) (right T_COMP T_INC T_DEC T_INT_CAST T_DOUBLE_CAST T_STRING_CAST T_ARRAY_CAST T_OBJECT_CAST T_BOOL_CAST T_UNSET_CAST T_ASTERISK) (right LBRACK) (nonassoc T_NEW T_CLONE) (left T_ELSEIF) (left T_ELSE) (left T_ENDIF)) (start ((PROLOGUE compilation_units EPILOGUE) (identity $2)) ((PROLOGUE compilation_units) (identity $2))) (compilation_units ((T_NAMESPACE namespaced_identifier T_SEMI compilation_units) (wisent-raw-tag (semantic-tag-new-type $2 $1 $4 nil))) (nil) ((compilation_unit compilation_units) (if $2 (append $2 (wisent-cook-tag $1)) (wisent-cook-tag $1)))) (compilation_unit ((include_declaration)) ((type_declaration))) (include_declaration ((T_REQUIRE require_expr T_SEMI) (identity $2)) ((T_REQUIRE_ONCE require_expr T_SEMI) (identity $2)) ((T_INCLUDE require_expr T_SEMI) (identity $2)) ((T_INCLUDE_ONCE require_expr T_SEMI) (identity $2))) (require_expr ((STRING_LITERAL) (wisent-raw-tag (semantic-tag-new-include $1 nil))) ((PAREN_BLOCK) (wisent-raw-tag (semantic-tag-new-include $1 nil)))) (type_declaration ((function_declaration)) ((class_declaration)) ((interface_declaration)) ((namespace_declaration)) ((use_statement))) (class_declaration ((class_modifiers_opt T_CLASS IDENTIFIER superc_opt interfaces_opt class_body) (wisent-raw-tag (semantic-tag-new-type $3 $2 $6 (if (or $4 $5) (cons $4 $5)) :typemodifiers $1)))) (superc_opt (nil) ((T_EXTENDS namespaced_identifier) (identity $2))) (interfaces_opt (nil) ((T_IMPLEMENTS identifier_list) (nreverse $2))) (class_body ((BRACE_BLOCK) (semantic-parse-region (car $region1) (cdr $region1) (quote class_member_declaration) 1))) (class_member_declaration ((LBRACE) nil) ((RBRACE) nil) ((block) nil) ((interface_declaration)) ((class_declaration)) ((method_declaration)) ((field_declaration)) ((constant_declaration))) (namespace_declaration ((T_NAMESPACE namespaced_identifier namespace_body) (wisent-raw-tag (semantic-tag-new-type $2 $1 $3 nil)))) (namespace_body ((BRACE_BLOCK) (semantic-parse-region (car $region1) (cdr $region1) (quote compilation_unit) 1))) (use_statement ((T_USE use_declarations T_SEMI) (identity $2))) (use_declarations ((use_declaration T_COMMA use_declarations) (wisent-php-merge-alias $1 $region1 $3)) ((use_declaration) (wisent-php-create-merge-alias $1 $region1))) (use_declaration ((namespaced_identifier T_AS IDENTIFIER) (wisent-raw-tag (semantic-tag-new-alias $3 "alias" $1))) ((namespaced_identifier) (wisent-raw-tag (semantic-tag-new-alias (car (last (split-string $1 "\\\\"))) "alias" $1)))) (interface_declaration ((class_modifiers_opt T_INTERFACE IDENTIFIER extends_interfaces_opt interface_body) (wisent-raw-tag (semantic-tag-new-type $3 $2 $5 (if $4 (cons nil $4)) :typemodifiers $1)))) (extends_interfaces_opt (nil) ((T_EXTENDS identifier_list) (identity $2))) (interface_body ((BRACE_BLOCK) (semantic-parse-region (car $region1) (cdr $region1) (quote interface_member_declaration) 1))) (interface_member_declaration ((LBRACE) nil) ((RBRACE) nil) ((interface_declaration)) ((class_declaration)) ((method_declaration)) ((field_declaration)) ((constant_declaration))) (function_declaration ((method_declarator method_body) (wisent-raw-tag (semantic-tag-new-function (car $1) nil (cdr $1))))) (method_declaration ((method_modifiers_opt method_declarator method_body) (wisent-raw-tag (semantic-tag-new-function (car $2) nil (cdr $2) :typemodifiers $1)))) (method_declarator ((T_FUNCTION reference_opt IDENTIFIER formal_parameter_list) (cons $3 $4))) (identifier_list ((identifier_list T_COMMA namespaced_identifier) (cons $3 $1)) ((namespaced_identifier) (list $1))) (method_body ((T_SEMI)) ((block))) (block ((BRACE_BLOCK))) (formal_parameter_list ((PAREN_BLOCK) (semantic-parse-region (car $region1) (cdr $region1) (quote formal_parameters) 1))) (formal_parameters ((LPAREN) nil) ((RPAREN) nil) ((formal_parameter T_COMMA)) ((formal_parameter RPAREN))) (formal_parameter ((type_opt T_VARIABLE T_EQ expression) (wisent-raw-tag (semantic-tag-new-variable $2 $1 $region4))) ((type_opt T_VARIABLE) (wisent-raw-tag (semantic-tag-new-variable $2 $1 nil)))) (type_opt (nil) ((T_ARRAY)) ((namespaced_identifier))) (field_declaration ((field_modifiers_opt variable_declarator T_SEMI) (wisent-raw-tag (semantic-tag-new-variable (car $2) nil (cdr $2) :typemodifiers $1)))) (variable_declarator ((T_VARIABLE T_EQ variable_initializer) (cons $1 $3)) ((T_VARIABLE) (cons $1 nil))) (constant_declaration ((T_CONST IDENTIFIER T_EQ variable_initializer T_SEMI) (wisent-raw-tag (semantic-tag-new-variable $2 nil $region3 :typemodifiers (list "static" "public") :constant-flag t)))) (reference_opt (nil) ((T_AND))) (variable_initializer ((expression))) (expression ((expression term)) ((term))) (term ((literal)) ((operator)) ((IDENTIFIER)) ((namespaced_identifier)) ((T_VARIABLE)) ((BRACK_BLOCK)) ((PAREN_BLOCK)) ((BRACE_BLOCK)) ((T_NEW)) ((T_CLONE)) ((T_ARRAY))) (namespaced_identifier ((T_NAMESPACE_SEP namespaced_identifier) (concat "\\" $2)) ((IDENTIFIER T_NAMESPACE_SEP namespaced_identifier) (concat $1 "\\" $3)) ((IDENTIFIER))) (literal ((STRING_LITERAL)) ((NUMBER_LITERAL))) (operator ((T_DEREF)) ((T_PAAMAYIM_NEKUDOTAYIM)) ((T_INC)) ((T_DEC)) ((T_IS_IDENTICAL)) ((T_IS_NOT_IDENTICAL)) ((T_IS_EQUAL)) ((T_IS_NOT_EQUAL)) ((T_IS_NOT_EQUAL)) ((T_IS_SMALLER_OR_EQUAL)) ((T_IS_GREATER_OR_EQUAL)) ((T_PLUS_EQUAL)) ((T_MINUS_EQUAL)) ((T_MUL_EQUAL)) ((T_DIV_EQUAL)) ((T_CONCAT_EQUAL)) ((T_MOD_EQUAL)) ((T_SL_EQUAL)) ((T_SR_EQUAL)) ((T_AND_EQUAL)) ((T_OR_EQUAL)) ((T_XOR_EQUAL)) ((T_BOOLEAN_OR)) ((T_BOOLEAN_AND)) ((T_SL)) ((T_SR)) ((T_DOUBLE_ARROW)) ((T_HEREDOC)) ((T_NOT)) ((T_MOD)) ((T_AND)) ((T_MULT)) ((T_PLUS)) ((T_COMMA)) ((T_MINUS)) ((T_DOT)) ((T_DIV)) ((T_COLON)) ((T_LT)) ((T_EQ)) ((T_GT)) ((T_URSHIFT)) ((T_URSHIFTEQ)) ((T_QUESTION)) ((T_XOR)) ((T_OR)) ((T_COMP)) ((T_ASTERISK)) ((T_LIST)) ((T_ARRAY)) ((T_LOGICAL_OR)) ((T_LOGICAL_AND)) ((T_LOGICAL_XOR))) (class_modifiers_opt (nil) ((class_modifiers) (nreverse $1))) (class_modifiers ((class_modifiers class_modifier) (cons $2 $1)) ((class_modifier) (list $1))) (class_modifier ((T_FINAL)) ((T_ABSTRACT))) (method_modifiers_opt (nil) ((method_modifiers) (nreverse $1))) (method_modifiers ((method_modifiers method_modifier) (cons $2 $1)) ((method_modifier) (list $1))) (method_modifier ((T_FINAL)) ((T_ABSTRACT)) ((T_STATIC)) ((T_PRIVATE)) ((T_PROTECTED)) ((T_PUBLIC))) (field_modifiers_opt (nil) ((field_modifiers) (nreverse $1))) (field_modifiers ((field_modifiers field_modifier) (cons $2 $1)) ((field_modifier) (list $1))) (field_modifier ((method_modifier)) ((T_VAR))) (dims_opt (nil (identity "")) ((dims))) (dims ((dims BRACK_BLOCK) (concat $1 "[]")) ((BRACK_BLOCK) (identity "[]"))))) (quote (start compilation_units compilation_unit include_declaration require_expr use_statement type_declaration class_declaration class_body class_member_declaration namespace_declaration namespace_body interface_declaration interface_body interface_member_declaration method_declaration method_declarator identifier_list method_body block formal_parameter_list formal_parameters formal_parameter field_declaration variable_declarator constant_declaration variable_initializer class_modifiers class_modifier method_modifiers method_modifier field_modifiers field_modifier)))))
                nil [8663 18952])
            ("wisent-php-wy--install-parser" function nil nil [18954 19558])
            ("define-lex-block-type-analyzer" code nil nil [19579 19850])
            ("define-lex-string-type-analyzer" code nil nil [19852 21181])
            ("define-lex-regex-type-analyzer" code nil nil [21183 21346])
            ("define-lex-regex-type-analyzer" code nil nil [21348 21513])
            ("define-lex-regex-type-analyzer" code nil nil [21515 21685])
            ("define-lex-sexp-type-analyzer" code nil nil [21687 21823])
            ("define-lex-keyword-type-analyzer" code nil nil [21825 21967])
            ("semantic-php-number-regexp" variable
               (:constant-flag t
                :default-value (eval-when-compile (concat "\\(" "\\<[0-9]+[.][0-9]+\\([eE][-+]?[0-9]+\\)?[fFdD]?\\>" "\\|" "\\<[0-9]+[.][eE][-+]?[0-9]+[fFdD]?\\>" "\\|" "\\<[0-9]+[.][fFdD]\\>" "\\|" "\\<[0-9]+[.]" "\\|" "[.][0-9]+\\([eE][-+]?[0-9]+\\)?[fFdD]?\\>" "\\|" "\\<[0-9]+[eE][-+]?[0-9]+[fFdD]?\\>" "\\|" "\\<0[xX][0-9a-fA-F]+[lL]?\\>" "\\|" "\\<[0-9]+[lLfFdD]?\\>" "\\)")))
                nil [21987 23082])
            ("wisent-php-label-regex" variable
               (:constant-flag t
                :default-value "[a-zA-Z_-\377][a-zA-Z0-9_-\377]*")
                nil [23084 23162])
            ("wisent-in-php" variable nil nil [23164 23246])
            ("wisent-php--move-to-php-beginning" function nil nil [23248 23632])
            ("define-lex-regex-analyzer" code nil nil [23634 23953])
            ("define-lex-regex-analyzer" code nil nil [23955 24220])
            ("define-lex-regex-analyzer" code nil nil [24225 24659])
            ("define-lex-analyzer" code nil nil [24661 25159])
            ("wisent-php-lexer" function (:lexical-analyzer-flag t) nil [25198 25908])
            ("wisent-php-wy" package nil nil [25910 25934]))          
      :file "wisent-php-wy.el"
      :pointmax 25967
      :fsize 25966
      :lastmodtime '(22436 32384 622445 673000)
      :unmatched-syntax '((close-paren 1150 . 1151) (symbol 1106 . 1123) (open-paren 1105 . 1106)))
    (semanticdb-table "wisent-csharp.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/wisent" include nil nil [1356 1382])
            ("semantic/format" include nil nil [1383 1409])
            ("semantic/ctxt" include nil nil [1410 1434])
            ("wisent-csharp-wy" include nil nil [1435 1462])
            ("wysent-csharp-number-re" variable
               (:constant-flag t
                :default-value (eval-when-compile (concat "\\(" "\\<[0-9]+[.][0-9]+\\([eE][-+]?[0-9]+\\)?[fFdD]?\\>" "\\|" "\\<[0-9]+[.][eE][-+]?[0-9]+[fFdD]?\\>" "\\|" "\\<[0-9]+[.][fFdD]\\>" "\\|" "\\<[0-9]+[.]" "\\|" "[.][0-9]+\\([eE][-+]?[0-9]+\\)?[fFdD]?\\>" "\\|" "\\<[0-9]+[eE][-+]?[0-9]+[fFdD]?\\>" "\\|" "\\<0[xX][0-9a-fA-F]+[lL]?\\>" "\\|" "\\<[0-9]+[lLfFdD]?\\>" "\\)")))
                nil [1647 2739])
            ("wisent-csharp-string-re" variable
               (:constant-flag t
                :default-value "@?['\"]")
                nil [2741 2835])
            ("wisent-csharp-expand-tag" function (:arguments ("tag")) nil [2839 4255])
            ("semantic-format-tag-type" function
               (:parent "csharp-mode"
                :override-function-flag t
                :arguments ("tag" "color"))
                nil [4487 4809])
            ("semantic-format-tag-uml-prototype" function
               (:parent "csharp-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [4857 6041])
            ("semantic-tag-abstract" function
               (:parent "csharp-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent"))
                nil [6088 6558])
            ("wisent-csharp-internal-is-protected-p" variable (:default-value t) nil [6560 6758])
            ("semantic-tag-protection" function
               (:parent "csharp-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent"))
                nil [6799 7609])
            ("semantic-get-local-variables" function
               (:parent "csharp-mode"
                :override-function-flag t)
                nil [7780 8774])
            ("define-lex-regex-analyzer" code nil nil [8939 9149])
            ("define-lex-regex-analyzer" code nil nil [9151 9326])
            ("define-lex-analyzer" code nil nil [9328 9761])
            ("define-lex-simple-regex-analyzer" code nil nil [9763 9908])
            ("define-lex-regex-analyzer" code nil nil [9910 10202])
            ("define-lex-block-analyzer" code nil nil [10204 10437])
            ("wisent-csharp-lexer" function (:lexical-analyzer-flag t) nil [10439 10891])
            ("wisent-csharp-default-setup" function nil nil [11077 12068])
            ("add-hook" code nil nil [12088 12146])
            ("wisent-csharp-lex-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12310 12842])
            ("wisent-csharp" package nil nil [12845 12869]))          
      :file "wisent-csharp.el"
      :pointmax 12902
      :fsize 12901
      :lastmodtime '(22436 31432 234422 178000)
      :unmatched-syntax nil)
    (semanticdb-table "wisent-csharp-wy.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/lex" include nil nil [1077 1100])
            ("semantic/bovine" include nil nil [1120 1146])
            ("wisent-csharp-wy--keyword-table" variable
               (:constant-flag t
                :default-value (semantic-lex-make-keyword-table (quote (("abstract" . ABSTRACT) ("add" . ADD) ("as" . AS) ("base" . BASE) ("bool" . BOOL) ("break" . BREAK) ("byte" . BYTE) ("case" . CASE) ("catch" . CATCH) ("char" . CHAR) ("checked" . CHECKED) ("class" . CLASS) ("const" . CONST) ("continue" . CONTINUE) ("decimal" . DECIMAL) ("default" . DEFAULT) ("delegate" . DELEGATE) ("do" . DO) ("double" . DOUBLE) ("else" . ELSE) ("enum" . ENUM) ("event" . EVENT) ("explicit" . EXPLICIT) ("extern" . EXTERN) ("finally" . FINALLY) ("fixed" . FIXED) ("float" . FLOAT) ("for" . FOR) ("foreach" . FOREACH) ("get" . GET) ("goto" . GOTO) ("if" . IF) ("implicit" . IMPLICIT) ("in" . IN) ("int" . INT) ("interface" . INTERFACE) ("internal" . INTERNAL) ("is" . IS) ("lock" . LOCK) ("long" . LONG) ("namespace" . NAMESPACE) ("new" . NEW) ("object" . OBJECT) ("operator" . OPERATOR) ("out" . OUT) ("override" . OVERRIDE) ("params" . PARAMS) ("private" . PRIVATE) ("protected" . PROTECTED) ("public" . PUBLIC) ("readonly" . READONLY) ("ref" . REF) ("remove" . REMOVE) ("return" . RETURN) ("sbyte" . SBYTE) ("sealed" . SEALED) ("set" . SET) ("short" . SHORT) ("sizeof" . SIZEOF) ("stackalloc" . STACKALLOC) ("static" . STATIC) ("string" . STRING) ("struct" . STRUCT) ("switch" . SWITCH) ("this" . THIS) ("throw" . THROW) ("try" . TRY) ("typeof" . TYPEOF) ("unit" . UINT) ("ulong" . ULONG) ("unchecked" . UNCHECKED) ("unsafe" . UNSAFE) ("ushort" . USHORT) ("using" . USING) ("virtual" . VIRTUAL) ("void" . VOID) ("volatile" . VOLATILE) ("while" . WHILE))) (quote (("while" summary "while (<expr>) <stmt> | do <stmt> while (<expr>);") ("volatile" summary "Field declaration modifier: volatile <type> <name> ...") ("void" summary "Method return type: void <name> ...") ("virtual" summary "") ("using" summary "Namespace import: using <name> | using <identifier> = <name>;") ("ushort" summary "") ("unsafe" summary "") ("unchecked" summary "") ("ulong" summary "") ("unit" summary "") ("typeof" summary "") ("try" summary "try {<stmts>} [catch(<parm>) {<stmts>} ...] [finally {<stmts>}]") ("throw" summary "throw <expr> ;") ("switch" summary "switch(<expr>) {[case <const-expr>: <stmts> ...] [default: <stmts>]}") ("struct" summary "") ("string" summary "") ("static" summary "Declaration modifier: static {class|interface|<type>} <name> ...") ("stackalloc" summary "") ("sizeof" summary "") ("short" summary "Integral primitive type (-32768 to 32767)") ("set" summary "") ("sealed" summary "") ("sbyte" summary "") ("return" summary "return [<expr>] ;") ("remove" summary "") ("ref" summary "") ("readonly" summary "") ("public" summary "Access level modifier: public {class|interface|<type>} <name> ...") ("protected" summary "Access level modifier: protected {class|interface|<type>} <name> ...") ("private" summary "Access level modifier: private {class|interface|<type>} <name> ...") ("params" summary "") ("override" summary "") ("out" summary "") ("operator" summary "") ("object" summary "") ("namespace" summary "") ("long" summary "Integral primitive type (-9223372036854775808 to 9223372036854775807)") ("lock" summary "") ("is" summary "") ("internal" summary "") ("interface" summary "Interface declaration: interface <name>") ("int" summary "Integral primitive type (-2147483648 to 2147483647)") ("in" summary "") ("implicit" summary "") ("if" summary "if (<expr>) <stmt> [else <stmt>]") ("goto" summary "Unused reserved word") ("get" summary "") ("foreach" summary "") ("for" summary "for ([<init-expr>]; [<expr>]; [<update-expr>]) <stmt>") ("float" summary "Primitive floating-point type (single-precision 32-bit IEEE 754)") ("fixed" summary "") ("finally" summary "try {<stmts>} ... finally {<stmts>}") ("extern" summary "") ("explicit" summary "") ("event" summary "") ("enum" summary "") ("else" summary "if (<expr>) <stmt> else <stmt>") ("double" summary "Primitive floating-point type (double-precision 64-bit IEEE 754)") ("do" summary "do <stmt> while (<expr>);") ("delegate" summary "") ("default" summary "switch(<expr>) { ... default: <stmts>}") ("decimal" summary "") ("continue" summary "continue [<label>] ;") ("const" summary "Unused reserved word") ("class" summary "Class declaration: class <name>") ("checked" summary "") ("char" summary "Integral primitive type (' ' to '\357\277\277') (0 to 65535)") ("catch" summary "try {<stmts>} catch(<parm>) {<stmts>} ... ") ("case" summary "switch(<expr>) {case <const-expr>: <stmts> ... }") ("byte" summary "Integral primitive type (-128 to 127)") ("break" summary "break [<label>] ;") ("bool" summary "Primitive logical quantity type (true or false)") ("base" summary "") ("as" summary "") ("add" summary "") ("abstract" summary "Class|Method declaration modifier: abstract {class|<type>} <name> ...")))))
                nil [1188 6745])
            ("wisent-csharp-wy--token-table" variable
               (:constant-flag t
                :default-value (semantic-lex-make-type-table (quote (("number" (NUMBER_LITERAL)) ("string" (STRING_LITERAL)) ("symbol" (IDENTIFIER) (BOOLEAN_LITERAL . "true") (BOOLEAN_LITERAL . "false") (NULL_LITERAL . "null")) ("punctuation" (COMP . "~") (OROR . "||") (OREQ . "|=") (OR . "|") (XOREQ . "^=") (XOR . "^") (QUESTION . "?") (RSHIFTEQ . ">>=") (RSHIFT . ">>") (GTEQ . ">=") (GT . ">") (EQEQ . "==") (EQ . "=") (LTEQ . "<=") (LSHIFTEQ . "<<=") (LSHIFT . "<<") (LT . "<") (DEREF . "->") (SEMICOLON . ";") (COLON . ":") (DIVEQ . "/=") (DIV . "/") (DOT . ".") (MINUSEQ . "-=") (MINUSMINUS . "--") (MINUS . "-") (COMMA . ",") (PLUSEQ . "+=") (PLUSPLUS . "++") (PLUS . "+") (MULTEQ . "*=") (MULT . "*") (ANDEQ . "&=") (ANDAND . "&&") (AND . "&") (MODEQ . "%=") (MOD . "%") (NOTEQ . "!=") (NOT . "!")) ("semantic-list" (BRACK_BLOCK . "^\\[") (BRACE_BLOCK . "^{") (PAREN_BLOCK . "^(")) ("close-paren" (RBRACK . "]") (RBRACE . "}") (RPAREN . ")")) ("open-paren" (LBRACK . "[") (LBRACE . "{") (LPAREN . "(")))) (quote nil)))
                nil [6747 8161])
            ("wisent-csharp-wy--parse-table" variable
               (:constant-flag t
                :default-value (progn (eval-when-compile (require (quote semantic/wisent/comp))) (wisent-compile-grammar (quote ((LPAREN RPAREN LBRACE RBRACE LBRACK RBRACK PAREN_BLOCK BRACE_BLOCK BRACK_BLOCK NOT NOTEQ MOD MODEQ AND ANDAND ANDEQ MULT MULTEQ PLUS PLUSPLUS PLUSEQ COMMA MINUS MINUSMINUS MINUSEQ DOT DIV DIVEQ COLON SEMICOLON DEREF LT LSHIFT LSHIFTEQ LTEQ EQ EQEQ GT GTEQ RSHIFT RSHIFTEQ QUESTION XOR XOREQ OR OREQ OROR COMP NULL_LITERAL BOOLEAN_LITERAL IDENTIFIER STRING_LITERAL NUMBER_LITERAL ABSTRACT ADD AS BASE BOOL BREAK BYTE CASE CATCH CHAR CHECKED CLASS CONST CONTINUE DECIMAL DEFAULT DELEGATE DO DOUBLE ELSE ENUM EVENT EXPLICIT EXTERN FINALLY FIXED FLOAT FOR FOREACH GET GOTO IF IMPLICIT IN INT INTERFACE INTERNAL IS LOCK LONG NAMESPACE NEW OBJECT OPERATOR OUT OVERRIDE PARAMS PRIVATE PROTECTED PUBLIC READONLY REF REMOVE RETURN SBYTE SEALED SET SHORT SIZEOF STACKALLOC STATIC STRING STRUCT SWITCH THIS THROW TRY TYPEOF UINT ULONG UNCHECKED UNSAFE USHORT USING VIRTUAL VOID VOLATILE WHILE) nil (literal ((NULL_LITERAL)) ((BOOLEAN_LITERAL)) ((STRING_LITERAL)) ((NUMBER_LITERAL))) (integral_type ((SBYTE)) ((BYTE)) ((SHORT)) ((USHORT)) ((INT)) ((UINT)) ((LONG)) ((ULONG)) ((CHAR))) (predefined_type ((BOOL)) ((BYTE)) ((CHAR)) ((DECIMAL)) ((DOUBLE)) ((FLOAT)) ((INT)) ((LONG)) ((OBJECT)) ((SBYTE)) ((SHORT)) ((STRING)) ((UINT)) ((ULONG)) ((USHORT))) (type ((qualified_name rank_specifiers_opt) (concat $1 $2)) ((predefined_type rank_specifiers_opt) (concat $1 $2))) (array_type ((qualified_name rank_specifiers) (concat $1 $2)) ((predefined_type rank_specifiers) (concat $1 $2))) (rank_specifiers_opt (nil (identity "")) ((rank_specifiers))) (rank_specifiers ((rank_specifiers BRACK_BLOCK) (concat $1 "[]")) ((BRACK_BLOCK) (identity "[]"))) (qualified_name ((qualified_name DOT IDENTIFIER) (concat $1 "." $3)) ((IDENTIFIER))) (qualified_name_list ((qualified_name_list COMMA qualified_name) (cons $3 $1)) ((qualified_name) (list $1))) (argument_list_opt (nil) ((argument_list))) (argument_list ((argument_list COMMA argument)) ((argument))) (argument ((REF expression)) ((OUT expression)) ((expression))) (expression ((expression term)) ((term))) (constant_expression ((expression))) (term ((literal)) ((operator)) ((predefined_type)) ((IDENTIFIER)) ((BRACK_BLOCK)) ((PAREN_BLOCK)) ((BRACE_BLOCK)) ((NEW)) ((CLASS)) ((THIS)) ((BASE))) (operator ((NOT)) ((PLUS)) ((PLUSPLUS)) ((MINUS)) ((MINUSMINUS)) ((NOTEQ)) ((MOD)) ((MODEQ)) ((AND)) ((ANDAND)) ((ANDEQ)) ((MULT)) ((MULTEQ)) ((PLUSEQ)) ((MINUSEQ)) ((DOT)) ((DIV)) ((DIVEQ)) ((COLON)) ((LT)) ((LSHIFT)) ((LSHIFTEQ)) ((LTEQ)) ((EQ)) ((EQEQ)) ((GT)) ((GTEQ)) ((RSHIFT)) ((RSHIFTEQ)) ((QUESTION)) ((XOR)) ((XOREQ)) ((OR)) ((OREQ)) ((OROR)) ((COMP)) ((IS)) ((AS))) (compilation_unit ((using_directive)) ((namespace_declaration)) ((type_declaration))) (using_directive ((USING IDENTIFIER EQ qualified_name SEMICOLON) (wisent-raw-tag (semantic-tag-new-include $4 nil (quote alias) $2))) ((USING qualified_name SEMICOLON) (wisent-raw-tag (semantic-tag-new-include $2 nil)))) (namespace_declaration ((NAMESPACE qualified_name namespace_body) (wisent-raw-tag (semantic-tag-new-type $2 $1 $3 nil)))) (namespace_body ((BRACE_BLOCK) (semantic-parse-region (car $region1) (cdr $region1) (quote namespace_member_declaration) 1))) (namespace_member_declaration ((LBRACE) nil) ((RBRACE) nil) ((block) nil) ((using_directive)) ((namespace_declaration)) ((type_declaration))) (type_declaration ((SEMICOLON) nil) ((class_declaration)) ((struct_declaration)) ((interface_declaration)) ((enum_declaration)) ((delegate_declaration))) (modifiers_opt (nil) ((modifiers) (nreverse $1))) (modifiers ((modifiers modifier) (cons $2 $1)) ((modifier) (list $1))) (modifier ((NEW)) ((PUBLIC)) ((PROTECTED)) ((INTERNAL)) ((PRIVATE)) ((ABSTRACT)) ((SEALED)) ((STATIC)) ((READONLY)) ((VOLATILE)) ((VIRTUAL)) ((OVERRIDE)) ((EXTERN)) ((IMPLICIT)) ((EXPLICIT))) (class_bases_opt (nil) ((COLON qualified_name) (cons $2 nil)) ((COLON qualified_name COMMA qualified_name_list) (cons $2 (nreverse $4)))) (interfaces_opt (nil) ((COLON qualified_name_list) (nreverse $2))) (class_declaration ((attrs_opt modifiers_opt CLASS IDENTIFIER class_bases_opt class_body) (wisent-raw-tag (semantic-tag-new-type $4 $3 $6 $5 (quote typemodifiers) $2)))) (class_body ((BRACE_BLOCK) (semantic-parse-region (car $region1) (cdr $region1) (quote class_member_declaration) 1))) (class_member_declaration ((LBRACE) nil) ((RBRACE) nil) ((block) nil) ((const_declaration)) ((field_declaration)) ((method_declaration)) ((property_declaration)) ((event_declaration)) ((indexer_declaration)) ((operator_declaration)) ((constructor_declaration)) ((static_constructor_declaration)) ((type_declaration))) (const_declaration ((attrs_opt modifiers_opt CONST type const_declarators SEMICOLON) (wisent-raw-tag (semantic-tag-new-variable $5 $4 nil (quote const) t (quote typemodifiers) $2)))) (const_declarators ((const_declarators COMMA const_declarator) (cons $3 $1)) ((const_declarator) (list $1))) (const_declarator ((IDENTIFIER EQ constant_expression) (list $1 $3 $region))) (field_declaration ((attrs_opt modifiers_opt type variable_declarators SEMICOLON) (wisent-raw-tag (semantic-tag-new-variable $4 $3 nil (quote typemodifiers) $2)))) (variable_declarators ((variable_declarators COMMA variable_declarator) (cons $3 $1)) ((variable_declarator) (list $1))) (variable_declarator ((IDENTIFIER EQ variable_initializer) (list $1 nil $region)) ((IDENTIFIER) (list $1 nil $region))) (variable_initializer ((expression))) (method_declaration ((attrs_opt modifiers_opt VOID method_declarator method_body) (wisent-raw-tag (semantic-tag-new-function (car $4) $3 (cdr $4) (quote typemodifiers) $2))) ((attrs_opt modifiers_opt type method_declarator method_body) (wisent-raw-tag (semantic-tag-new-function (car $4) $3 (cdr $4) (quote typemodifiers) $2)))) (method_declarator ((qualified_name formal_parameter_list) (cons $1 $2))) (method_body ((SEMICOLON)) ((block))) (formal_parameter_list ((PAREN_BLOCK) (semantic-parse-region (car $region1) (cdr $region1) (quote formal_parameters) 1))) (formal_parameters ((LPAREN) nil) ((RPAREN) nil) ((fixed_parameter COMMA)) ((fixed_parameter RPAREN)) ((parameter_array RPAREN))) (parameter_modifier_opt (nil) ((REF)) ((OUT))) (fixed_parameter ((attrs_opt parameter_modifier_opt type IDENTIFIER) (wisent-raw-tag (semantic-tag-new-variable $4 $3 nil (quote typemodifiers) (if $2 (list $2)))))) (parameter_array ((attrs_opt PARAMS array_type IDENTIFIER) (wisent-raw-tag (semantic-tag-new-variable $4 $3 nil (quote typemodifiers) (if $2 (list $2)))))) (property_declaration ((attrs_opt modifiers_opt type qualified_name accessor_list) (wisent-raw-tag (semantic-tag-new-variable $4 $3 nil (quote typemodifiers) $2 (quote property) t (quote accessors) $5)))) (accessor_list ((BRACE_BLOCK) (semantic-parse-region (car $region1) (cdr $region1) (quote accessor_declaration) 1))) (accessor_declaration ((LBRACE) nil) ((RBRACE) nil) ((get_accessor_declaration)) ((set_accessor_declaration))) (get_accessor_declaration ((attrs_opt GET block) (wisent-raw-tag (semantic-tag-new-function $2 nil nil))) ((attrs_opt GET SEMICOLON) (wisent-raw-tag (semantic-tag-new-function $2 nil nil (quote typemodifiers) (list "abstract"))))) (set_accessor_declaration ((attrs_opt SET block) (wisent-raw-tag (semantic-tag-new-function $2 nil nil))) ((attrs_opt SET SEMICOLON) (wisent-raw-tag (semantic-tag-new-function $2 nil nil (quote typemodifiers) (list "abstract"))))) (event_declaration ((attrs_opt modifiers_opt EVENT type variable_declarators SEMICOLON) (wisent-raw-tag (semantic-tag-new-variable $5 $4 nil (quote typemodifiers) (cons "event" $2)))) ((attrs_opt modifiers_opt EVENT type qualified_name event_accessor_list) (wisent-raw-tag (semantic-tag-new-function $5 $4 nil (quote typemodifiers) (cons "event" $2))))) (event_accessor_list ((BRACE_BLOCK) (semantic-parse-region (car $region1) (cdr $region1) (quote event_accessor_declaration) 1))) (event_accessor_declaration ((LBRACE) nil) ((RBRACE) nil) ((add_accessor_declaration)) ((remove_accessor_declaration))) (add_accessor_declaration ((attrs_opt ADD block) (identity $2)) ((attrs_opt ADD SEMICOLON) (identity $2))) (remove_accessor_declaration ((attrs_opt REMOVE block) (identity $2)) ((attrs_opt REMOVE SEMICOLON) (identity $2))) (indexer_declaration ((attrs_opt modifiers_opt type indexer_declarator accessor_list) (wisent-raw-tag (semantic-tag-new-function (car $4) $3 (cdr $4) (quote typemodifiers) $2 (quote accessors) $5)))) (indexer_declarator ((THIS indexer_parameter_list) (cons "this[]" $2)) ((qualified_name DOT THIS indexer_parameter_list) (cons (concat $1 ".this[]") $4))) (indexer_parameter_list ((BRACK_BLOCK) (semantic-parse-region (car $region1) (cdr $region1) (quote indexer_parameters) 1))) (indexer_parameters ((LBRACK) nil) ((RBRACK) nil) ((fixed_parameter COMMA)) ((fixed_parameter RBRACK)) ((parameter_array RBRACK))) (overloadable_operator ((PLUS)) ((MINUS)) ((COMP)) ((PLUSPLUS)) ((MINUSMINUS)) ((BOOLEAN_LITERAL)) ((MULT)) ((DIV)) ((MOD)) ((AND)) ((OR)) ((XOR)) ((LSHIFT)) ((RSHIFT)) ((EQEQ)) ((NOTEQ)) ((GT)) ((LT)) ((GTEQ)) ((LTEQ))) (operator_declaration ((attrs_opt modifiers_opt operator_declarator block) (wisent-raw-tag (semantic-tag-new-function (concat "op" (nth 0 $3)) (nth 1 $3) (nth 2 $3) (quote typemodifiers) $2)))) (operator_declarator ((type OPERATOR overloadable_operator formal_parameter_list) (list $3 $1 $4)) ((OPERATOR type formal_parameter_list) (list (concat "(" $2 ")") $2 $3))) (constructor_declaration ((attrs_opt modifiers_opt constructor_declarator block) (wisent-raw-tag (semantic-tag-new-function (car $3) nil (cdr $3) (quote typemodifiers) $2)))) (constructor_declarator ((IDENTIFIER formal_parameter_list constructor_initializer_opt) (cons $1 $2))) (constructor_initializer_opt (nil) ((COLON BASE LPAREN argument_list_opt RPAREN)) ((COLON THIS LPAREN argument_list_opt RPAREN))) (static_constructor_declaration ((attrs_opt modifiers_opt IDENTIFIER LPAREN RPAREN block) (wisent-raw-tag (semantic-tag-new-function $3 nil nil (quote typemodifiers) $2)))) (extern_opt (nil) ((EXTERN))) (destructor_declaration ((attrs_opt extern_opt COMP IDENTIFIER LPAREN RPAREN block) (wisent-raw-tag (semantic-tag-new-function (concat $3 $4) nil nil (quote typemodifiers) $2)))) (struct_declaration ((attrs_opt modifiers_opt STRUCT IDENTIFIER interfaces_opt struct_body) (wisent-raw-tag (semantic-tag-new-type $4 $3 $6 (if $5 (cons nil $5)) (quote typemodifiers) $2)))) (struct_body ((BRACE_BLOCK) (semantic-parse-region (car $region1) (cdr $region1) (quote struct_member_declaration) 1))) (struct_member_declaration ((LBRACE) nil) ((RBRACE) nil) ((block) nil) ((const_declaration)) ((field_declaration)) ((method_declaration)) ((property_declaration)) ((event_declaration)) ((indexer_declaration)) ((operator_declaration)) ((constructor_declaration)) ((static_constructor_declaration)) ((type_declaration))) (interface_declaration ((attrs_opt modifiers_opt INTERFACE IDENTIFIER interfaces_opt interface_body) (wisent-raw-tag (semantic-tag-new-type $4 $3 $6 (if $5 (cons nil $5)) (quote typemodifiers) $2)))) (interface_body ((BRACE_BLOCK) (semantic-parse-region (car $region1) (cdr $region1) (quote interface_member_declaration) 1))) (interface_member_declaration ((LBRACE) nil) ((RBRACE) nil) ((block) nil) ((interface_method_declaration)) ((interface_property_declaration)) ((interface_event_declaration)) ((interface_indexer_declaration))) (new_opt (nil) ((NEW))) (interface_method_declaration ((attrs_opt new_opt type IDENTIFIER formal_parameter_list SEMICOLON) (wisent-raw-tag (semantic-tag-new-function $4 $3 $5 (quote typemodifiers) $2))) ((attrs_opt new_opt VOID IDENTIFIER formal_parameter_list SEMICOLON) (wisent-raw-tag (semantic-tag-new-function $4 $3 $5 (quote typemodifiers) $2)))) (interface_property_declaration ((attrs_opt new_opt type IDENTIFIER accessor_list) (wisent-raw-tag (semantic-tag-new-variable $4 $3 nil (quote typemodifiers) (if $2 (list $2)) (quote property) t (quote accessors) $5)))) (interface_event_declaration ((attrs_opt new_opt EVENT type IDENTIFIER SEMICOLON) (wisent-raw-tag (semantic-tag-new-function $5 $4 nil (quote typemodifiers) (if $2 (list $2 $3) (list $3)))))) (interface_indexer_declaration ((attrs_opt new_opt type THIS indexer_parameter_list accessor_list) (wisent-raw-tag (semantic-tag-new-function "this[]" $3 $5 (quote typemodifiers) $2 (quote accessors) $6)))) (enum_declaration ((attrs_opt modifiers_opt ENUM IDENTIFIER COLON integral_type enum_body) (wisent-raw-tag (semantic-tag-new-type $4 $3 $7 (cons $6 nil) (quote typemodifiers) $2))) ((attrs_opt modifiers_opt ENUM IDENTIFIER enum_body) (wisent-raw-tag (semantic-tag-new-type $4 $3 $5 nil (quote typemodifiers) $2)))) (enum_body ((BRACE_BLOCK) (semantic-parse-region (car $region1) (cdr $region1) (quote enum_members) 1))) (enum_members ((LBRACE) nil) ((RBRACE) nil) ((block) nil) ((enum_member_declaration COMMA)) ((enum_member_declaration RBRACE))) (enum_member_declaration ((attrs_opt IDENTIFIER) (wisent-raw-tag (semantic-tag-new-variable $2 nil nil (quote const) t))) ((attrs_opt IDENTIFIER EQ constant_expression) (wisent-raw-tag (semantic-tag-new-variable $2 nil $4 (quote const) t)))) (delegate_declaration ((attrs_opt modifiers_opt DELEGATE type IDENTIFIER formal_parameter_list SEMICOLON) (wisent-raw-tag (semantic-tag-new-type $5 $3 nil nil (quote typemodifiers) $2))) ((attrs_opt modifiers_opt DELEGATE VOID IDENTIFIER formal_parameter_list SEMICOLON) (wisent-raw-tag (semantic-tag-new-type $5 $3 nil nil (quote typemodifiers) $2)))) (attrs_opt (nil) ((attr_sections) (apply (quote nconc) (nreverse $1)))) (attr_sections ((attr_sections attr_section) (cons $2 $1)) ((attr_section) (list $1))) (attr_section ((BRACK_BLOCK) nil)) (local_variable_declaration ((type variable_declarators SEMICOLON) (wisent-raw-tag (semantic-tag-new-variable $2 $1 nil))) ((CONST type const_declarators SEMICOLON) (wisent-raw-tag (semantic-tag-new-variable $3 $2 nil (quote const) t))) ((FOREACH PAREN_BLOCK) (semantic-parse-region (car $region2) (cdr $region2) (quote local_foreach_declaration) 1))) (local_foreach_declaration ((LPAREN type IDENTIFIER IN expression RPAREN) (wisent-raw-tag (semantic-tag-new-variable $3 $2 nil)))) (block ((BRACE_BLOCK))))) (quote (compilation_unit using_directive namespace_declaration class_declaration const_declaration field_declaration constructor_declaration method_declaration property_declaration indexer_declaration event_declaration fixed_parameter interface_declaration delegate_declaration namespace_member_declaration class_member_declaration struct_member_declaration interface_member_declaration accessor_declaration event_accessor_declaration formal_parameters indexer_parameters enum_members local_variable_declaration local_foreach_declaration)))))
                nil [8163 24296])
            ("wisent-csharp-wy--install-parser" function nil nil [24298 24917])
            ("wisent-csharp-wy" package nil nil [24957 24984]))          
      :file "wisent-csharp-wy.el"
      :pointmax 25020
      :fsize 25019
      :lastmodtime '(22436 32381 406445 594000)
      :unmatched-syntax '((close-paren 1146 . 1147) (symbol 1102 . 1119) (open-paren 1101 . 1102))))
  :file "!home!lyra!.emacs.d!cedet!contrib!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
